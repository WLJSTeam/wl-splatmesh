<|"Notebook" -> <|"Controller" -> "75c7b85b-e47a-42a9-9a23-858598d7d08e", 
   "FocusedCell" -> CoffeeLiqueur`Notebook`Cells`CellObj[
     CoffeeLiqueur`Notebook`Cells`CellObj`$93], "MessangerChannel" -> 
    Messanger, "ModalsChannel" -> "d304a791-09fc-43e9-8d5d-a74d0a06e16e", 
   "Objects" -> <|"fe1ef805-2bab-47da-aeba-662ccf43adba" -> 
      <|"Public" -> Hold[Graphics[{PointSize[0.003], RGBColor[0.880722, 
            0.611041, 0.142051], GraphicsComplex[{{233.67289615842884, 
              -31.798913839397418}, {-168.0719037982056, -157.4411586909124}, 
             {232.68045277479047, 13.91809413227804}, {7.9372762747188625, 
              -125.06321586186837}, {-141.6570806302039, 
              -11.310343774790923}, {162.11777467634914, 174.5212066751971}, 
             {134.12902540733762, -80.0617157676578}, {173.10085020061217, 
              -148.5360128474937}, {170.63629463745124, 47.05566797790238}, 
             {34.35820801241978, 139.9130097528932}, {56.7118814108667, 
              -42.652178694180385}, {41.05741000409357, -180.76981753311975}, 
             {28.65352100628238, -160.80853239805728}, {-192.34789096300997, 
              121.62928560030795}, {-125.30202267642322, -93.31634509255186}, 
             {-210.28217353803964, -101.82882949899438}, {-100.795012061493, 
              -167.74406117935936}, {-48.427226712750546, 108.5294744419053}, 
             {27.331042225392835, 61.11509415995526}, {-91.67933957379088, 
              -209.84692787558927}, {-0.08032769154517401, 
              -0.036471550438262404}, {-0.06366191986569089, 
              0.006087536482653004}, {-0.07583922076615784, 
              -0.09888029976923905}, {-0.04857640860840578, 
              -0.10305877254385605}, {-0.05983742405398481, 
              -0.12086136664048108}, {-0.03902844857848676, 
              0.054366147605154236}, {-0.04730157667117041, 
              -0.10345745251501216}, {-0.026001259719862904, 
              0.0573792481563918}, {-0.04476519229604589, 
              -0.0264125480890927}, {-0.035814809736705956, 
              0.027393914171938528}, {-0.026798029680635004, 
              0.05078569478727142}, {-0.029878873528953798, 
              0.041217375479524636}, {-0.03993145453402847, 
              -0.09296143558207519}, {-0.015510455236363572, 
              0.05270242541782968}, {-0.033703369340659886, 
              -0.09431848086851041}, {0.008379364087453265, 
              -0.0013723791314797084}, {-0.02916178056425891, 
              -0.02862828869801804}, {-0.016772007674252735, 
              0.07039001567662122}, {-0.03127322096030497, 
              -0.0762168767935183}, {-0.011739077422042292, 
              0.04245941692812638}, {-0.015151908754016126, 
              -0.10729858069865088}, {-0.014846480269053487, 
              -0.0938277978270875}, {-0.018073398610180497, 
              -0.02165905612530824}, {-0.012097623904389737, 
              0.05156005396201696}, {-0.01131413344296384, 
              0.0443914814037291}, {0.01953414353826268, 
              0.009253975484335238}, {-0.009056618554109552, 
              -0.039883330960656084}, {-0.007595873626027365, 
              -0.01668322340837902}, {0.00528524073978827, 
              0.0838607985481846}, {-0.004607986273131984, 
              0.051268710906172105}, {0.025735669732938872, 
              0.0018707290954248527}, {-0.004222880792092137, 
              -0.017112571069624067}, {0.017090715658561573, 
              0.00847194938706747}, {-0.002921489856164368, 
              0.03905530332825493}, {0.008764469568493112, 
              -0.012129071430172611}, {0.013053747857316259, 
              0.03053735240605406}, {0.03770049864386659, 
              0.011032701509493294}, {0.032680847891002354, 
              0.002001066778302815}, {0.0020450428993150638, 
              0.04428414448841784}, {0.005842979712328742, 
              0.035421182052716486}, {0.010822791967154376, 
              -0.04326444379296084}, {-0.2602914666848993, 
              0.17075003149265125}, {0.035655455744551534, 
              0.018684290186681832}, {0.02411557081270227, 
              0.0035421182052716486}, {0.014740244274283876, 
              0.06759158895600617}, {0.01519174725205473, 
              0.042858096899282494}, {0.044924546288200314, 
              0.008349278626711745}, {0.025257607756475613, 
              -0.0199339985578058}, {0.020184839006226567, 
              0.06657955518307142}, {0.013252940347509288, 
              0.08182139715727063}, {0.022747782380043487, 
              -0.032040069220411714}, {0.029002426572104497, 
              0.0531011053889858}, {-0.07212096094922137, 
              -0.009759992370802613}, {-0.047766359148287474, 
              -0.1010730396105977}, {-0.05497712729327498, 
              0.01370845746975261}, {-0.03501803977593385, 
              -0.00008433614774456326}, {-0.04525653377185535, 
              -0.023184773707232605}, {-0.04574787524766481, 
              -0.09447948624147733}, {0.005869538711021145, 
              -0.011561719163527372}, {0.006440557182907819, 
              -0.0036877897331940757}, {0.004382234784246557, 
              0.003235441304382328}, {-0.027541681644022303, 
              0.03997533403092289}, {-0.011818754418119502, 
              0.06187206475442034}, {-0.01921543555395384, 
              0.04104103626151327}, {0.018192914104296312, 
              0.009675656223058052}, {-0.023385198348661172, 
              -0.045380514409097156}, {-0.0149527162638231, 
              0.031189040820443863}, {-0.004873576260056018, 
              0.06319844235076666}, {0.021433111944769524, 
              0.012282409880617273}, {-0.002164558393430876, 
              0.06621920982452646}, {-0.00827312809268365, 
              -0.06296843467509966}, {-0.00362530332151306, 
              -0.024020468262155998}, {0.03193719592761506, 
              0.00609520340517524}, {0.010849350965846778, 
              -0.08955732198220373}, {0.01009241950311328, 
              0.06826627813796268}, {0.04002441102945189, 
              0.011055702277059992}, {0.0035589058247820523, 
              0.05425114376732074}, {0.007861463612951397, 
              -0.01840061405335921}, {0.01065015847565375, 
              0.0414627170002361}, {0.011287574444271435, 
              -0.0035421182052716438}, {0.01560341173178699, 
              0.054933499871799484}, {0.020742577978767034, 
              0.06684023054882735}, {0.014634008279514263, 
              -0.02582219505488076}, {0.04727501767247801, 
              0.007314244086210288}, {0.04160467145164989, 
              0.010864029214004171}, {0.023743744831008613, 
              0.06099803558688578}, {0.050355861520796796, 
              0.007973599423122327}, {0.0503558615207968, 
              0.026006201195414354}, {-0.07226703544202957, 
              -0.0011500383783349512}, {-0.06263939841603336, 
              -0.11286476644979207}, {-0.052493860915535276, 
              -0.002829094410703976}, {-0.03637254870924642, 
              0.05674289358704647}, {-0.051072954485491685, 
              -0.14252808968831154}, {-0.0009030059555417152, 
              0.004845495034051259}, {-0.029746078535491785, 
              -0.009368979322168729}, {-0.0377536166412514, 
              -0.057371581233869574}, {-0.02744872514859889, 
              -0.019496983974038526}, {-0.014501213286052243, 
              0.0675762551109617}, {-0.018272591100373523, 
              -0.09520784388108944}, {-0.010716555972384764, 
              -0.016123538064256007}, {-0.014248902798474412, 
              -0.08642921759313266}, {-0.00808721510183683, 
              -0.042927099201982594}, {0.04238816191307579, 
              0.00791226404294446}, {0.03829807611444567, 
              0.006961565650187569}, {-0.0006241364692714773, 
              -0.05708023817802472}, {0.04025016251833732, 
              0.012152072197739314}, {0.00807393560249063, 
              0.06466282455251315}, {0.017701572628486848, 
              0.06651055288037132}, {0.015736206725249002, 
              -0.04363245607402803}, {0.02686442717736601, 
              0.04426114372085114}, {0.029175060063605106, 
              0.07006800493068743}, {-0.07973011407459493, 
              -0.06582819677589258}, {-0.15972581813611392, 
              -0.3158772079159998}, {-0.05044881801622022, 
              -0.15195073746813592}, {-0.045402608264663566, 
              -0.16320577973077396}, {-0.03585464823474456, 
              -0.14403080650266922}, {0.021658863433654953, 
              0.0015103837368799016}, {0.011699238924003688, 
              -0.0005136838089896111}, {-0.020091882510803148, 
              -0.030552686251098523}, {0.0008366084588107057, 
              0.07667689214485228}, {0.005139166246980055, 
              -0.08819260977324626}, {0.008339525589414662, 
              -0.03358112064738055}, {0.012349934391967564, 
              -0.020808027725340374}, {0.017435982641562816, 
              -0.05133004628634996}, {-0.07108516000021764, 
              -0.05882829651309384}, {-0.0574471141716685, 
              -0.10327344637447856}, {-0.01880377107422159, 
              0.008310944014100579}, {-0.025509918244053444, 
              0.019297643988460476}, {-0.02893602907537348, 
              -0.03536751359506085}, {-0.02805958211852417, 
              -0.08205907175545984}, {-0.016267386699097067, 
              -0.08966465889751499}, {-0.002377030382970098, 
              0.05990166566620647}, {0.004501750278362372, 
              0.07968232577356761}, {0.006613190674408441, 
              -0.03986799711561162}, {0.009083177552801953, 
              0.07932198041502267}, {0.04767340265286406, 
              0.025852862744969694}, {0.024168688810087074, 
              -0.07395513464945955}, {-0.08157596448371697, 
              -0.09107537264160587}, {-0.035894486732783164, 
              -0.14310310887747904}, {-0.0369568466804793, 
              -0.005451181913307666}, {-0.02447411729504971, 
              -0.02638188039900377}, {-0.02094177046896006, 
              0.057064904332980254}, {-0.011141499951463216, 
              -0.08106237182756956}, {0.0180866781095267, 
              -0.004446815062895142}, {0.019813013024532915, 
              -0.12060069127472516}, {0.010012742507036074, 
              -0.02819894103677299}, {-0.05302504088938333, 
              0.17002934077556137}, {0.050262905025373394, 
              0.009805993905936014}, {0.043118534377116886, 
              -0.07466815844402723}, {0.014155946303050997, 
              0.09588253306304596}, {-0.07196160695706695, 
              -0.006555218756509221}, {-0.03423454931450795, 
              -0.09677189607562499}, {-0.038842535587639934, 
              -0.016690890330901254}, {-0.016015076211519236, 
              -0.1029054340934114}, {-0.01787420611998747, 
              -0.03485382978607124}, {-0.028750116084526656, 
              0.038526285674220846}, {0.010995425458654999, 
              -0.0017787260251580577}, {-0.014076269306973789, 
              0.07309643932696946}, {0.024035893816625055, 
              -0.06489283222818015}, {-0.003864334309744687, 
              0.047097905054077356}, {0.03682405168701728, 
              0.012382079873406305}, {0.046159539727397066, 
              -0.024457482845923275}, {0.039360436062141804, 
              0.020731358500118046}, {0.0739136933609586, 
              -0.03065235624388754}, {0.07477686081846173, 
              -0.05079336170979365}, {-0.04193665893530494, 
              -0.03657122043105143}, {-0.03991817503468228, 
              -0.01651455111288989}, {-0.029732799036145577, 
              -0.01934364552359387}, {-0.030383494504109463, 
              0.0024840828972034945}, {-0.013345896842932699, 
              -0.03679356118419618}, {-0.013359176342278897, 
              -0.03163372232673337}, {-0.01894984556702981, 
              -0.005926531109686112}, {-0.023743744831008617, 
              0.027677590305261148}, {0.02824549510937099, 
              -0.08089369953208043}, {0.0009959624509651268, 
              -0.005021834252062611}, {0.012084344405043537, 
              -0.01833927867318134}, {0.013863797317434565, 
              -0.0015640521945355285}, {-0.012655362876930209, 
              0.06818194199021813}, {0.02366406783493141, 
              0.008433614774456305}, {0.027886948627023542, 
              0.011255042262638052}, {0.03627959221382301, 
              0.0185846201938928}, {0.0511659109809151, 
              -0.0016483883422800949}, {0.045907229239819235, 
              0.01184539529685}, {0.04686335319274575, 0.011186039959937957}, 
             {0.03164504694199863, 0.058030936570781615}, 
             {0.12061769256154993, -0.0376062549715529}, 
             {0.016838405170983742, 0.08902830432816965}, 
             {0.0519095629443024, 0.017580253343480283}, 
             {0.010358009490037314, 0.09927131281787294}, 
             {0.01910919955918423, 0.09705557220894762}, 
             {0.06394078935196112, 0.014912164305743197}, 
             {0.05602620774162492, 0.036824228874285124}, 
             {0.11745717171715393, -0.00741391407899931}, 
             {-0.029626563041375967, -0.07670755983494121}, 
             {-0.055667661259277475, 0.016867229548912607}, 
             {-0.030503009998225278, -0.016000867303900282}, 
             {-0.03496492177854904, 0.00078969301979}, 
             {-0.034513418800778184, 0.021122371548751927}, 
             {-0.014448095288667437, -0.006455548763720186}, 
             {-0.015683088727864194, 0.010695356918515043}, 
             {-0.028338451604794403, 0.04089536473359085}, 
             {-0.02019811850557277, 0.03956898713724454}, 
             {-0.019892690020610126, 0.0503870148161153}, 
             {-0.018856889071606396, 0.04874629339635745}, 
             {0.02164558393430875, -0.0004446815062895118}, 
             {0.03347761785177445, 0.010066669271691942}, 
             {0.02706361966755904, 0.005750191891674754}, 
             {0.11830705967531084, -0.04827861112250121}, 
             {0.07456438882892248, -0.0215823869000859}, 
             {0.053449984868461795, 0.01667555648585679}, 
             {0.12931576463331204, -0.0325230853393124}, {0.0345798162975092, 
              0.058851297280660554}, {0.06784496215974442, 
              0.0067392248970428136}, {0.06080682750625752, 
              0.0073679125438659175}, {0.04747421016267103, 
              0.050532686344037736}, {0.12223779148178653, 
              -0.0015563852720133023}, {0.023039931365659932, 
              0.09831294750259383}, {0.059983498546793024, 
              0.03924697639131075}, {0.06817694964339946, 
              0.02439614746574542}, {0.07128435249041065, 
              0.01671389109846795}, {-0.031206823463573966, 
              -0.025331512013457846}, {-0.03535002725958889, 
              0.006976899495232036}, {-0.03372992833935229, 
              0.024963499732390662}, {-0.0361866357183996, 
              0.02995466629436435}, {-0.0259481417224781, 
              0.03753725266885279}, {0.012854555367123238, 
              0.01047301616537029}, {0.010039301505728477, 
              0.017081903379535135}, {0.009840109015535451, 
              0.055117506012333076}, {0.05398116484230985, 
              0.0002990099783670905}, {0.013677884326587737, 
              0.0669015659290052}, {0.044605838303891476, 
              0.057831596585203565}, {0.019308392049377253, 
              0.08361545702747315}, {0.149659957631693, 
              0.008249608633922725}, {0.056185561733779345, 
              0.061649724001275594}, {0.04079462199153159, 
              0.1177485960964545}, {0.0597444675585614, 0.04706723736398842}, 
             {0.06354240437157507, 0.03998300095344512}, 
             {-0.02620045221005593, -0.013317444421118728}, 
             {0.009919786011612662, -0.041133039331780065}, 
             {0.010942307461270194, -0.025975533505325415}, 
             {-0.03021086101260884, 0.043157106877649586}, 
             {0.010995425458654997, 0.005274842695296313}, 
             {0.019002963564414617, 0.007551918684399513}, 
             {0.01999892601537974, -0.0020087337008250473}, 
             {0.05245402241749667, 0.005182839625029515}, 
             {0.0676988876669362, 0.004600153513339807}, 
             {0.022163484408810618, 0.06440981610927947}, 
             {0.009534680530572819, 0.09004033810110441}, 
             {0.05410068033642567, 0.08229674635364907}, 
             {0.05773926315728495, 0.07423114386025996}, 
             {-0.03679749268832488, -0.0241584728675562}, 
             {0.01788748561933368, -0.027439915707071914}, 
             {-0.003452669830012436, 0.008464282464545237}, 
             {0.06560072677023635, -0.007176239480810085}, 
             {0.0464118502149749, 0.007843261740244365}, 
             {0.06266595741472576, 0.016982233386746107}, 
             {-0.015855722219364814, -0.041815395436258805}, 
             {-0.022920415871544114, 0.038380614146298425}, 
             {0.012960791361892845, 0.04572552592259764}, 
             {0.06018269103698605, -0.0020240675458695107}, 
             {0.0574205551729761, 0.02415080594503396}, 
             {-0.04847017261363616, 0.020317344683917462}, 
             {0.032322301408654906, -0.09364379168655391}, 
             {0.030410053502801866, 0.0005520184216007777}, 
             {0.023531272841469397, 0.06547551833986986}, 
             {0.03250821439950173, 0.0895956565948149}, 
             {0.017435982641562816, -0.12149772120982641}, 
             {0.028829793080603856, 0.0706660248874216}, 
             {-0.05609260523835593, -0.006133538017786404}, 
             {-0.05578717675339329, 0.07985099806905675}, 
             {-0.006825662663947667, -0.1162458792820968}, 
             {-0.08178843647325618, -0.2859532093117243}, 
             {0.03734195216151915, -0.14547218793684902}, 
             {0.08307654790983776, -0.08585419840396517}, 
             {-0.05495056829458258, 0.007958265578077856}, 
             {0.01408954880631999, -0.1538521342536497}, 
             {0.031379456955074596, 0.08576986225622064}, 
             {-0.04688991219143816, -0.10596453617978235}, 
             {-0.10785609368985011, -0.12842095224740283}, 
             {0.03832463511313807, -0.08671289372645527}}, 
            Point[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 
              18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 
              34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 
              50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 
              66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 
              82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 
              98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 
              111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 
              123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 
              135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 
              147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 
              159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 
              171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 
              183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 
              195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 
              207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 
              219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 
              231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 
              243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 
              255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 
              267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 
              279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 
              291, 292, 293, 294, 295, 296, 297, 298, 299, 300}]]}, 
          ImageSize -> 50, "Controls" -> False, ImagePadding -> None]]|>, 
     "5087af92-8fa7-4826-8819-439309f4520d" -> 
      <|"Public" -> Hold[Graphics[{{GrayLevel[0.5], Disk[{0, 0}]}, 
           AbsolutePointSize[4], Point[{1.2, 1.2}], {RGBColor[1, 0, 0], 
            Point[{-0.3, 0.4}]}}, Background -> GrayLevel[0.93], 
          PlotRangePadding -> Scaled[0.1], FrameStyle -> 
           Directive[Thickness[Tiny], GrayLevel[0.7]], Axes -> False, 
          AspectRatio -> 1, ImageSize -> Dynamic[{Automatic, 
             3.5*(CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                Magnification])}], Frame -> True, FrameTicks -> None, 
          FrameStyle -> Directive[Opacity[0.5], Thickness[Tiny], 
            RGBColor[0.368417, 0.506779, 0.709798]]]]|>, 
     "a0ba956a-15c3-473c-8de4-b424a2c988da" -> 
      <|"Public" -> Hold[
         CoffeeLiqueur`Extensions`FrontendObject`Internal`Compressed["eJwsu8e\
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\
7t/7xA=", {"ExpressionJSON", "ZLIB"}]]|>, 
     "2cbcc7c3-ed38-49e7-bdb1-2bc78bd54719" -> 
      <|"Public" -> Hold[
         CoffeeLiqueur`Extensions`FrontendObject`Internal`Compressed["eJzkvUm\
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", 
          {"ExpressionJSON", "ZLIB"}]]|>|>, "Path" -> "/users/kirill/Library/\
CloudStorage/OneDrive-Personal/\:0414\:043e\:043a\:0443\:043c\:0435\:043d\
\:0442\:044b/WLJS Notebooks/Splatting/Example 2.wln", 
   "PublicFields" -> {"Properties"}, "RuntimeCache" -> 
    <|{"Bundles", "Javascript", "CoffeeLiqueur/SplatMesh"} -> 
      {"const loadSplat=async()=>{await \
interpretate.shared.THREE.load();const \
n=interpretate.shared.THREE.THREE,{Mesh:t,OrthographicCamera:e,BufferGeometry\
:A,Float32BufferAttribute:s,Loader:a,FileLoader:r,Quaternion:i,Vector3:o,Colo\
r:c,Matrix4:l}=interpretate.shared.THREE.THREE,u=new e(-1,1,1,-1,0,1);const \
g=new class extends \
A{constructor(){super(),this.setAttribute(\"position\",new \
s([-1,3,0,-1,-1,0,3,-1,0],3)),this.setAttribute(\"uv\",new \
s([0,2,0,0,2,0],2))}};class h{constructor(n){this._mesh=new \
t(g,n)}dispose(){this._mesh.geometry.dispose()}render(n){n.render(this._mesh,\
u)}get material(){return this._mesh.material}set \
material(n){this._mesh.material=n}}var \
p=Uint8Array,I=Uint16Array,d=Int32Array,C=new \
p([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0]),B=new \
p([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0]),\
f=new \
p([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),E=function(n,t){for(var \
e=new I(31),A=0;A<31;++A)e[A]=t+=1<<n[A-1];var s=new \
d(e[30]);for(A=1;A<30;++A)for(var \
a=e[A];a<e[A+1];++a)s[a]=a-e[A]<<5|A;return{b:e,r:s}},m=E(C,2),Q=m.b,y=m.r;Q[\
28]=258,y[258]=28;for(var x=E(B,0).b,w=new I(32768),b=0;b<32768;++b){var \
v=(43690&b)>>1|(21845&b)<<1;v=(61680&(v=(52428&v)>>2|(13107&v)<<2))>>4|(3855&\
v)<<4,w[b]=((65280&v)>>8|(255&v)<<8)>>1}var S=function(n,t,e){for(var \
A=n.length,s=0,a=new I(t);s<A;++s)n[s]&&++a[n[s]-1];var r,i=new \
I(t);for(s=1;s<t;++s)i[s]=i[s-1]+a[s-1]<<1;if(e){r=new I(1<<t);var \
o=15-t;for(s=0;s<A;++s)if(n[s])for(var \
c=s<<4|n[s],l=t-n[s],u=i[n[s]-1]++<<l,g=u|(1<<l)-1;u<=g;++u)r[w[u]>>o]=c}else \
for(r=new I(A),s=0;s<A;++s)n[s]&&(r[s]=w[i[n[s]-1]++]>>15-n[s]);return \
r},D=new \
p(288);for(b=0;b<144;++b)D[b]=8;for(b=144;b<256;++b)D[b]=9;for(b=256;b<280;++\
b)D[b]=7;for(b=280;b<288;++b)D[b]=8;var M=new \
p(32);for(b=0;b<32;++b)M[b]=5;var k=S(D,9,1),_=S(M,5,1),T=function(n){for(var \
t=n[0],e=1;e<n.length;++e)n[e]>t&&(t=n[e]);return t},F=function(n,t,e){var \
A=t/8|0;return(n[A]|n[A+1]<<8)>>(7&t)&e},N=function(n,t){var \
e=t/8|0;return(n[e]|n[e+1]<<8|n[e+2]<<16)>>(7&t)},R=function(n){return(n+7)/8\
|0},G=function(n,t,e){return(null==t||t<0)&&(t=0),(null==e||e>n.length)&&(e=n\
.length),new p(n.subarray(t,e))},U=[\"unexpected EOF\",\"invalid block \
type\",\"invalid length/literal\",\"invalid distance\",\"stream \
finished\",\"no stream handler\",,\"no callback\",\"invalid UTF-8 \
data\",\"extra field too long\",\"date not in range 1980-2099\",\"filename \
too long\",\"stream finishing\",\"invalid zip data\"],Y=function(n,t,e){var \
A=new \
Error(t||U[n]);if(A.code=n,Error.captureStackTrace&&Error.captureStackTrace(A\
,Y),!e)throw A;return A},q=function(n,t,e,A){var \
s=n.length,a=A?A.length:0;if(!s||t.f&&!t.l)return e||new p(0);var \
r=!e,i=r||2!=t.i,o=t.i;r&&(e=new p(3*s));var c=function(n){var \
t=e.length;if(n>t){var A=new \
p(Math.max(2*t,n));A.set(e),e=A}},l=t.f||0,u=t.p||0,g=t.b||0,h=t.l,I=t.d,d=t.\
m,E=t.n,m=8*s;do{if(!h){l=F(n,u,1);var y=F(n,u+1,3);if(u+=3,!y){var \
w=n[(K=R(u)+4)-4]|n[K-3]<<8,b=K+w;if(b>s){o&&Y(0);break}i&&c(g+w),e.set(n.sub\
array(K,b),g),t.b=g+=w,t.p=u=8*b,t.f=l;continue}if(1==y)h=k,I=_,d=9,E=5;else \
if(2==y){var v=F(n,u,31)+257,D=F(n,u+10,15)+4,M=v+F(n,u+5,31)+1;u+=14;for(var \
U=new p(M),q=new p(19),z=0;z<D;++z)q[f[z]]=F(n,u+3*z,7);u+=3*D;var \
L=T(q),J=(1<<L)-1,H=S(q,L,1);for(z=0;z<M;){var \
K,V=H[F(n,u,J)];if(u+=15&V,(K=V>>4)<16)U[z++]=K;else{var \
$=0,j=0;for(16==K?(j=3+F(n,u,3),u+=2,$=U[z-1]):17==K?(j=3+F(n,u,7),u+=3):18==\
K&&(j=11+F(n,u,127),u+=7);j--;)U[z++]=$}}var \
Z=U.subarray(0,v),X=U.subarray(v);d=T(Z),E=T(X),h=S(Z,d,1),I=S(X,E,1)}else \
Y(1);if(u>m){o&&Y(0);break}}i&&c(g+131072);for(var \
O=(1<<d)-1,P=(1<<E)-1,W=u;;W=u){var \
nn=($=h[N(n,u)&O])>>4;if((u+=15&$)>m){o&&Y(0);break}if($||Y(2),nn<256)e[g++]=\
nn;else{if(256==nn){W=u,h=null;break}var tn=nn-254;if(nn>264){var \
en=C[z=nn-257];tn=F(n,u,(1<<en)-1)+Q[z],u+=en}var \
An=I[N(n,u)&P],sn=An>>4;An||Y(3),u+=15&An;X=x[sn];if(sn>3){en=B[sn];X+=N(n,u)\
&(1<<en)-1,u+=en}if(u>m){o&&Y(0);break}i&&c(g+131072);var an=g+tn;if(g<X){var \
rn=a-X,on=Math.min(X,an);for(rn+g<0&&Y(3);g<on;++g)e[g]=A[rn+g]}for(;g<an;++g\
)e[g]=e[g-X]}}t.l=h,t.p=W,t.b=g,t.f=l,h&&(l=1,t.m=d,t.d=I,t.n=E)}while(!l);re\
turn g!=e.length&&r?G(e,0,g):e.subarray(0,g)},z=new \
p(0),L=function(n,t){return \
n[t]|n[t+1]<<8},J=function(n,t){return(n[t]|n[t+1]<<8|n[t+2]<<16|n[t+3]<<24)>\
>>0},H=function(n,t){return J(n,t)+4294967296*J(n,t+4)},K=function(){function \
n(n,t){\"function\"==typeof n&&(t=n,n={}),this.ondata=t;var \
e=n&&n.dictionary&&n.dictionary.subarray(-32768);this.s={i:0,b:e?e.length:0},\
this.o=new p(32768),this.p=new p(0),e&&this.o.set(e)}return \
n.prototype.e=function(n){if(this.ondata||Y(5),this.d&&Y(4),this.p.length){if\
(n.length){var t=new \
p(this.p.length+n.length);t.set(this.p),t.set(n,this.p.length),this.p=t}}else \
this.p=n},n.prototype.c=function(n){this.s.i=+(this.d=n||!1);var \
t=this.s.b,e=q(this.p,this.s,this.o);this.ondata(G(e,t,this.s.b),this.d),this\
.o=G(e,this.s.b-32768),this.s.b=this.o.length,this.p=G(this.p,this.s.p/8|0),t\
his.s.p&=7},n.prototype.push=function(n,t){this.e(n),this.c(t)},n}();function \
V(n,t){return q(n,{i:2},t&&t.out,t&&t.dictionary)}var $=function(){function \
n(n,t){this.v=1,this.r=0,K.call(this,n,t)}return \
n.prototype.push=function(n,t){if(K.prototype.e.call(this,n),this.r+=n.length\
,this.v){var \
e=this.p.subarray(this.v-1),A=e.length>3?function(n){31==n[0]&&139==n[1]&&8==\
n[2]||Y(6,\"invalid gzip data\");var \
t=n[3],e=10;4&t&&(e+=2+(n[10]|n[11]<<8));for(var \
A=(t>>3&1)+(t>>4&1);A>0;A-=!n[e++]);return \
e+(2&t)}(e):4;if(A>e.length){if(!t)return}else \
this.v>1&&this.onmember&&this.onmember(this.r-e.length);this.p=e.subarray(A),\
this.v=0}K.prototype.c.call(this,t),!this.s.f||this.s.l||t||(this.v=R(this.s.\
p)+9,this.s={i:0},this.o=new p(0),this.push(new \
p(0),t))},n}(),j=\"undefined\"!=typeof TextDecoder&&new \
TextDecoder;try{j.decode(z,{stream:!0}),1}catch(n){}function \
Z(n,t){if(t){for(var \
e=\"\",A=0;A<n.length;A+=16384)e+=String.fromCharCode.apply(null,n.subarray(A\
,A+16384));return e}if(j)return j.decode(n);var s=function(n){for(var \
t=\"\",e=0;;){var \
A=n[e++],s=(A>127)+(A>223)+(A>239);if(e+s>n.length)return{s:t,r:G(n,e-1)};s?3\
==s?(A=((15&A)<<18|(63&n[e++])<<12|(63&n[e++])<<6|63&n[e++])-65536,t+=String.\
fromCharCode(55296|A>>10,56320|1023&A)):t+=1&s?String.fromCharCode((31&A)<<6|\
63&n[e++]):String.fromCharCode((15&A)<<12|(63&n[e++])<<6|63&n[e++]):t+=String\
.fromCharCode(A)}}(n),a=s.s;return(e=s.r).length&&Y(8),a}var \
X=function(n,t){return t+30+L(n,t+26)+L(n,t+28)},O=function(n,t,e){var \
A=L(n,t+28),s=Z(n.subarray(t+46,t+46+A),!(2048&L(n,t+8))),a=t+46+A,r=J(n,t+20\
),i=e&&4294967295==r?P(n,a):[r,J(n,t+24),J(n,t+42)],o=i[0],c=i[1],l=i[2];retu\
rn[L(n,t+10),o,c,s,a+L(n,t+30)+L(n,t+32),l]},P=function(n,t){for(;1!=L(n,t);t\
+=4+L(n,t+2));return[H(n,t+12),H(n,t+4),H(n,t+20)]};let W;const \
nn=\"undefined\"!=typeof TextDecoder?new \
TextDecoder(\"utf-8\",{ignoreBOM:!0,fatal:!0}):{decode:()=>{throw \
Error(\"TextDecoder not available\")}};\"undefined\"!=typeof \
TextDecoder&&nn.decode();let tn=null;function en(n,t){return \
n>>>=0,nn.decode((null!==tn&&0!==tn.byteLength||(tn=new \
Uint8Array(W.memory.buffer)),tn).subarray(n,n+t))}async function \
An(n){if(void 0!==W)return W;void \
0!==n&&(Object.getPrototypeOf(n)===Object.prototype?({module_or_path:n}=n):co\
nsole.warn(\"using deprecated parameters for the initialization function; \
pass a single object instead\")),void 0===n&&(n=new \
URL(\"data:application/wasm;base64,AGFzbQEAAAABzAEeYAJ/fwF/YAJ/fwBgA39/fwF/YA\
N/f38AYAF/AX9gAX8AYANvf38Bb2AFf39/f38Bf2AFf39/f38AYAFvAW9gA29vfwBgAW8Bf2AAAGA\
AAX9gBH9/f38AYAR/f39/AX9gA39vbwF/YAF/AW9gAAFvYAF9AX1gBn9/f39/fwBgDX19fX19fX19\
f29/fX0Bb2AGf39/f39/AX9gBX9/fX9/AGAEf31/fwBgBX9/fH9/AGAEf3x/fwBgBX9/fn9/AGAEf\
35/fwBgAn19AX0C8gQRA3diZx1fX3diZ19idWZmZXJfNjA5Y2MzZWVlNTFlZDE1OAAJA3diZxpfX3\
diZ19uZXdfOWZlZTk3YTQwOWIzMmI2OAAJA3diZxpfX3diZ19zZXRfZjRmMWYwZGFhMzA2OTZmYwA\
KA3diZx1fX3diZ19sZW5ndGhfOGNmZDJjNjQwOWFmODhhZAALA3diZzFfX3diZ19uZXd3aXRoYnl0\
ZW9mZnNldGFuZGxlbmd0aF9mMWRlYWQ0NGQxZmM3MjEyAAYDd2JnGl9fd2JnX25ld19lM2IzMjFkY\
2ZlZjg5ZmM3AAkDd2JnGl9fd2JnX3NldF9kMjM2NjFkMTkxNDhiMjI5AAoDd2JnHV9fd2JnX2xlbm\
d0aF82Y2E1Mjc2NjVkODk2OTRkAAsDd2JnMV9fd2JnX25ld3dpdGhieXRlb2Zmc2V0YW5kbGVuZ3R\
oX2U2YjdlNjlhY2Q0YzczNTQABgN3YmcaX193Ymdfc2V0XzEwYmFkOWJlZTBlOWM1OGIACgN3Ymcd\
X193YmdfbGVuZ3RoXzNiNGYwMjIxODhhZThkYjYACwN3YmcfX193Ymdfc3ViYXJyYXlfNzY5ZTFlM\
GY4MWJiMjU5YgAGA3diZx9fX3diZ19zdWJhcnJheV8zYWFlZWM4OWJiMjU0NGYwAAYDd2JnJF9fd2\
JnX25ld3dpdGhsZW5ndGhfNWE1ZWZlMzEzY2ZkNTlmMQARA3diZxBfX3diaW5kZ2VuX3Rocm93AAE\
Dd2JnEV9fd2JpbmRnZW5fbWVtb3J5ABIDd2JnH19fd2JpbmRnZW5faW5pdF9leHRlcm5yZWZfdGFi\
bGUADANeXQQAAQcFAgMCEwEBAA0BAwEAAA0BAwgIAwEBBRQBAw4AAwEDAgwMAgABAQcDABUBFhcIG\
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\
4EccSABQf+B/AdxakGBgARsQRB2IARqDwsgAUUEQEEADwsgAUEDcSEDAkAgAUEESQRADAELIAFBfH\
EhBQNAIAQgACACaiIBLAAAQb9/SmogAUEBaiwAAEG/f0pqIAFBAmosAABBv39KaiABQQNqLAAAQb9\
/SmohBCAFIAJBBGoiAkcNAAsLIANFDQAgACACaiEBA0AgBCABLAAAQb9/SmohBCABQQFqIQEgA0EB\
ayIDDQALCyAEC4oGAQZ/IAAoAggiAyABSQRAIAEgAyICayIEIAAoAgAgAmtLBEAgACACIARBBEEEE\
CYgACgCCCECCyAAKAIEIgYgAkECdGohBSAEQQJPBEAgASADQX9zakECdCIHBEAgBUEAIAf8CwALIA\
EgAmpBAnQgA0ECdGsgBmpBBGshBSACIARqQQFrIQILIAVBADYCACAAIAJBAWo2AggLIAAoAhQiAyA\
BSQRAIAEgAyICayIEIAAoAgwgAmtLBEAgAEEMaiACIARBBEEEECYgACgCFCECCyAAKAIQIgYgAkEC\
dGohBSAEQQJPBEAgASADQX9zakECdCIHBEAgBUEAIAf8CwALIAEgAmpBAnQgA0ECdGsgBmpBBGshB\
SACIARqQQFrIQILIAVBADYCACAAIAJBAWo2AhQLIAAoAjgiAyABSQRAIAEgAyICayIEIAAoAjAgAm\
tLBEAgAEEwaiACIARBBEEEECYgACgCOCECCyAAKAI0IgYgAkECdGohBSAEQQJPBEAgASADQX9zakE\
CdCIHBEAgBUEAIAf8CwALIAEgAmpBAnQgA0ECdGsgBmpBBGshBSACIARqQQFrIQILIAVBADYCACAA\
IAJBAWo2AjgLIAAoAiAiA0H//wNNBEAgAyEBQYCABCADayICIAAoAhggA2tLBEAgAEEYaiADIAJBB\
EEEECYgACgCICEBCyAAKAIcIgUgAUECdCIEaiECIANB//8DRwRAQfz/DyADQQJ0IgZrIgcEQCACQQ\
AgB/wLAAsgBCAGayAFakH8/w9qIQIgASADa0H//wNqIQELIAJBADYCACAAIAFBAWo2AiALIAAoAiw\
iA0H//wNNBEAgAyEBQYCABCADayICIAAoAiQgA2tLBEAgAEEkaiADIAJBBEEEECYgACgCLCEBCyAA\
KAIoIgUgAUECdCIEaiECIANB//8DRwRAQfz/DyADQQJ0IgZrIgcEQCACQQAgB/wLAAsgBCAGayAFa\
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\
zYCCCANIAo2AgQgDSAANgIAIA0gDUEEaiIAKAIAEG02AgwgDSANQQhqNgIcIA0gDTYCGCANIAA2Ah\
QgDSANQQxqNgIQIA1BEGohACMAQdAAayIIJAACQAJAAkACQAJAQQBBjIbAACgCABEEACIPBEAgDyg\
CAA0BIAAoAgwhFiAAKAIIIQogACgCACEDIA9BfzYCACAAKAIEIQAgD0EEaiILIAMoAgAQEyAIIABB\
ACAKKAIAEGE2AgggCigCACIAIA8oAgwiCUsNAiAIQQhqIA8oAgggABAzIAhBDGohFSADKAIAIQAgC\
igCACETIwBBMGsiDiQAIAsgABATAkAgCygCCCIAIBNPBEAgCygCBCEKIAsoAhwhAwJAIAsoAiAiDE\
UNACAMQQJ0IgBFDQAgA0EAIAD8CwALIAsoAighFAJAIAsoAiwiEEUNACAQQQJ0IgBFDQAgFEEAIAD\
8CwALIBNBAnQhCSATBEAgCSEEIAohAANAAkAgACgCACIGQYCAgPwHTw0AIAwgBkF/cyIFQf//A3Ei\
BksEQCADIAZBAnRqIgYgBigCAEEBajYCACAQIAVBEHYiBksEQCAUIAZBAnRqIgYgBigCAEEBajYCA\
AwCCyAGIBBB3InAABAxAAsgBiAMQcyJwAAQMQALIABBBGohACAEQQRrIgQNAAsLAkAgDEUEQEEAIQ\
QMAQsgDEEBa0H/////A3EiAEEBaiIEQQdxIQUCQCAAQQdJBEBBACEEIAMhAAwBCyAEQfj///8HcSE\
GQQAhBCADIQADQCAAKAIAIQcgACAENgIAIABBBGoiESgCACESIBEgBCAHaiIENgIAIABBCGoiBygC\
ACERIAcgBCASaiIENgIAIABBDGoiBygCACESIAcgBCARaiIENgIAIABBEGoiBygCACERIAcgBCASa\
iIENgIAIABBFGoiBygCACESIAcgBCARaiIENgIAIABBGGoiBygCACERIAcgBCASaiIENgIAIABBHG\
oiBygCACESIAcgBCARaiIENgIAIAQgEmohBCAAQSBqIQAgBkEIayIGDQALCyAFRQ0AA0AgACgCACE\
GIAAgBDYCACAAQQRqIQAgBCAGaiEEIAVBAWsiBQ0ACwsgDiAENgIEIBMEQCAJIApqIREgCkEEaiEG\
IBNBAWtB/////wNxQQFqIRIgCygCNCEXIAsoAjghB0EAIQUgCiEJA0AgBiEAAkAgCSgCACIJQYCAg\
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\
3I2AgQgByAHKAIEQQFyNgIEIAEgAxAaDAkLQciZwAAoAgAgBGoiBCABSw0HCyADEBEiAUUNASADQX\
xBeCAFKAIAIgJBA3EbIAJBeHFqIgIgAiADSxsiAgRAIAEgACAC/AoAAAsgABAVIAEMCAsgAyABIAE\
gA0sbIgIEQCAIIAAgAvwKAAALIAUoAgAiAkF4cSIDIAFBBEEIIAJBA3EiAhtqSQ0DIAJBACADIAlL\
Gw0EIAAQFQsgCAwGC0HQi8AAQYCMwAAQOgALQZCMwABBwIzAABA6AAtB0IvAAEGAjMAAEDoAC0GQj\
MAAQcCMwAAQOgALIAUgASAGQQFxckECcjYCACABIAJqIgIgBCABayIBQQFyNgIEQciZwAAgATYCAE\
HQmcAAIAI2AgAgAAwBCyAACwsWACAAKAIAIAEgAiAAKAIEKAIMEQIAC4UCAQN/QfCVwAAoAgBFBEA\
CQAJAAn8CQCAARQ0AIAAoAgAgAEEANgIAQQFxRQ0AIAAoAhAhAiAAKAIMIQEgACgCCCEDIAAoAgQM\
AQsCQEGAgMAAEBEiAEUNACAAQQRrLQAAQQNxRQ0AIABBAEGAgMAA/AsACyAAIgFFDQFBgIAQIQJBg\
IAQIQNBAAshAEGAlsAAIAI2AgBB9JXAACAANgIAQfyVwAAoAgAhAkH8lcAAIAE2AgBB+JXAACgCAC\
EAQfiVwAAgAzYCAEHwlcAAKAIAQfCVwABBATYCAEUgAEVyRQRAIAIgAEECdBBgCwwBC0EEQYCAwAB\
B+IXAABBMAAsLQfSVwAALxAQBEX9BrJXAACgCAEUEQAJAIAAEQCAAKAJAIQEgACgCPCECIAAoAjgh\
AyAAKAI0IQQgACgCMCEFIAAoAiwhBiAAKAIoIQcgACgCJCEIIAAoAiAhCSAAKAIcIQogACgCGCELI\
AAoAhQhDCAAKAIQIQ0gACgCDCEOIAAoAgghDyAAKAIEIRAgACgCACAAQQA2AgBBAXENAQtBBCECQQ\
AhAUEAIQNBACEEQQQhBUEAIQZBACEHQQQhCEEAIQlBACEKQQQhC0EAIQxBACENQQQhDkEAIQ9BACE\
QC0HslcAAIAE2AgBB4JXAACAENgIAQdSVwAAgBzYCAEHIlcAAIAo2AgBBvJXAACANNgIAQbCVwAAg\
EDYCAEHolcAAKAIAIQdB6JXAACACNgIAQeSVwAAoAgAhAEHklcAAIAM2AgBB3JXAACgCACEKQdyVw\
AAgBTYCAEHYlcAAKAIAIQFB2JXAACAGNgIAQdCVwAAoAgAhBUHQlcAAIAg2AgBBzJXAACgCACECQc\
yVwAAgCTYCAEHElcAAKAIAIQZBxJXAACALNgIAQcCVwAAoAgAhA0HAlcAAIAw2AgBBuJXAACgCACE\
IQbiVwAAgDjYCAEG0lcAAKAIAIQRBtJXAACAPNgIAQayVwAAoAgAhCUGslcAAQQE2AgACQCAJRQ0A\
IAQEQCAIIARBAnQQYAsgAwRAIAYgA0ECdBBgCyACBEAgBSACQQJ0EGALIAEEQCAKIAFBAnQQYAsgA\
EUNACAHIABBAnQQYAsLQbCVwAAL8gIBCX9BgJXAACgCAEUEQAJ/AkAgAEUNACAAKAIAIABBADYCAE\
EBcUUNACAAKAIoIQEgACgCJCEHIAAoAiAhAiAAKAIcIQMgACgCGCEIIAAoAhQhBCAAKAIQIQUgACg\
CDCEJIAAoAgghBiAAKAIEDAELQQIhCUEEIQdBACEBQQQhCEEACyEAQaiVwAAgATYCAEGclcAAIAM2\
AgBBkJXAACAFNgIAQYSVwAAgADYCAEGklcAAKAIAIQVBpJXAACAHNgIAQaCVwAAoAgAhAEGglcAAI\
AI2AgBBmJXAACgCACEBQZiVwAAgCDYCAEGUlcAAKAIAIQJBlJXAACAENgIAQYyVwAAoAgAhBEGMlc\
AAIAk2AgBBiJXAACgCACEDQYiVwAAgBjYCAEGAlcAAKAIAIQZBgJXAAEEBNgIAAkAgBkUNACADBEA\
gBCADQQF0EGALIAIEQCABIAJBAnQQYAsgAEUNACAFIABBAnQQYAsLQYSVwAALFAAgACgCACABIAAo\
AgQoAgwRAAALFAIBbwF/EA8hABAdIgEgACYBIAELEAAgASAAKAIEIAAoAggQFgsZAAJ/IAFBCU8EQ\
CABIAAQHAwBCyAAEBELCyAAIABC356dmJy3lrgCNwMIIABCoe2sjPn0nLgHNwMACyIAIABC7bqtts\
2F1PXjADcDCCAAQviCmb2V7sbFuX83AwALEwAgAEGAjsAANgIEIAAgATYCAAsQACABIAAoAgAgACg\
CBBBRCxAAIAEgACgCACAAKAIEEBYLEAAgASgCACABKAIEIAAQGAsOACAAJQEgASUBIAIQBgtbAQJ/\
AkACQCAAQQRrKAIAIgJBeHEiA0EEQQggAkEDcSICGyABak8EQCACQQAgAyABQSdqSxsNASAAEBUMA\
gtB0IvAAEGAjMAAEDoAC0GQjMAAQcCMwAAQOgALCx0BAW8gACgCACUBIAEgAhAMIQMQHSIAIAMmAS\
AAC2oBAX8jAEEwayIDJAAgAyABNgIEIAMgADYCACADQQI2AgwgA0G0lMAANgIIIANCAjcCFCADIAN\
BBGqtQoCAgIDQAIQ3AyggAyADrUKAgICA0ACENwMgIAMgA0EgajYCECADQQhqIAIQPwALCQAgACAB\
EA4ACw0AIABBuIvAACABEBgLDAAgACABKQIANwMACw0AIABB0I7AACABEBgLDQAgAUHIjsAAQQUQU\
QsZACAAIAFBkJbAACgCACIAQRQgABsRAQAACw0AIAFBpJDAAEEYEBYLoAIBA38gACgCACEAIwBBkA\
FrIgMkAAJ/AkAgASgCCCICQYCAgBBxRQRAIAJBgICAIHENASADQQhqIAAoAgAgA0EQahAfIAFBAUE\
AIAMoAgggAygCDBAUDAILIAAoAgAhAkEAIQADQCAAIANqQY8BaiACQQ9xIgRBMHIgBEHXAGogBEEK\
SRs6AAAgAEEBayEAIAJBD0sgAkEEdiECDQALIAFBt5LAAEECIAAgA2pBkAFqQQAgAGsQFAwBCyAAK\
AIAIQJBACEAA0AgACADakGPAWogAkEPcSIEQTByIARBN2ogBEEKSRs6AAAgAEEBayEAIAJBD0sgAk\
EEdiECDQALIAFBt5LAAEECIAAgA2pBkAFqQQAgAGsQFAsgA0GQAWokAAsJACAAQQA2AgALCAAgACU\
BEAMLCAAgACUBEAcLC/UUAwBBgIDAAAuhD3NwYXJrLWludGVybmFsLXJzL3NyYy9yYXljYXN0LnJz\
AHNwYXJrLWludGVybmFsLXJzL3NyYy9zb3J0LnJzAGxpYnJhcnkvYWxsb2Mvc3JjL2ZtdC5ycwAva\
G9tZS9ydW5uZXIvLmNhcmdvL3JlZ2lzdHJ5L3NyYy9pbmRleC5jcmF0ZXMuaW8tMTk0OWNmOGM2Yj\
ViNTU3Zi93YXNtLWJpbmRnZW4tMC4yLjEwMC9zcmMvY29udmVydC9zbGljZXMucnMAL3J1c3RjLzI\
5NDgzODgzZWVkNjlkNWZiNGRiMDE5NjRjZGYyYWY0ZDg2ZTljYjIvbGlicmFyeS9zdGQvc3JjL3Ro\
cmVhZC9sb2NhbC5ycwBsaWJyYXJ5L2FsbG9jL3NyYy9zdHJpbmcucnMAL3J1c3RjLzI5NDgzODgzZ\
WVkNjlkNWZiNGRiMDE5NjRjZGYyYWY0ZDg2ZTljYjIvbGlicmFyeS9hbGxvYy9zcmMvc2xpY2Uucn\
MAL3J1c3RjLzI5NDgzODgzZWVkNjlkNWZiNGRiMDE5NjRjZGYyYWY0ZDg2ZTljYjIvbGlicmFyeS9\
hbGxvYy9zcmMvcmF3X3ZlYy9tb2QucnMAL3J1c3QvZGVwcy9kbG1hbGxvYy0wLjIuOS9zcmMvZGxt\
YWxsb2MucnMAbGlicmFyeS9zdGQvc3JjL2FsbG9jLnJzAHNwYXJrLWludGVybmFsLXJzL3NyYy9sa\
WIucnMAL2hvbWUvcnVubmVyLy5jYXJnby9yZWdpc3RyeS9zcmMvaW5kZXguY3JhdGVzLmlvLTE5ND\
ljZjhjNmI1YjU1N2YvanMtc3lzLTAuMy43Ny9zcmMvbGliLnJzAC9ob21lL3J1bm5lci8uY2FyZ28\
vcmVnaXN0cnkvc3JjL2luZGV4LmNyYXRlcy5pby0xOTQ5Y2Y4YzZiNWI1NTdmL29uY2VfY2VsbC0x\
LjIxLjMvc3JjL2xpYi5ycwAAAHwBEABRAAAALgIAABEAAAAQAhAAHQAAABEAAAA9AAAAAQAAAAIAA\
AADAAAAxQAQAFAAAAAZAQAAGQAAAMUAEABQAAAAGAIAACYAAAAxARAASwAAAMEBAAAdAAAAAAAQAC\
EAAAAqAAAAFwAAAAAAEAAhAAAAeAAAABcAAAAAABAAIQAAAH4AAAAcAAAAAAAQACEAAACAAAAAHAA\
AAAAAEAAhAAAAhQAAACAAAAAQAhAAHQAAAB0AAAAzAAAAEAIQAB0AAAAoAAAALQAAAAEAAAAAAAAA\
EAIQAB0AAAA6AAAAMwAAABACEAAdAAAARQAAAC0AAAAQAhAAHQAAAF4AAAAoAAAAIQAQAB4AAAAbA\
AAAHQAAAEV4cGVjdGVkICBhY3RpdmUgc3BsYXRzIGJ1dCBnb3Qg/AMQAAkAAAAFBBAAFwAAACEAEA\
AeAAAAMwAAAB0AAAAhABAAHgAAADMAAAAVAAAAIQAQAB4AAAAkAAAAFAAAACEAEAAeAAAAdAAAABk\
AAAAhABAAHgAAAKcAAAATAAAAIQAQAB4AAACfAAAAEwAAACEAEAAeAAAAogAAAB0AAAAhABAAHgAA\
AKIAAAARAAAAIQAQAB4AAACQAAAAIAAAACEAEAAeAAAAkAAAABQAAAAhABAAHgAAAHwAAAAYAAAAI\
QAQAB4AAAB9AAAAGAAAAC0CEABbAAAA+xgAAAEAAABYABAAbQAAACQBAAAOAAAAY2xvc3VyZSBpbn\
Zva2VkIHJlY3Vyc2l2ZWx5IG9yIGFmdGVyIGJlaW5nIGRyb3BwZWRMYXp5IGluc3RhbmNlIGhhcyB\
wcmV2aW91c2x5IGJlZW4gcG9pc29uZWQ+BRAAKgAAAIgCEABeAAAACAMAABkAAAByZWVudHJhbnQg\
aW5pdAAAgAUQAA4AAACIAhAAXgAAAHoCAAANAAAAfAEQAFEAAAAuAgAAEQAAABUAAAAMAAAABAAAA\
BYAAAAXAAAAGAAAAGFzc2VydGlvbiBmYWlsZWQ6IHBzaXplID49IHNpemUgKyBtaW5fb3ZlcmhlYW\
QAAM0BEAAqAAAAsAQAAAkAAABhc3NlcnRpb24gZmFpbGVkOiBwc2l6ZSA8PSBzaXplICsgbWF4X29\
2ZXJoZWFkAADNARAAKgAAALYEAAANAAAAQWNjZXNzRXJyb3JjYW5ub3QgYWNjZXNzIGEgVGhyZWFk\
IExvY2FsIFN0b3JhZ2UgdmFsdWUgZHVyaW5nIG9yIGFmdGVyIGRlc3RydWN0aW9uOiAAWwYQAEgAA\
ABtZW1vcnkgYWxsb2NhdGlvbiBvZiAgYnl0ZXMgZmFpbGVkAACsBhAAFQAAAMEGEAANAAAA9wEQAB\
kAAABkAQAACQAAABUAAAAMAAAABAAAABkAAAAAAAAACAAAAAQAAAAaAAAAAAAAAAgAAAAEAAAAGwA\
AABwAAAAdAAAAHgAAAB8AAAAQAAAABAAAACAAAAAhAAAAIgAAACMAAABFcnJvcgAAACQAAAAMAAAA\
BAAAACUAAAAmAAAAJwAAAGNhcGFjaXR5IG92ZXJmbG93AAAAaAcQABEAAACsARAAIQAAAC4CAAARA\
AAAFQEQABwAAADoAQAAFwBBrI/AAAu4BQEAAAAoAAAAYSBmb3JtYXR0aW5nIHRyYWl0IGltcGxlbW\
VudGF0aW9uIHJldHVybmVkIGFuIGVycm9yIHdoZW4gdGhlIHVuZGVybHlpbmcgc3RyZWFtIGRpZCB\
ub3QAAD8AEAAZAAAAigIAAA4AAAABAAAAAAAAAFJlZkNlbGwgYWxyZWFkeSBib3Jyb3dlZGluZGV4\
IG91dCBvZiBib3VuZHM6IHRoZSBsZW4gaXMgIGJ1dCB0aGUgaW5kZXggaXMgAAA8CBAAIAAAAFwIE\
AASAAAAAAAAAAQAAAAEAAAALQAAAD09IT1tYXRjaGVzYXNzZXJ0aW9uIGBsZWZ0ICByaWdodGAgZm\
FpbGVkCiAgbGVmdDogCiByaWdodDogAJsIEAAQAAAAqwgQABcAAADCCBAACQAAACByaWdodGAgZmF\
pbGVkOiAKICBsZWZ0OiAAAACbCBAAEAAAAOQIEAAQAAAA9AgQAAkAAADCCBAACQAAADogAAABAAAA\
AAAAACAJEAACAAAAfSB9MHgwMDAxMDIwMzA0MDUwNjA3MDgwOTEwMTExMjEzMTQxNTE2MTcxODE5M\
jAyMTIyMjMyNDI1MjYyNzI4MjkzMDMxMzIzMzM0MzUzNjM3MzgzOTQwNDE0MjQzNDQ0NTQ2NDc0OD\
Q5NTA1MTUyNTM1NDU1NTY1NzU4NTk2MDYxNjI2MzY0NjU2NjY3Njg2OTcwNzE3MjczNzQ3NTc2Nzc\
3ODc5ODA4MTgyODM4NDg1ODY4Nzg4ODk5MDkxOTI5Mzk0OTU5Njk3OTg5OSBvdXQgb2YgcmFuZ2Ug\
Zm9yIHNsaWNlIG9mIGxlbmd0aCByYW5nZSBlbmQgaW5kZXggACMKEAAQAAAAAQoQACIAAACQCBAAk\
ggQAJQIEAACAAAAAgAAAAcAAAAAAAA/AAAAvwBB/JTAAAsBEgB8CXByb2R1Y2VycwIIbGFuZ3VhZ2\
UBBFJ1c3QADHByb2Nlc3NlZC1ieQMFcnVzdGMdMS44OS4wICgyOTQ4Mzg4M2UgMjAyNS0wOC0wNCk\
Gd2FscnVzBjAuMjMuMwx3YXNtLWJpbmRnZW4TMC4yLjEwMCAoMjQwNWVjMmI0KQBrD3RhcmdldF9m\
ZWF0dXJlcwYrD211dGFibGUtZ2xvYmFscysTbm9udHJhcHBpbmctZnB0b2ludCsLYnVsay1tZW1vc\
nkrCHNpZ24tZXh0Kw9yZWZlcmVuY2UtdHlwZXMrCm11bHRpdmFsdWU=\"));const \
t=function(){const n={wbg:{}};return \
n.wbg.__wbg_buffer_609cc3eee51ed158=function(n){return \
n.buffer},n.wbg.__wbg_length_3b4f022188ae8db6=function(n){return \
n.length},n.wbg.__wbg_length_6ca527665d89694d=function(n){return \
n.length},n.wbg.__wbg_length_8cfd2c6409af88ad=function(n){return \
n.length},n.wbg.__wbg_new_9fee97a409b32b68=function(n){return new \
Uint16Array(n)},n.wbg.__wbg_new_e3b321dcfef89fc7=function(n){return new \
Uint32Array(n)},n.wbg.__wbg_newwithbyteoffsetandlength_e6b7e69acd4c7354=funct\
ion(n,t,e){return new \
Float32Array(n,t>>>0,e>>>0)},n.wbg.__wbg_newwithbyteoffsetandlength_f1dead44d\
1fc7212=function(n,t,e){return new \
Uint32Array(n,t>>>0,e>>>0)},n.wbg.__wbg_newwithlength_5a5efe313cfd59f1=functi\
on(n){return new \
Float32Array(n>>>0)},n.wbg.__wbg_set_10bad9bee0e9c58b=function(n,t,e){n.set(t\
,e>>>0)},n.wbg.__wbg_set_d23661d19148b229=function(n,t,e){n.set(t,e>>>0)},n.w\
bg.__wbg_set_f4f1f0daa30696fc=function(n,t,e){n.set(t,e>>>0)},n.wbg.__wbg_sub\
array_3aaeec89bb2544f0=function(n,t,e){return \
n.subarray(t>>>0,e>>>0)},n.wbg.__wbg_subarray_769e1e0f81bb259b=function(n,t,e\
){return \
n.subarray(t>>>0,e>>>0)},n.wbg.__wbindgen_init_externref_table=function(){con\
st n=W.__wbindgen_export_0,t=n.grow(4);n.set(0,void 0),n.set(t+0,void \
0),n.set(t+1,null),n.set(t+2,!0),n.set(t+3,!1)},n.wbg.__wbindgen_memory=funct\
ion(){return W.memory},n.wbg.__wbindgen_throw=function(n,t){throw new \
Error(en(n,t))},n}();(\"string\"==typeof n||\"function\"==typeof Request&&n \
instanceof Request||\"function\"==typeof URL&&n instanceof \
URL)&&(n=fetch(n));const{instance:e,module:A}=await async \
function(n,t){if(\"function\"==typeof Response&&n instanceof \
Response){if(\"function\"==typeof WebAssembly.instantiateStreaming)try{return \
await \
WebAssembly.instantiateStreaming(n,t)}catch(t){if(\"application/wasm\"==n.hea\
ders.get(\"Content-Type\"))throw \
t;console.warn(\"`WebAssembly.instantiateStreaming` failed because your \
server does not serve Wasm with `application/wasm` MIME type. Falling back to \
`WebAssembly.instantiate` which is slower. Original error:\\n\",t)}const \
e=await n.arrayBuffer();return await WebAssembly.instantiate(e,t)}{const \
e=await WebAssembly.instantiate(n,t);return e instanceof \
WebAssembly.Instance?{instance:e,module:n}:e}}(await n,t);return \
function(n,t){return \
W=n.exports,An.__wbindgen_wasm_module=t,tn=null,W.__wbindgen_start(),W}(e,A)}\
const \
sn=-12,an=Math.exp(sn),rn=Math.exp(9),on=Math.exp(-30),cn=2048,ln=2048,un=1,g\
n=cn-1,hn=ln-1;Symbol.toStringTag;function \
pn(n){return\"bool\"===n||\"bvec2\"===n||\"bvec3\"===n||\"bvec4\"===n}functio\
n In(n){return\"int\"===n||\"uint\"===n||\"float\"===n}function \
dn(n){return\"int\"===n||\"ivec2\"===n||\"ivec3\"===n||\"ivec4\"===n}function \
Cn(n){return\"uint\"===n||\"uvec2\"===n||\"uvec3\"===n||\"uvec4\"===n}functio\
n \
Bn(n){return\"float\"===n||\"vec2\"===n||\"vec3\"===n||\"vec4\"===n}function \
fn(n){return\"mat2\"===n||\"mat2x2\"===n||\"mat2x3\"===n||\"mat2x4\"===n||\"m\
at3\"===n||\"mat3x2\"===n||\"mat3x3\"===n||\"mat3x4\"===n||\"mat4\"===n||\"ma\
t4x2\"===n||\"mat4x3\"===n||\"mat4x4\"===n}function En(n){return \
Bn(n)||fn(n)}function \
mn(n){return\"vec2\"===n||\"ivec2\"===n||\"uvec2\"===n}function \
Qn(n){return\"vec3\"===n||\"ivec3\"===n||\"uvec3\"===n}function \
yn(n){return\"vec4\"===n||\"ivec4\"===n||\"uvec4\"===n}function \
xn(n){return\"mat2\"===n||\"mat2x2\"===n}function \
wn(n){return\"mat3\"===n||\"mat3x3\"===n}function \
bn(n){return\"mat4\"===n||\"mat4x4\"===n}function \
vn(n){switch(n){case\"vec2\":case\"vec3\":case\"vec4\":return\"float\";case\"\
ivec2\":case\"ivec3\":case\"ivec4\":return\"int\";case\"uvec2\":case\"uvec3\"\
:case\"uvec4\":return\"uint\";default:throw new Error(`Invalid vector type: \
${n}`)}}function \
Sn(n){switch(n){case\"vec2\":case\"ivec2\":case\"uvec2\":return \
2;case\"vec3\":case\"ivec3\":case\"uvec3\":return \
3;case\"vec4\":case\"ivec4\":case\"uvec4\":return 4;default:throw new \
Error(`Invalid vector type: ${n}`)}}function \
Dn(n){if(In(n))return\"uint\";if(mn(n))return\"uvec2\";if(Qn(n))return\"uvec3\
\";if(yn(n))return\"uvec4\";throw new Error(`Invalid vector type: \
${n}`)}function Mn(n){if(\"string\"==typeof n)return n;if(\"object\"==typeof \
n&&n.type)return n.type;throw new Error(`Invalid DynoType: \
${String(n)}`)}function kn(n){return Math.trunc(n).toString()}function \
_n(n){return`${Math.max(0,Math.trunc(n)).toString()}u`}function Tn(n){return \
n===Number.POSITIVE_INFINITY?\"INFINITY\":n===Number.NEGATIVE_INFINITY?\"-INF\
INITY\":Number.isInteger(n)?n.toFixed(1):n.toString()}function Fn(n){if(n \
instanceof Nn)return n.type;return n.dynoOut().type}class \
Nn{constructor(n){this.__isDynoValue=!0,this.type=n}}class Rn extends \
Nn{constructor(n,t){super(n.outTypes[t]),this.dyno=n,this.key=t}}class Gn \
extends Nn{constructor(n,t){super(n),this.literal=t}getLiteral(){return \
this.literal}}function Un(n,t){return new Gn(n,t)}class Yn extends \
Gn{constructor(n,t){super(n,\"\"),this.value=t}getLiteral(){const{type:t,valu\
e:e}=this;switch(t){case\"bool\":return \
e?\"true\":\"false\";case\"uint\":return _n(e);case\"int\":return \
kn(e);case\"float\":return Tn(e);case\"bvec2\":{const \
n=e;return`bvec2(${n[0]}, ${n[1]})`}case\"uvec2\":{if(e instanceof \
n.Vector2)return`uvec2(${_n(e.x)}, ${_n(e.y)})`;const \
t=e;return`uvec2(${_n(t[0])}, ${_n(t[1])})`}case\"ivec2\":{if(e instanceof \
n.Vector2)return`ivec2(${kn(e.x)}, ${kn(e.y)})`;const \
t=e;return`ivec2(${kn(t[0])}, ${kn(t[1])})`}case\"vec2\":{if(e instanceof \
n.Vector2)return`vec2(${Tn(e.x)}, ${Tn(e.y)})`;const \
t=e;return`vec2(${Tn(t[0])}, ${Tn(t[1])})`}case\"bvec3\":{const \
n=e;return`bvec3(${n[0]}, ${n[1]}, ${n[2]})`}case\"uvec3\":{if(e instanceof \
n.Vector3)return`uvec3(${_n(e.x)}, ${_n(e.y)}, ${_n(e.z)})`;const \
t=e;return`uvec3(${_n(t[0])}, ${_n(t[1])}, ${_n(t[2])})`}case\"ivec3\":{if(e \
instanceof n.Vector3)return`ivec3(${kn(e.x)}, ${kn(e.y)}, ${kn(e.z)})`;const \
t=e;return`ivec3(${kn(t[0])}, ${kn(t[1])}, ${kn(t[2])})`}case\"vec3\":{if(e \
instanceof n.Vector3)return`vec3(${Tn(e.x)}, ${Tn(e.y)}, ${Tn(e.z)})`;const \
t=e;return`vec3(${Tn(t[0])}, ${Tn(t[1])}, ${Tn(t[2])})`}case\"bvec4\":{const \
n=e;return`bvec4(${n[0]}, ${n[1]}, ${n[2]}, ${n[3]})`}case\"uvec4\":{if(e \
instanceof n.Vector4)return`uvec4(${_n(e.x)}, ${_n(e.y)}, ${_n(e.z)}, \
${_n(e.w)})`;const t=e;return`uvec4(${_n(t[0])}, ${_n(t[1])}, ${_n(t[2])}, \
${_n(t[3])})`}case\"ivec4\":{if(e instanceof \
n.Vector4)return`ivec4(${kn(e.x)}, ${kn(e.y)}, ${kn(e.z)}, ${kn(e.w)})`;const \
t=e;return`ivec4(${kn(t[0])}, ${kn(t[1])}, ${kn(t[2])}, \
${kn(t[3])})`}case\"vec4\":{if(e instanceof n.Vector4)return`vec4(${Tn(e.x)}, \
${Tn(e.y)}, ${Tn(e.z)}, ${Tn(e.w)})`;if(e instanceof \
n.Quaternion)return`vec4(${Tn(e.x)}, ${Tn(e.y)}, ${Tn(e.z)}, \
${Tn(e.w)})`;const t=e;return`vec4(${Tn(t[0])}, ${Tn(t[1])}, ${Tn(t[2])}, \
${Tn(t[3])})`}case\"mat2\":case\"mat2x2\":{const A=e,s=A instanceof \
n.Matrix2?A.elements:e,a=new \
Array(4).fill(0).map(((n,t)=>Tn(s[t])));return`${t}(${a.join(\", \
\")})`}case\"mat2x3\":{const n=e,A=new \
Array(6).fill(0).map(((t,e)=>Tn(n[e])));return`${t}(${A.join(\", \
\")})`}case\"mat2x4\":{const n=e,A=new \
Array(8).fill(0).map(((t,e)=>Tn(n[e])));return`${t}(${A.join(\", \
\")})`}case\"mat3\":case\"mat3x3\":{const A=e,s=A instanceof \
n.Matrix3?A.elements:e,a=new \
Array(9).fill(0).map(((n,t)=>Tn(s[t])));return`${t}(${a.join(\", \
\")})`}case\"mat3x2\":{const n=e,A=new \
Array(6).fill(0).map(((t,e)=>Tn(n[e])));return`${t}(${A.join(\", \
\")})`}case\"mat3x4\":{const n=e,A=new \
Array(12).fill(0).map(((t,e)=>Tn(n[e])));return`${t}(${A.join(\", \
\")})`}case\"mat4\":case\"mat4x4\":{const A=e,s=A instanceof \
n.Matrix4?A.elements:e,a=new \
Array(16).fill(0).map(((n,t)=>Tn(s[t])));return`${t}(${a.join(\", \
\")})`}case\"mat4x2\":{const n=e,A=new \
Array(8).fill(0).map(((t,e)=>Tn(n[e])));return`${t}(${A.join(\", \
\")})`}case\"mat4x3\":{const n=e,A=new \
Array(12).fill(0).map(((t,e)=>Tn(n[e])));return`${t}(${A.join(\", \
\")})`}default:throw new Error(`Type not implemented: \
${String(t)}`)}}}function qn(n,t){return new Yn(n,t)}function zn(n){const \
t=String(n);if(pn(n))return`${t}(false)`;if(En(n))return`${t}(0.0)`;if(dn(n))\
return`${t}(0)`;if(Cn(n))return`${t}(0u)`;throw new Error(`Type not \
implemented: ${t}`)}const Ln=\"    \";class \
Jn{constructor({indent:n}={}){this.globals=new \
Set,this.statements=[],this.uniforms={},this.declares=new \
Set,this.updaters=[],this.sequence=0,this.indent=Ln,this.indent=n??Ln}nextSeq\
uence(){return this.sequence++}}class \
Hn{constructor({inTypes:n,outTypes:t,inputs:e,update:A,globals:s,statements:a\
,generate:r}){this.inTypes=n??{},this.outTypes=t??{},this.inputs=e??{},this.u\
pdate=A,this.globals=s,this.statements=a,this.generate=r??(({inputs:n,outputs\
:t,compile:e})=>{var A,s;return{globals:null==(A=this.globals)?void \
0:A.call(this,{inputs:n,outputs:t,compile:e}),statements:null==(s=this.statem\
ents)?void 0:s.call(this,{inputs:n,outputs:t,compile:e})}})}get \
outputs(){const n={};for(const t in this.outTypes)n[t]=new Rn(this,t);return \
n}apply(n){return \
Object.assign(this.inputs,n),this.outputs}compile({inputs:n,outputs:t,compile\
:e}){const A=[`// ${this.constructor.name}(${Object.values(n).join(\", \")}) \
=> (${Object.values(t).join(\", \")})`],s=[];for(const n in t){const \
A=t[n];A&&!e.declares.has(A)&&(e.declares.add(A),s.push(n))}const{globals:a,s\
tatements:r,uniforms:i}=this.generate({inputs:n,outputs:t,compile:e});for(con\
st n of a??[])e.globals.add(n);for(const n in \
i)e.uniforms[n]=i[n];this.update&&e.updaters.push(this.update);for(const n of \
s){const \
s=t[n];s&&(e.uniforms[s]||A.push(`${jn(s,this.outTypes[n])};`))}return(null==\
r?void \
0:r.length)&&(A.push(\"{\"),A.push(...r.map((n=>e.indent+n))),A.push(\"}\")),\
A}}class Kn extends \
Hn{constructor({inTypes:n,outTypes:t,inputs:e,update:A,globals:s,construct:a}\
){super({inTypes:n,outTypes:t,inputs:e,update:A,globals:s,generate:n=>this.ge\
nerateBlock(n)}),this.construct=a}generateBlock({inputs:n,outputs:t,compile:e\
}){var A,s;const a={},r={};for(const t in n)null!=n[t]&&(a[t]=new \
Gn(this.inTypes[t],n[t]));for(const n in t)null!=t[n]&&(r[n]=new \
Nn(this.outTypes[n]));const i={roots:[]},o=this.construct(a,r,i);for(const s \
of(null==(A=this.globals)?void \
0:A.call(this,{inputs:n,outputs:t,compile:e}))??[])e.globals.add(s);const \
c=[],l=new Map;function u(n,t,A){let \
s=l.get(n);if(!s){s={sequence:e.nextSequence(),outNames:new Map,newOuts:new \
Set},l.set(n,s);for(const t in n.inputs){let e=n.inputs[t];for(;e;){if(e \
instanceof Nn){e instanceof \
Rn&&u(e.dyno,e.key);break}e=e.dynoOut()}}c.push(n)}t&&(A||s.newOuts.add(t),s.\
outNames.set(t,A??`${t}_${s.sequence}`))}for(const n of \
i.roots)u(n);for(const n in r){let e=(null==o?void \
0:o[n])??r[n];for(;e;){if(e instanceof Nn){e instanceof \
Rn&&u(e.dyno,e.key,t[n]);break}e=e.dynoOut()}r[n]=e}const g=[];for(const n of \
c){const t={},A={};for(const e in n.inputs){let A=n.inputs[e];for(;A;){if(A \
instanceof Nn){if(A instanceof Gn)t[e]=A.getLiteral();else if(A instanceof \
Rn){const n=null==(s=l.get(A.dyno))?void 0:s.outNames.get(A.key);if(!n)throw \
new Error(`Source not found for \
${A.dyno.constructor.name}.${A.key}`);t[e]=n}break}A=A.dynoOut()}}const \
a=l.get(n)??{outNames:new Map};for(const[n,t]of \
a.outNames.entries())A[n]=t;const \
r=n.compile({inputs:t,outputs:A,compile:e});g.push(r)}const h=[];for(const n \
in t)r[n]instanceof Gn&&h.push(`${t[n]} = \
${r[n].getLiteral()};`);h.length>0&&g.push(h);return{statements:g.flatMap(((n\
,t)=>0===t?n:[\"\",...n]))}}}function \
Vn(n,t,e,{update:A,globals:s}={}){return new \
Kn({inTypes:n,outTypes:t,construct:e,update:A,globals:s})}function \
$n({inTypes:n,outTypes:t,inputs:e,update:A,globals:s,statements:a,generate:r}\
){return new \
Hn({inTypes:n,outTypes:t,inputs:e,update:A,globals:s,statements:a,generate:r}\
)}function jn(n,t,e){const A=\"string\"==typeof t?t:t.type;if(!A)throw new \
Error(`Invalid DynoType: ${String(t)}`);return`${A} \
${n}${null!=e?`[${e}]`:\"\"}`}function Zn(n){var t;let e=!1;const \
A=n.split(\"\\n\").map((n=>{const t=n.trimEnd();return \
e?t:t.length>0?(e=!0,t):null})).filter((n=>null!=n));for(;A.length>0&&0===A[A\
.length-1].length;)A.pop();if(0===A.length)return[];const \
s=null==(t=A[0].match(/^\\s*/))?void 0:t[0];if(!s)return A;const a=new \
RegExp(`^${s}`);return A.map((n=>n.replace(a,\"\")))}function Xn(n){return \
Zn(n).join(\"\\n\")}class On extends \
Hn{constructor({a:n,outKey:t,outTypeFunc:e}){super({inTypes:{a:Fn(n)},outType\
s:{[t]:e(Fn(n))},inputs:{a:n}}),this.outKey=t}dynoOut(){return new \
Rn(this,this.outKey)}}class Pn extends \
Hn{constructor({a:n,b:t,outKey:e,outTypeFunc:A}){super({inTypes:{a:Fn(n),b:Fn\
(t)},outTypes:{[e]:A(Fn(n),Fn(t))},inputs:{a:n,b:t}}),this.outKey=e}dynoOut()\
{return new Rn(this,this.outKey)}}class Wn extends \
Hn{constructor({a:n,b:t,c:e,outKey:A,outTypeFunc:s}){super({inTypes:{a:Fn(n),\
b:Fn(t),c:Fn(e)},outTypes:{[A]:s(Fn(n),Fn(t),Fn(e))},inputs:{a:n,b:t,c:e}}),t\
his.outKey=A}dynoOut(){return new Rn(this,this.outKey)}}const \
nt={type:\"Gsplat\"},tt={type:\"PackedSplats\"},et=(n,t)=>new \
gt({packedSplats:n,index:t}),At=(n,t,e,A)=>new \
ht({packedSplats:n,index:t,base:e,count:A}),st=n=>new \
pt({gsplat:n}),at=({gsplat:n,flags:t,index:e,center:A,scales:s,quaternion:a,r\
gba:r,rgb:i,opacity:o,x:c,y:l,z:u,r:g,g:h,b:p})=>new \
It({gsplat:n,flags:t,index:e,center:A,scales:s,quaternion:a,rgba:r,rgb:i,opac\
ity:o,x:c,y:l,z:u,r:g,g:h,b:p}),rt=n=>new \
Ct({gsplat:n}),it=(n,{scale:t,rotate:e,translate:A,recolor:s})=>new \
Bt({gsplat:n,scale:t,rotate:e,translate:A,recolor:s}),ot=Xn(\"\\n  struct \
Gsplat {\\n    vec3 center;\\n    uint flags;\\n    vec3 scales;\\n    int \
index;\\n    vec4 quaternion;\\n    vec4 rgba;\\n  };\\n  const uint \
GSPLAT_FLAG_ACTIVE = 1u << 0u;\\n\\n  bool isGsplatActive(uint flags) {\\n    \
return (flags & GSPLAT_FLAG_ACTIVE) != 0u;\\n  }\\n\"),ct=Xn(\"\\n  struct \
PackedSplats {\\n    usampler2DArray texture;\\n    int numSplats;\\n    vec4 \
rgbMinMaxLnScaleMinMax;\\n  };\\n\");class lt extends \
On{constructor({packedSplats:n}){super({a:n,outKey:\"numSplats\",outTypeFunc:\
()=>\"int\"}),this.statements=({inputs:n,outputs:t})=>[`${t.numSplats} = \
${n.a}.numSplats;`]}}const ut=Xn(\"\\n  bool readPackedSplat(usampler2DArray \
texture, int numSplats, vec4 rgbMinMaxLnScaleMinMax, int index, out Gsplat \
gsplat) {\\n    if ((index >= 0) && (index < numSplats)) {\\n      uvec4 \
packed = texelFetch(texture, splatTexCoord(index), 0);\\n      \
unpackSplatEncoding(packed, gsplat.center, gsplat.scales, gsplat.quaternion, \
gsplat.rgba, rgbMinMaxLnScaleMinMax);\\n      return true;\\n    } else {\\n  \
    return false;\\n    }\\n  }\\n\");class gt extends \
Hn{constructor({packedSplats:n,index:t}){super({inTypes:{packedSplats:tt,inde\
x:\"int\"},outTypes:{gsplat:nt},inputs:{packedSplats:n,index:t},globals:()=>[\
ot,ct,ut],statements:({inputs:n,outputs:t})=>{const{gsplat:e}=t;if(!e)return[\
];const{packedSplats:A,index:s}=n;let a;return a=A&&s?Zn(`\\n            if \
(readPackedSplat(${A}.texture, ${A}.numSplats, ${A}.rgbMinMaxLnScaleMinMax, \
${s}, ${e})) {\\n              bool zeroSize = all(equal(${e}.scales, \
vec3(0.0, 0.0, 0.0)));\\n              ${e}.flags = zeroSize ? 0u : \
GSPLAT_FLAG_ACTIVE;\\n            } else {\\n              ${e}.flags = \
0u;\\n            }\\n          `):[`${e}.flags = 0u;`],a.push(`${e}.index = \
${s??\"0\"};`),a}})}dynoOut(){return new Rn(this,\"gsplat\")}}class ht \
extends \
Hn{constructor({packedSplats:n,index:t,base:e,count:A}){super({inTypes:{packe\
dSplats:tt,index:\"int\",base:\"int\",count:\"int\"},outTypes:{gsplat:nt},inp\
uts:{packedSplats:n,index:t,base:e,count:A},globals:()=>[ot,ct,ut],statements\
:({inputs:n,outputs:t})=>{const{gsplat:e}=t;if(!e)return[];const{packedSplats\
:A,index:s,base:a,count:r}=n;let i;return i=A&&s&&a&&r?Zn(`\\n            \
${e}.flags = 0u;\\n            if ((${s} >= ${a}) && (${s} < (${a} + ${r}))) \
{\\n              if (readPackedSplat(${A}.texture, ${A}.numSplats, \
${A}.rgbMinMaxLnScaleMinMax, ${s}, ${e})) {\\n                bool zeroSize = \
all(equal(${e}.scales, vec3(0.0, 0.0, 0.0)));\\n                ${e}.flags = \
zeroSize ? 0u : GSPLAT_FLAG_ACTIVE;\\n              }\\n            }\\n      \
    `):[`${e}.flags = 0u;`],i.push(`${e}.index = \
${s??\"0\"};`),i}})}dynoOut(){return new Rn(this,\"gsplat\")}}class pt \
extends \
Hn{constructor({gsplat:n}){super({inTypes:{gsplat:nt},outTypes:{flags:\"uint\
\",active:\"bool\",index:\"int\",center:\"vec3\",scales:\"vec3\",quaternion:\
\"vec4\",rgba:\"vec4\",rgb:\"vec3\",opacity:\"float\",x:\"float\",y:\"float\"\
,z:\"float\",r:\"float\",g:\"float\",b:\"float\"},inputs:{gsplat:n},globals:(\
)=>[ot],statements:({inputs:n,outputs:t})=>{const{gsplat:e}=n,{flags:A,active\
:s,index:a,center:r,scales:i,quaternion:o,rgba:c,rgb:l,opacity:u,x:g,y:h,z:p,\
r:I,g:d,b:C}=t;return[A?`${A} = ${e?`${e}.flags`:\"0u\"};`:null,s?`${s} = \
isGsplatActive(${e?`${e}.flags`:\"0u\"});`:null,a?`${a} = \
${e?`${e}.index`:\"0\"};`:null,r?`${r} = ${e?`${e}.center`:\"vec3(0.0, 0.0, \
0.0)\"};`:null,i?`${i} = ${e?`${e}.scales`:\"vec3(0.0, 0.0, \
0.0)\"};`:null,o?`${o} = ${e?`${e}.quaternion`:\"vec4(0.0, 0.0, 0.0, \
1.0)\"};`:null,c?`${c} = ${e?`${e}.rgba`:\"vec4(0.0, 0.0, 0.0, \
0.0)\"};`:null,l?`${l} = ${e?`${e}.rgba.rgb`:\"vec3(0.0, 0.0, \
0.0)\"};`:null,u?`${u} = ${e?`${e}.rgba.a`:\"0.0\"};`:null,g?`${g} = \
${e?`${e}.center.x`:\"0.0\"};`:null,h?`${h} = \
${e?`${e}.center.y`:\"0.0\"};`:null,p?`${p} = \
${e?`${e}.center.z`:\"0.0\"};`:null,I?`${I} = \
${e?`${e}.rgba.r`:\"0.0\"};`:null,d?`${d} = \
${e?`${e}.rgba.g`:\"0.0\"};`:null,C?`${C} = \
${e?`${e}.rgba.b`:\"0.0\"};`:null].filter(Boolean)}})}}class It extends \
Hn{constructor({gsplat:n,flags:t,index:e,center:A,scales:s,quaternion:a,rgba:\
r,rgb:i,opacity:o,x:c,y:l,z:u,r:g,g:h,b:p}){super({inTypes:{gsplat:nt,flags:\
\"uint\",index:\"int\",center:\"vec3\",scales:\"vec3\",quaternion:\"vec4\",rg\
ba:\"vec4\",rgb:\"vec3\",opacity:\"float\",x:\"float\",y:\"float\",z:\"float\
\",r:\"float\",g:\"float\",b:\"float\"},outTypes:{gsplat:nt},inputs:{gsplat:n\
,flags:t,index:e,center:A,scales:s,quaternion:a,rgba:r,rgb:i,opacity:o,x:c,y:\
l,z:u,r:g,g:h,b:p},globals:()=>[ot],statements:({inputs:n,outputs:t})=>{const\
{gsplat:e}=t;if(!e)return[];const{gsplat:A,flags:s,index:a,center:r,scales:i,\
quaternion:o,rgba:c,rgb:l,opacity:u,x:g,y:h,z:p,r:I,g:d,b:C}=n;return[`${e}.f\
lags = ${s??(A?`${A}.flags`:\"0u\")};`,`${e}.index = \
${a??(A?`${A}.index`:\"0\")};`,`${e}.center = \
${r??(A?`${A}.center`:\"vec3(0.0, 0.0, 0.0)\")};`,`${e}.scales = \
${i??(A?`${A}.scales`:\"vec3(0.0, 0.0, 0.0)\")};`,`${e}.quaternion = \
${o??(A?`${A}.quaternion`:\"vec4(0.0, 0.0, 0.0, 1.0)\")};`,`${e}.rgba = \
${c??(A?`${A}.rgba`:\"vec4(0.0, 0.0, 0.0, 0.0)\")};`,l?`${e}.rgba.rgb = \
${l};`:null,u?`${e}.rgba.a = ${u};`:null,g?`${e}.center.x = \
${g};`:null,h?`${e}.center.y = ${h};`:null,p?`${e}.center.z = \
${p};`:null,I?`${e}.rgba.r = ${I};`:null,d?`${e}.rgba.g = \
${d};`:null,C?`${e}.rgba.b = ${C};`:null].filter(Boolean)}})}dynoOut(){return \
new Rn(this,\"gsplat\")}}const dt=Xn(\"\\n  vec3 gsplatNormal(vec3 scales, \
vec4 quaternion) {\\n    float minScale = min(scales.x, min(scales.y, \
scales.z));\\n    vec3 normal;\\n    if (scales.z == minScale) {\\n      \
normal = vec3(0.0, 0.0, 1.0);\\n    } else if (scales.y == minScale) {\\n     \
 normal = vec3(0.0, 1.0, 0.0);\\n    } else {\\n      normal = vec3(1.0, 0.0, \
0.0);\\n    }\\n    return quatVec(quaternion, normal);\\n  }\\n\");class Ct \
extends \
On{constructor({gsplat:n}){super({a:n,outKey:\"normal\",outTypeFunc:()=>\"vec\
3\"}),this.globals=()=>[ot,dt],this.statements=({inputs:n,outputs:t})=>[`${t.\
normal} = gsplatNormal(${n.a}.scales, ${n.a}.quaternion);`]}}class Bt extends \
Hn{constructor({gsplat:n,scale:t,rotate:e,translate:A,recolor:s}){super({inTy\
pes:{gsplat:nt,scale:\"float\",rotate:\"vec4\",translate:\"vec3\",recolor:\"v\
ec4\"},outTypes:{gsplat:nt},inputs:{gsplat:n,scale:t,rotate:e,translate:A,rec\
olor:s},globals:()=>[ot],statements:({inputs:n,outputs:t,compile:e})=>{const{\
gsplat:A}=t;if(!A||!n.gsplat)return[];const{scale:s,rotate:a,translate:r,reco\
lor:i}=n,o=e.indent;return[`${A} = ${n.gsplat};`,`if \
(isGsplatActive(${A}.flags)) {`,s?`${o}${A}.center *= \
${s};`:null,a?`${o}${A}.center = quatVec(${a}, \
${A}.center);`:null,r?`${o}${A}.center += ${r};`:null,s?`${o}${A}.scales *= \
${s};`:null,a?`${o}${A}.quaternion = quatQuat(${a}, \
${A}.quaternion);`:null,i?`${o}${A}.rgba *= \
${i};`:null,\"}\"].filter(Boolean)}})}dynoOut(){return new \
Rn(this,\"gsplat\")}}const ft=(n,t)=>new \
Et({gsplat:n,rgbMinMaxLnScaleMinMax:t});class Et extends \
Hn{constructor({gsplat:n,rgbMinMaxLnScaleMinMax:t}){super({inTypes:{gsplat:nt\
,rgbMinMaxLnScaleMinMax:\"vec4\"},inputs:{gsplat:n,rgbMinMaxLnScaleMinMax:t},\
globals:()=>[ot],statements:({inputs:n,outputs:t})=>{const{output:e}=t;if(!e)\
return[];const{gsplat:A,rgbMinMaxLnScaleMinMax:s}=n;return A?Zn(`\\n          \
  if (isGsplatActive(${A}.flags)) {\\n              ${e} = \
packSplatEncoding(${A}.center, ${A}.scales, ${A}.quaternion, ${A}.rgba, \
${s});\\n            } else {\\n              ${e} = uvec4(0u, 0u, 0u, \
0u);\\n            }\\n          `):[`${e} = uvec4(0u, 0u, 0u, \
0u);`]}})}dynoOut(){return new Rn(this,\"output\")}}class mt extends \
Hn{constructor({rgba8:n}){super({inTypes:{rgba8:\"vec4\"},inputs:{rgba8:n},st\
atements:({inputs:n,outputs:t})=>[`target = ${n.rgba8??\"vec4(0.0, 0.0, 0.0, \
0.0)\"};`]})}dynoOut(){return new Rn(this,\"rgba8\")}}const Qt=(n=0,t)=>new \
St({key:t,value:n}),yt=(n,t)=>new Rt({key:t,value:n});class xt extends \
Hn{constructor({key:n,type:t,count:e,value:A,update:s,globals:a}){super({outT\
ypes:{[n=n??\"value\"]:t},update:()=>{if(s){const n=s(this.value);void \
0!==n&&(this.value=n)}this.uniform.value=this.value},generate:({inputs:A,outp\
uts:s})=>{const r=(null==a?void \
0:a({inputs:A,outputs:s}))??[],i={},o=s[n];return o&&(r.push(`uniform \
${jn(o,t,e)};`),i[o]=this.uniform),{globals:r,uniforms:i}}}),this.type=t,this\
.count=e,this.value=A,this.uniform={value:A},this.outKey=n}dynoOut(){return \
new Rn(this,this.outKey)}}class wt extends \
xt{constructor({key:n,value:t,update:e}){super({key:n,type:\"bool\",value:t,u\
pdate:e})}}class bt extends \
xt{constructor({key:n,value:t,update:e}){super({key:n,type:\"uint\",value:t,u\
pdate:e})}}class vt extends \
xt{constructor({key:n,value:t,update:e}){super({key:n,type:\"int\",value:t,up\
date:e})}}class St extends \
xt{constructor({key:n,value:t,update:e}){super({key:n,type:\"float\",value:t,\
update:e})}}class Dt extends \
xt{constructor({key:n,value:t,update:e}){super({key:n,type:\"bvec2\",value:t,\
update:e})}}class Mt extends \
xt{constructor({key:n,value:t,update:e}){super({key:n,type:\"uvec2\",value:t,\
update:e})}}class kt extends \
xt{constructor({key:n,value:t,update:e}){super({key:n,type:\"ivec2\",value:t,\
update:e})}}class _t extends \
xt{constructor({key:n,value:t,update:e}){super({key:n,type:\"vec2\",value:t,u\
pdate:e})}}class Tt extends \
xt{constructor({key:n,value:t,update:e}){super({key:n,type:\"bvec3\",value:t,\
update:e})}}class Ft extends \
xt{constructor({key:n,value:t,update:e}){super({key:n,type:\"uvec3\",value:t,\
update:e})}}class Nt extends \
xt{constructor({key:n,value:t,update:e}){super({key:n,type:\"ivec3\",value:t,\
update:e})}}class Rt extends \
xt{constructor({key:n,value:t,update:e}){super({key:n,type:\"vec3\",value:t,u\
pdate:e})}}class Gt extends \
xt{constructor({key:n,value:t,update:e}){super({key:n,type:\"bvec4\",value:t,\
update:e})}}class Ut extends \
xt{constructor({key:n,value:t,update:e}){super({key:n,type:\"uvec4\",value:t,\
update:e})}}class Yt extends \
xt{constructor({key:n,value:t,update:e}){super({key:n,type:\"ivec4\",value:t,\
update:e})}}class qt extends \
xt{constructor({key:n,value:t,update:e}){super({key:n,type:\"vec4\",value:t,u\
pdate:e})}}class zt extends \
xt{constructor({key:n,value:t,update:e}){super({key:n,type:\"mat2\",value:t,u\
pdate:e})}}class Lt extends \
xt{constructor({key:n,value:t,update:e}){super({key:n,type:\"mat2x2\",value:t\
,update:e})}}class Jt extends \
xt{constructor({key:n,value:t,update:e}){super({key:n,type:\"mat2x3\",value:t\
,update:e})}}class Ht extends \
xt{constructor({key:n,value:t,update:e}){super({key:n,type:\"mat2x4\",value:t\
,update:e})}}class Kt extends \
xt{constructor({key:n,value:t,update:e}){super({key:n,type:\"mat3\",value:t,u\
pdate:e})}}class Vt extends \
xt{constructor({key:n,value:t,update:e}){super({key:n,type:\"mat3x2\",value:t\
,update:e})}}class $t extends \
xt{constructor({key:n,value:t,update:e}){super({key:n,type:\"mat3x3\",value:t\
,update:e})}}class jt extends \
xt{constructor({key:n,value:t,update:e}){super({key:n,type:\"mat3x4\",value:t\
,update:e})}}class Zt extends \
xt{constructor({key:n,value:t,update:e}){super({key:n,type:\"mat4\",value:t,u\
pdate:e})}}class Xt extends \
xt{constructor({key:n,value:t,update:e}){super({key:n,type:\"mat4x2\",value:t\
,update:e})}}class Ot extends \
xt{constructor({key:n,value:t,update:e}){super({key:n,type:\"mat4x3\",value:t\
,update:e})}}class Pt extends \
xt{constructor({key:n,value:t,update:e}){super({key:n,type:\"mat4x4\",value:t\
,update:e})}}class Wt extends \
xt{constructor({key:n,value:t,update:e}){super({key:n,type:\"usampler2D\",val\
ue:t,update:e})}}class ne extends \
xt{constructor({key:n,value:t,update:e}){super({key:n,type:\"isampler2D\",val\
ue:t,update:e})}}class te extends \
xt{constructor({key:n,value:t,update:e}){super({key:n,type:\"sampler2D\",valu\
e:t,update:e})}}class ee extends \
xt{constructor({key:n,value:t,update:e}){super({key:n,type:\"usampler2DArray\
\",value:t,update:e})}}class Ae extends \
xt{constructor({key:n,value:t,update:e}){super({key:n,type:\"isampler2DArray\
\",value:t,update:e})}}class se extends \
xt{constructor({key:n,value:t,update:e}){super({key:n,type:\"sampler2DArray\"\
,value:t,update:e})}}class ae extends \
xt{constructor({key:n,value:t,update:e}){super({key:n,type:\"usampler3D\",val\
ue:t,update:e})}}class re extends \
xt{constructor({key:n,value:t,update:e}){super({key:n,type:\"isampler3D\",val\
ue:t,update:e})}}class ie extends \
xt{constructor({key:n,value:t,update:e}){super({key:n,type:\"sampler3D\",valu\
e:t,update:e})}}class oe extends \
xt{constructor({key:n,value:t,update:e}){super({key:n,type:\"usamplerCube\",v\
alue:t,update:e})}}class ce extends \
xt{constructor({key:n,value:t,update:e}){super({key:n,type:\"isamplerCube\",v\
alue:t,update:e})}}class le extends \
xt{constructor({key:n,value:t,update:e}){super({key:n,type:\"samplerCube\",va\
lue:t,update:e})}}class ue extends \
xt{constructor({key:n,value:t,update:e}){super({key:n,type:\"sampler2DShadow\
\",value:t,update:e})}}class ge extends \
xt{constructor({key:n,value:t,update:e}){super({key:n,type:\"sampler2DArraySh\
adow\",value:t,update:e})}}class he extends \
xt{constructor({key:n,value:t,update:e}){super({key:n,type:\"samplerCubeShado\
w\",value:t,update:e})}}const pe=new Float32Array(1),Ie=new \
Uint32Array(pe.buffer),de=\"Float16Array\"in globalThis,Ce=de?new \
globalThis.Float16Array(1):null,Be=new Uint16Array(null==Ce?void \
0:Ce.buffer);function fe(n){const \
t=Math.sqrt(n.reduce(((n,t)=>n+t*t),0));return n.map((n=>n/t))}const \
Ee=de?function(n){return Ce[0]=n,Be[0]}:function(n){pe[0]=n;const \
t=Ie[0],e=t>>23&255,A=8388607&t,s=(t>>31&1)<<15;if(255===e)return \
0!==A?32767|s:31744|s;const a=e-127+15;if(a>=31)return \
31744|s;if(a<=0){if(a<-10)return s;return s|(8388608|A)>>1-a+13}return \
s|a<<10|A>>13},me=de?function(n){return Be[0]=n,Ce[0]}:function(n){const \
t=n>>15&1,e=n>>10&31,A=1023&n;let s;if(0===e)if(0===A)s=t<<31;else{let \
n=A,e=-14;for(;0==(1024&n);)n<<=1,e--;n&=1023;s=t<<31|e+127<<23|n<<13}else \
if(31===e)s=0===A?t<<31|2139095040:t<<31|2143289344;else{s=t<<31|e-15+127<<23\
|A<<13}return Ie[0]=s,pe[0]};function Qe(n){return \
Math.max(0,Math.min(255,Math.round(255*n)))}function ye(n){return \
Math.max(-127,Math.min(127,Math.round(127*n)))}function xe(n){const \
t=[],e=new Set;return function n(A){A&&\"object\"==typeof \
A&&!e.has(A)&&(e.add(A),A instanceof \
ArrayBuffer?t.push(A):ArrayBuffer.isView(A)?t.push(A.buffer):Array.isArray(A)\
?A.forEach(n):Object.values(A).forEach(n))}(n),t}class \
we{constructor({allocate:n,dispose:t,valid:e}){this.items=[],this.allocate=n,\
this.dispose=t,this.valid=e}alloc(n){for(;;){const \
t=this.items.pop();if(!t)break;if(this.valid(t,n))return \
t;this.dispose&&this.dispose(t)}return \
this.allocate(n)}free(n){this.items.push(n)}disposeAll(){let \
n;for(n=this.items.pop();n;)this.dispose&&this.dispose(n),n=this.items.pop()}\
}function be(n,t,e,A,s,a,r,i,o,c,l,u,g,h,p,I,d){const C=(null==d?void \
0:d.rgbMin)??0,B=((null==d?void \
0:d.rgbMax)??1)-C,f=Qe((h-C)/B),E=Qe((p-C)/B),m=Qe((I-C)/B),Q=Qe(g),y=qe(ve.s\
et(o,c,l,u)),x=255&y,w=y>>>8&255,b=y>>>16&255,v=(null==d?void \
0:d.lnScaleMin)??sn,S=254/(((null==d?void \
0:d.lnScaleMax)??9)-v),D=a<on?0:Math.min(255,Math.max(1,Math.round((Math.log(\
a)-v)*S)+1)),M=r<on?0:Math.min(255,Math.max(1,Math.round((Math.log(r)-v)*S)+1\
)),k=i<on?0:Math.min(255,Math.max(1,Math.round((Math.log(i)-v)*S)+1)),_=Ee(e)\
,T=Ee(A),F=Ee(s),N=4*t;n[N]=f|E<<8|m<<16|Q<<24,n[N+1]=_|T<<16,n[N+2]=F|x<<16|\
w<<24,n[N+3]=D|M<<8|k<<16|b<<24}const ve=new n.Quaternion;const \
Se={center:new n.Vector3,scales:new n.Vector3,quaternion:new \
n.Quaternion,color:new n.Color,opacity:0};function De(n,t,e){const \
A=Se,s=4*t,a=n[s],r=n[s+1],i=n[s+2],o=n[s+3],c=(null==e?void \
0:e.rgbMin)??0,l=((null==e?void \
0:e.rgbMax)??1)-c;A.color.set(c+(255&a)/255*l,c+(a>>>8&255)/255*l,c+(a>>>16&2\
55)/255*l),A.opacity=(a>>>24&255)/255,A.center.set(me(65535&r),me(r>>>16&6553\
5),me(65535&i));const u=(null==e?void 0:e.lnScaleMin)??sn,g=(((null==e?void \
0:e.lnScaleMax)??9)-u)/254,h=255&o;A.scales.x=0===h?0:Math.exp(u+(h-1)*g);con\
st p=o>>>8&255;A.scales.y=0===p?0:Math.exp(u+(p-1)*g);const \
I=o>>>16&255;A.scales.z=0===I?0:Math.exp(u+(I-1)*g);return \
ze(i>>>16&65535|o>>>8&16711680,A.quaternion),A}function Me(n){const \
t=cn,e=Math.max(un,Math.min(ln,Math.ceil(n/t))),A=Math.ceil(n/(t*e));return{w\
idth:t,height:e,depth:A,maxSplats:t*e*A}}function ke(t){const e=new \
n.Clock(t.autoStart);return \
e.startTime=t.startTime,e.oldTime=t.oldTime,e.elapsedTime=t.elapsedTime,e.run\
ning=t.running,e}const _e=Xn(\"\\n  precision highp float;\\n\\n  in vec3 \
position;\\n\\n  void main() {\\n    gl_Position = vec4(position.xy, 0.0, \
1.0);\\n  }\\n\");function Te(t){const e=new n.Vector3;for(const n of \
t)e.add(n);return e.divideScalar(t.length)}function \
Fe(t){if(0===t.length)return new n.Quaternion;const e=t[0].clone();for(let \
n=1;n<t.length;n++)t[n].dot(t[0])<0?(e.x-=t[n].x,e.y-=t[n].y,e.z-=t[n].z,e.w-\
=t[n].w):(e.x+=t[n].x,e.y+=t[n].y,e.z+=t[n].z,e.w+=t[n].w);return \
e.normalize()}function Ne(t,e){const A=new \
n.Vector3(0,0,0).applyMatrix4(t),s=new n.Vector3(0,0,0).applyMatrix4(e),a=new \
n.Vector3(0,0,-1).applyMatrix4(t).sub(A).normalize(),r=new \
n.Vector3(0,0,-1).applyMatrix4(e).sub(s).normalize();return{distance:A.distan\
ceTo(s),coincidence:a.dot(r)}}function Re(t,e){const[A,s]=[new n.Vector3,new \
n.Quaternion],[a,r]=[new n.Vector3,new n.Quaternion];t.decompose(A,s,new \
n.Vector3),e.decompose(a,r,new \
n.Vector3);return{distance:A.distanceTo(a),coorient:Math.abs(s.dot(r))}}funct\
ion \
Ge({matrix1:n,matrix2:t,maxDistance:e,minCoorient:A}){const{distance:s,coorie\
nt:a}=Re(n,t);return s<=e&&(null==A||a>=A)}const Ue=new n.Quaternion,Ye=new \
n.Vector3;function qe(n){const \
t=Ue.copy(n).normalize();t.w<0&&t.set(-t.x,-t.y,-t.z,-t.w);const \
e=2*Math.acos(t.w),A=Math.sqrt(t.x*t.x+t.y*t.y+t.z*t.z),s=A<1e-6?Ye.set(1,0,0\
):Ye.set(t.x,t.y,t.z).divideScalar(A),a=Math.abs(s.x)+Math.abs(s.y)+Math.abs(\
s.z);let r=s.x/a,i=s.y/a;if(s.z<0){const \
n=r;r=(1-Math.abs(i))*(r>=0?1:-1),i=(1-Math.abs(n))*(i>=0?1:-1)}const \
o=.5*r+.5,c=.5*i+.5,l=Math.round(255*o),u=Math.round(255*c);return \
Math.round(e*(255/Math.PI))<<16|u<<8|l}function ze(n,t){const \
e=n>>>16&255;let A=2*((255&n)/255-.5),s=2*((n>>>8&255)/255-.5);const \
a=1-(Math.abs(A)+Math.abs(s)),r=Math.max(-a,0);A+=A>=0?-r:r,s+=s>=0?-r:r;cons\
t \
i=Ye.set(A,s,a).normalize(),o=.5*(e/255*Math.PI),c=Math.sin(o),l=Math.cos(o);\
return t.set(i.x*c,i.y*c,i.z*c,l),t}function Le(n,t,e,A){return \
255&Math.max(-127,Math.min(127,127*n))|(255&Math.max(-127,Math.min(127,127*t)\
))<<8|(255&Math.max(-127,Math.min(127,127*e)))<<16|(255&Math.max(-127,Math.mi\
n(127,127*A)))<<24}function Je(n,t){const e=[];let A=0,s=null;const a=new \
$(((n,a)=>{if(e.push(n),A+=n.length,a||A>=t){const n=new Uint8Array(A);let \
a=0;for(const t of e)n.set(t,a),a+=t.length;s=n.slice(0,t)}}));let \
r=0;for(;null==s&&r<n.length;){const \
t=n.slice(r,r+1024);a.push(t,!1),r+=1024}if(null==s&&(a.push(new \
Uint8Array,!0),null==s))throw new Error(\"Failed to decompress partial \
gzip\");return s}class \
He{constructor({fileBytes:n,chunkBytes:t=65536}){this.fileBytes=n,this.chunkB\
ytes=t,this.chunks=[],this.totalBytes=0;const e=new \
DecompressionStream(\"gzip\"),A=new \
Blob([n]).stream().pipeThrough(e);this.reader=A.getReader()}async \
read(n){for(;this.totalBytes<n;){const{value:n,done:t}=await \
this.reader.read();if(t)break;this.chunks.push(n),this.totalBytes+=n.length}i\
f(this.totalBytes<n)throw new Error(`Unexpected EOF: needed ${n}, got \
${this.totalBytes}`);const t=new Uint8Array(this.totalBytes);let \
e=0;for(const n of this.chunks)t.set(n,e),e+=n.length;const \
A=t.subarray(0,n);return \
this.chunks=[t.subarray(n)],this.totalBytes-=n,A}}Symbol.toStringTag;class \
Ke{constructor({graph:n,inputs:t,outputs:e,template:A}){this.graph=n,this.tem\
plate=A,this.inputs=t??{},this.outputs=e??{};const s=new \
Jn({indent:this.template.indent});for(const n in \
this.outputs)this.outputs[n]&&s.declares.add(this.outputs[n]);const \
a=n.compile({inputs:this.inputs,outputs:this.outputs,compile:s});this.shader=\
A.generate({globals:s.globals,statements:a}),this.uniforms=s.uniforms,this.up\
daters=s.updaters}prepareMaterial(){return function(t){let \
e=$e.get(t);if(e)return e;return e=new \
n.RawShaderMaterial({glslVersion:n.GLSL3,vertexShader:_e,fragmentShader:t.sha\
der,uniforms:t.uniforms}),$e.set(t,e),e}(this)}update(){for(const n of \
this.updaters)n()}}class Ve{constructor(n){const t=n.match(/^([ \
\\t]*)\\{\\{\\s*GLOBALS\\s*\\}\\}/m),e=n.match(/^([ \
\\t]*)\\{\\{\\s*STATEMENTS\\s*\\}\\}/m);if(!t||!e)throw new Error(\"Template \
must contain {{ GLOBALS }} and {{ STATEMENTS \
}}\");this.before=n.substring(0,t.index),this.between=n.substring(t.index+t[0\
].length,e.index),this.after=n.substring(e.index+e[0].length),this.indent=e[1\
]}generate({globals:n,statements:t}){return \
this.before+Array.from(n).join(\"\\n\\n\")+this.between+t.map((n=>this.indent\
+n)).join(\"\\n\")+this.after}}const $e=new Map;function \
je(n,t,e=\"add\"){const A=()=>{throw new Error(`Invalid ${e} types: ${n}, \
${t}`)};if(n===t)return n;if(\"int\"===n){if(dn(t))return \
t;A()}if(\"int\"===t){if(dn(n))return n;A()}if(\"uint\"===n){if(Cn(t))return \
t;A()}if(\"uint\"===t){if(Cn(n))return \
n;A()}if(\"float\"===n){if(En(t))return \
t;A()}if(\"float\"===t){if(En(n))return n;A()}throw new Error(`Invalid ${e} \
types: ${n}, ${t}`)}function Ze(n,t){return je(n,t,\"sub\")}function \
Xe(n,t){const e=()=>{throw new Error(`Invalid mul types: ${n}, \
${t}`)};if(\"int\"===n){if(dn(t))return t;e()}if(\"int\"===t){if(dn(n))return \
n;e()}if(\"uint\"===n){if(Cn(t))return t;e()}if(\"uint\"===t){if(Cn(n))return \
n;e()}if(\"float\"===n){if(En(t))return \
t;e()}if(\"float\"===t){if(En(n))return \
n;e()}if(dn(n)||Cn(n)||dn(t)||Cn(t)){if(n===t)return \
n;e()}if(\"vec2\"===n){if(\"vec2\"===t||xn(t))return\"vec2\";if(\"mat3x2\"===\
t)return\"vec3\";if(\"mat4x2\"===t)return\"vec4\";e()}if(\"vec3\"===n){if(\"m\
at2x3\"===t)return\"vec2\";if(\"vec3\"===t||wn(t))return\"vec3\";if(\"mat4x3\
\"===t)return\"vec4\";e()}if(\"vec4\"===n){if(\"mat2x4\"===t)return\"vec2\";i\
f(\"mat3x4\"===t)return\"vec3\";if(\"vec4\"===t||bn(t))return\"vec4\";e()}if(\
\"vec2\"===t){if(xn(n))return\"vec2\";if(\"mat2x3\"===n)return\"vec3\";if(\"m\
at2x4\"===n)return\"vec4\";e()}if(\"vec3\"===t){if(\"mat3x2\"===n)return\"vec\
2\";if(wn(n))return\"vec3\";if(\"mat3x4\"===n)return\"vec4\";e()}if(\"vec4\"=\
==t){if(\"mat4x2\"===n)return\"vec2\";if(\"mat4x3\"===n)return\"vec3\";if(bn(\
n))return\"vec4\";e()}if(xn(n)){if(xn(t))return\"mat2\";if(\"mat3x2\"===t)ret\
urn\"mat3x2\";if(\"mat4x2\"===t)return\"mat4x2\";e()}if(\"mat2x3\"===n){if(xn\
(t))return\"mat2x3\";if(\"mat3x2\"===t)return\"mat3\";if(\"mat4x2\"===t)retur\
n\"mat4x3\";e()}if(\"mat2x4\"===n){if(xn(t))return\"mat2x4\";if(\"mat3x2\"===\
t)return\"mat3x4\";if(\"mat4x2\"===t)return\"mat4\";e()}if(\"mat3x2\"===n){if\
(\"mat2x3\"===t)return\"mat2\";if(wn(t))return\"mat3x2\";if(\"mat4x3\"===t)re\
turn\"mat4x2\";e()}if(wn(n)){if(\"mat2x3\"===t)return\"mat2x3\";if(wn(t))retu\
rn\"mat3\";if(\"mat4x3\"===t)return\"mat4x3\";e()}if(\"mat3x4\"===n){if(\"mat\
2x3\"===t)return\"mat2x4\";if(wn(t))return\"mat3x4\";if(\"mat4x3\"===t)return\
\"mat4\";e()}if(\"mat4x2\"===n){if(\"mat2x4\"===t)return\"mat2\";if(\"mat3x4\
\"===t)return\"mat3x2\";if(bn(t))return\"mat4x2\";e()}if(\"mat4x3\"===n){if(\
\"mat2x4\"===t)return\"mat2x3\";if(\"mat3x4\"===t)return\"mat3\";if(bn(t))ret\
urn\"mat4x3\";e()}if(bn(n)){if(\"mat2x4\"===t)return\"mat2x4\";if(\"mat3x4\"=\
==t)return\"mat3x4\";if(bn(t))return\"mat4\";e()}throw new Error(`Invalid mul \
types: ${n}, ${t}`)}function Oe(n,t){return je(n,t,\"div\")}function \
Pe(n,t){if(n===t)return n;if(\"int\"===n){if(dn(t))return t}else \
if(\"int\"===t){if(dn(n))return n}else if(\"uint\"===n){if(Cn(t))return \
t}else if(\"uint\"===t&&Cn(n))return n;throw new Error(`Invalid imod types: \
${n}, ${t}`)}function We(n,t){if(n===t||\"float\"===t)return n;throw new \
Error(`Invalid mod types: ${n}, ${t}`)}function nA(n){return n}function \
tA(n){return n}function eA(n){return n}function AA(n){return n}function \
sA(n){return n}function aA(n){return n}function rA(n){return n}function \
iA(n){return n}function oA(n){return n}function cA(n){return n}function \
lA(n){return n}function uA(n){return n}function gA(n){return n}function \
hA(n){return n}function pA(n){return n}function IA(n){return n}function \
dA(n,t,e=\"min\"){if(n===t)return n;if(\"float\"===t){if(Bn(n))return n}else \
if(\"int\"===t){if(dn(n))return n}else if(\"uint\"===t&&Cn(n))return n;throw \
new Error(`Invalid ${e} types: ${n}, ${t}`)}function CA(n,t){return \
dA(n,t,\"max\")}function BA(n,t,e){if(\"float\"===t){if(Bn(n))return n}else \
if(\"int\"===t){if(dn(n))return n}else if(\"uint\"===t&&Cn(n))return n;throw \
new Error(`Invalid clamp types: ${n}, ${t}`)}function \
fA(n,t,e){if(e===n)return n;if(\"float\"===e)return \
n;if(\"bool\"===e&&\"float\"===n)return \
n;if(\"bvec2\"===e&&\"vec2\"===n)return \
n;if(\"bvec3\"===e&&\"vec3\"===n)return \
n;if(\"bvec4\"===e&&\"vec4\"===n)return n;throw new Error(`Invalid mix types: \
${n}, ${t}, ${e}`)}function EA(n,t){if(n===t||\"float\"===t)return t;throw \
new Error(`Invalid step types: ${n}, ${t}`)}function \
mA(n,t,e){if(n===t&&(n===e||\"float\"===n))return e;throw new Error(`Invalid \
smoothstep types: ${n}, ${t}, ${e}`)}function \
QA(n,t=\"isNan\"){if(\"float\"===n)return\"bool\";if(\"vec2\"===n)return\"bve\
c2\";if(\"vec3\"===n)return\"bvec3\";if(\"vec4\"===n)return\"bvec4\";throw \
new Error(`Invalid ${t} types: ${n}`)}function yA(n){return \
QA(n,\"isInf\")}const xA=(n,t)=>new FA({a:n,b:t}),wA=(n,t)=>new \
NA({a:n,b:t}),bA=(n,t)=>new RA({a:n,b:t}),vA=(n,t)=>new \
GA({a:n,b:t}),SA=(n,t)=>new UA({a:n,b:t}),DA=(n,t)=>new \
YA({a:n,b:t}),MA=n=>new zA({a:n}),kA=n=>new jA({a:n}),_A=(n,t)=>new \
ss({a:n,b:t}),TA=(n,t,e)=>new rs({a:n,b:t,t:e});class FA extends \
Pn{constructor({a:n,b:t}){super({a:n,b:t,outKey:\"sum\",outTypeFunc:je}),this\
.statements=({inputs:n,outputs:t})=>[`${t.sum} = ${n.a} + ${n.b};`]}}class NA \
extends \
Pn{constructor({a:n,b:t}){super({a:n,b:t,outKey:\"difference\",outTypeFunc:Ze\
}),this.statements=({inputs:n,outputs:t})=>[`${t.difference} = ${n.a} - \
${n.b};`]}}class RA extends \
Pn{constructor({a:n,b:t}){super({a:n,b:t,outKey:\"product\",outTypeFunc:Xe}),\
this.statements=({inputs:n,outputs:t})=>[`${t.product} = ${n.a} * \
${n.b};`]}}class GA extends \
Pn{constructor({a:n,b:t}){super({a:n,b:t,outKey:\"quotient\",outTypeFunc:Oe})\
,this.statements=({inputs:n,outputs:t})=>[`${t.quotient} = ${n.a} / \
${n.b};`]}}class UA extends \
Pn{constructor({a:n,b:t}){super({a:n,b:t,outKey:\"remainder\",outTypeFunc:Pe}\
),this.statements=({inputs:n,outputs:t})=>[`${t.remainder} = ${n.a} % \
${n.b};`]}}class YA extends \
Pn{constructor({a:n,b:t}){super({a:n,b:t,outKey:\"remainder\",outTypeFunc:We}\
),this.statements=({inputs:n,outputs:t})=>[`${t.remainder} = mod(${n.a}, \
${n.b});`]}}class qA extends Hn{constructor({a:n}){const \
t={a:Fn(n)},e=t.a;super({inTypes:t,outTypes:{fract:e,integer:e},inputs:{a:n}}\
),this.statements=({inputs:n,outputs:t})=>[`${t.fract} = modf(${n.a}, \
${t.integer});`]}}class zA extends \
On{constructor({a:n}){super({a:n,outKey:\"neg\",outTypeFunc:nA}),this.stateme\
nts=({inputs:n,outputs:t})=>[`${t.neg} = -${n.a};`]}}class LA extends \
On{constructor({a:n}){super({a:n,outKey:\"abs\",outTypeFunc:tA}),this.stateme\
nts=({inputs:n,outputs:t})=>[`${t.abs} = abs(${n.a});`]}}class JA extends \
On{constructor({a:n}){super({a:n,outKey:\"sign\",outTypeFunc:eA}),this.statem\
ents=({inputs:n,outputs:t})=>[`${t.sign} = sign(${n.a});`]}}class HA extends \
On{constructor({a:n}){super({a:n,outKey:\"floor\",outTypeFunc:AA}),this.state\
ments=({inputs:n,outputs:t})=>[`${t.floor} = floor(${n.a});`]}}class KA \
extends \
On{constructor({a:n}){super({a:n,outKey:\"ceil\",outTypeFunc:sA}),this.statem\
ents=({inputs:n,outputs:t})=>[`${t.ceil} = ceil(${n.a});`]}}class VA extends \
On{constructor({a:n}){super({a:n,outKey:\"trunc\",outTypeFunc:aA}),this.state\
ments=({inputs:n,outputs:t})=>[`${t.trunc} = trunc(${n.a});`]}}class $A \
extends \
On{constructor({a:n}){super({a:n,outKey:\"round\",outTypeFunc:rA}),this.state\
ments=({inputs:n,outputs:t})=>[`${t.round} = round(${n.a});`]}}class jA \
extends \
On{constructor({a:n}){super({a:n,outKey:\"fract\",outTypeFunc:iA}),this.state\
ments=({inputs:n,outputs:t})=>[`${t.fract} = fract(${n.a});`]}}class ZA \
extends \
Pn{constructor({a:n,b:t}){super({a:n,b:t,outKey:\"power\",outTypeFunc:oA}),th\
is.statements=({inputs:n,outputs:t})=>[`${t.power} = pow(${n.a}, \
${n.b});`]}}class XA extends \
On{constructor({a:n}){super({a:n,outKey:\"exp\",outTypeFunc:cA}),this.stateme\
nts=({inputs:n,outputs:t})=>[`${t.exp} = exp(${n.a});`]}}class OA extends \
On{constructor({a:n}){super({a:n,outKey:\"exp2\",outTypeFunc:lA}),this.statem\
ents=({inputs:n,outputs:t})=>[`${t.exp2} = exp2(${n.a});`]}}class PA extends \
On{constructor({a:n}){super({a:n,outKey:\"log\",outTypeFunc:uA}),this.stateme\
nts=({inputs:n,outputs:t})=>[`${t.log} = log(${n.a});`]}}class WA extends \
On{constructor({a:n}){super({a:n,outKey:\"log2\",outTypeFunc:gA}),this.statem\
ents=({inputs:n,outputs:t})=>[`${t.log2} = log2(${n.a});`]}}class ns extends \
On{constructor({a:n}){super({a:n,outKey:\"sqr\",outTypeFunc:hA}),this.stateme\
nts=({inputs:n,outputs:t})=>[`${t.sqr} = ${n.a} * ${n.a};`]}}class ts extends \
On{constructor({a:n}){super({a:n,outKey:\"sqrt\",outTypeFunc:pA}),this.statem\
ents=({inputs:n,outputs:t})=>[`${t.sqrt} = sqrt(${n.a});`]}}class es extends \
On{constructor({a:n}){super({a:n,outKey:\"inversesqrt\",outTypeFunc:IA}),this\
.statements=({inputs:n,outputs:t})=>[`${t.inversesqrt} = \
inversesqrt(${n.a});`]}}class As extends \
Pn{constructor({a:n,b:t}){super({a:n,b:t,outKey:\"min\",outTypeFunc:dA}),this\
.statements=({inputs:n,outputs:t})=>[`${t.min} = min(${n.a}, \
${n.b});`]}}class ss extends \
Pn{constructor({a:n,b:t}){super({a:n,b:t,outKey:\"max\",outTypeFunc:CA}),this\
.statements=({inputs:n,outputs:t})=>[`${t.max} = max(${n.a}, \
${n.b});`]}}class as extends \
Wn{constructor({a:n,min:t,max:e}){super({a:n,b:t,c:e,outKey:\"clamp\",outType\
Func:BA}),this.statements=({inputs:n,outputs:t})=>{const{a:e,b:A,c:s}=n;retur\
n[`${t.clamp} = clamp(${e}, ${A}, ${s});`]}}}class rs extends \
Wn{constructor({a:n,b:t,t:e}){super({a:n,b:t,c:e,outKey:\"mix\",outTypeFunc:f\
A}),this.statements=({inputs:n,outputs:t})=>{const{a:e,b:A,c:s}=n;return[`${t\
.mix} = mix(${e}, ${A}, ${s});`]}}}class is extends \
Pn{constructor({edge:n,x:t}){super({a:n,b:t,outKey:\"step\",outTypeFunc:EA}),\
this.statements=({inputs:n,outputs:t})=>{const{a:e,b:A}=n;return[`${t.step} = \
step(${e}, ${A});`]}}}class os extends \
Wn{constructor({edge0:n,edge1:t,x:e}){super({a:n,b:t,c:e,outKey:\"smoothstep\
\",outTypeFunc:mA}),this.statements=({inputs:n,outputs:t})=>{const{a:e,b:A,c:\
s}=n;return[`${t.smoothstep} = smoothstep(${e}, ${A}, ${s});`]}}}class cs \
extends \
On{constructor({a:n}){super({a:n,outKey:\"isNan\",outTypeFunc:QA}),this.state\
ments=({inputs:n,outputs:t})=>[`${t.isNan} = isNan(${n.a});`]}}class ls \
extends \
On{constructor({a:n}){super({a:n,outKey:\"isInf\",outTypeFunc:yA}),this.state\
ments=({inputs:n,outputs:t})=>[`${t.isInf} = isInf(${n.a});`]}}const \
us=(n,t)=>new Es({a:n,b:t}),gs=(n,t,e)=>new ws({cond:n,t:t,f:e});class hs \
extends \
Pn{constructor({a:n,b:t}){super({a:n,b:t,outTypeFunc:(n,t)=>n,outKey:\"and\"}\
),this.statements=({inputs:n,outputs:t})=>\"bool\"===this.outTypes.and?[`${t.\
and} = ${n.a} && ${n.b};`]:[`${t.and} = ${n.a} & ${n.b};`]}}class ps extends \
Pn{constructor({a:n,b:t}){super({a:n,b:t,outTypeFunc:(n,t)=>n,outKey:\"or\"})\
,this.statements=({inputs:n,outputs:t})=>\"bool\"===this.outTypes.or?[`${t.or\
} = ${n.a} || ${n.b};`]:[`${t.or} = ${n.a} | ${n.b};`]}}class Is extends \
Pn{constructor({a:n,b:t}){super({a:n,b:t,outTypeFunc:(n,t)=>n,outKey:\"xor\"}\
),this.statements=({inputs:n,outputs:t})=>\"bool\"===this.outTypes.xor?[`${t.\
xor} = ${n.a} ^^ ${n.b};`]:[`${t.xor} = ${n.a} ^ ${n.b};`]}}class ds extends \
On{constructor({a:n}){super({a:n,outTypeFunc:n=>n,outKey:\"not\"}),this.state\
ments=({inputs:n,outputs:t})=>\"bool\"===this.outTypes.not?[`${t.not} = \
!${n.a};`]:[`${t.not} = not(${n.a});`]}}class Cs extends \
Pn{constructor({a:n,b:t}){super({a:n,b:t,outTypeFunc:(n,t)=>bs(n,\"lessThan\"\
),outKey:\"lessThan\"}),this.statements=({inputs:n,outputs:t})=>\"bool\"===th\
is.outTypes.lessThan?[`${t.lessThan} = ${n.a} < ${n.b};`]:[`${t.lessThan} = \
lessThan(${n.a}, ${n.b});`]}}class Bs extends \
Pn{constructor({a:n,b:t}){super({a:n,b:t,outTypeFunc:(n,t)=>bs(n,\"lessThanEq\
ual\"),outKey:\"lessThanEqual\"}),this.statements=({inputs:n,outputs:t})=>\"b\
ool\"===this.outTypes.lessThanEqual?[`${t.lessThanEqual} = ${n.a} <= \
${n.b};`]:[`${t.lessThanEqual} = lessThanEqual(${n.a}, ${n.b});`]}}class fs \
extends \
Pn{constructor({a:n,b:t}){super({a:n,b:t,outTypeFunc:(n,t)=>bs(n,\"greaterTha\
n\"),outKey:\"greaterThan\"}),this.statements=({inputs:n,outputs:t})=>\"bool\
\"===this.outTypes.greaterThan?[`${t.greaterThan} = ${n.a} > \
${n.b};`]:[`${t.greaterThan} = greaterThan(${n.a}, ${n.b});`]}}class Es \
extends \
Pn{constructor({a:n,b:t}){super({a:n,b:t,outTypeFunc:(n,t)=>bs(n,\"greaterTha\
nEqual\"),outKey:\"greaterThanEqual\"}),this.statements=({inputs:n,outputs:t}\
)=>\"bool\"===this.outTypes.greaterThanEqual?[`${t.greaterThanEqual} = ${n.a} \
>= ${n.b};`]:[`${t.greaterThanEqual} = greaterThanEqual(${n.a}, \
${n.b});`]}}class ms extends \
Pn{constructor({a:n,b:t}){super({a:n,b:t,outTypeFunc:vs,outKey:\"equal\"}),th\
is.statements=({inputs:n,outputs:t})=>\"bool\"===this.outTypes.equal?[`${t.eq\
ual} = ${n.a} == ${n.b};`]:[`${t.equal} = equal(${n.a}, ${n.b});`]}}class Qs \
extends \
Pn{constructor({a:n,b:t}){super({a:n,b:t,outTypeFunc:Ss,outKey:\"notEqual\"})\
,this.statements=({inputs:n,outputs:t})=>\"bool\"===this.outTypes.notEqual?[`\
${t.notEqual} = ${n.a} != ${n.b};`]:[`${t.notEqual} = notEqual(${n.a}, \
${n.b});`]}}class ys extends \
On{constructor({a:n}){super({a:n,outTypeFunc:n=>\"bool\",outKey:\"any\"}),thi\
s.statements=({inputs:n,outputs:t})=>[`${t.any} = any(${n.a});`]}}class xs \
extends \
On{constructor({a:n}){super({a:n,outTypeFunc:n=>\"bool\",outKey:\"all\"}),thi\
s.statements=({inputs:n,outputs:t})=>[`${t.all} = all(${n.a});`]}}class ws \
extends \
Wn{constructor({cond:n,t:t,f:e}){super({a:n,b:t,c:e,outKey:\"select\",outType\
Func:(n,t,e)=>t}),this.statements=({inputs:n,outputs:t})=>{const{a:e,b:A,c:s}\
=n;return[`${t.select} = (${e}) ? (${A}) : (${s});`]}}}function \
bs(n,t){if(In(n))return\"bool\";if(\"ivec2\"===n||\"uvec2\"===n||\"vec2\"===n\
)return\"bvec2\";if(\"ivec3\"===n||\"uvec3\"===n||\"vec3\"===n)return\"bvec3\
\";if(\"ivec4\"===n||\"uvec4\"===n||\"vec4\"===n)return\"bvec4\";throw new \
Error(`Invalid ${t} type: ${n}`)}function \
vs(n,t=\"equal\"){if(In(n))return\"bool\";if(pn(n))return \
n;if(\"ivec2\"===n||\"uvec2\"===n||\"vec2\"===n)return\"bvec2\";if(\"ivec3\"=\
==n||\"uvec3\"===n||\"vec3\"===n)return\"bvec3\";if(\"ivec4\"===n||\"uvec4\"=\
==n||\"vec4\"===n)return\"bvec4\";throw new Error(`Invalid ${t} type: \
${n}`)}function Ss(n){return vs(n,\"notEqual\")}class Ds extends \
On{constructor({a:n}){const \
t=function(n){if(pn(n))return\"bool\";if(dn(n))return\"int\";if(Cn(n))return\
\"uint\";throw new Error(`Invalid compXor type: \
${n}`)}(Fn(n));super({a:n,outTypeFunc:n=>t,outKey:\"compXor\"}),this.statemen\
ts=({inputs:n,outputs:e})=>{if(In(this.outTypes.compXor))return[`${e.compXor} \
= ${n.a};`];const \
A=(mn(t)?[\"x\",\"y\"]:Qn(t)?[\"x\",\"y\",\"z\"]:[\"x\",\"y\",\"z\",\"w\"]).m\
ap((t=>`${n.a}.${t}`)),s=pn(t)?\"^^\":\"^\";return[`${e.compXor} = ${A.join(` \
${s} `)};`]}}}const Ms=n=>new Ls({value:n}),ks=n=>new Ps({value:n}),_s=n=>new \
Ws({value:n}),Ts=n=>new na({value:n}),Fs=n=>new sa({value:n}),Ns=n=>new \
aa({value:n}),Rs=n=>new ga({value:n}),Gs=n=>new pa({value:n});class Us \
extends \
On{constructor({value:n,outType:t,outKey:e}){super({a:n,outTypeFunc:()=>t,out\
Key:e}),this.statements=({inputs:n,outputs:A})=>[`${A[e]} = \
${Mn(t)}(${n.a});`]}}class Ys extends \
Us{constructor({value:n}){super({value:n,outType:\"bool\",outKey:\"bool\"})}}\
class qs extends \
Us{constructor({value:n}){super({value:n,outType:\"int\",outKey:\"int\"})}}cl\
ass zs extends \
Us{constructor({value:n}){super({value:n,outType:\"uint\",outKey:\"uint\"})}}\
class Ls extends \
Us{constructor({value:n}){super({value:n,outType:\"float\",outKey:\"float\"})\
}}class Js extends \
Us{constructor({value:n}){super({value:n,outType:\"bvec2\",outKey:\"bvec2\"})\
}}class Hs extends \
Us{constructor({value:n}){super({value:n,outType:\"bvec3\",outKey:\"bvec3\"})\
}}class Ks extends \
Us{constructor({value:n}){super({value:n,outType:\"bvec4\",outKey:\"bvec4\"})\
}}class Vs extends \
Us{constructor({value:n}){super({value:n,outType:\"ivec2\",outKey:\"ivec2\"})\
}}class $s extends \
Us{constructor({value:n}){super({value:n,outType:\"ivec3\",outKey:\"ivec3\"})\
}}class js extends \
Us{constructor({value:n}){super({value:n,outType:\"ivec4\",outKey:\"ivec4\"})\
}}class Zs extends \
Us{constructor({value:n}){super({value:n,outType:\"uvec2\",outKey:\"uvec2\"})\
}}class Xs extends \
Us{constructor({value:n}){super({value:n,outType:\"uvec3\",outKey:\"uvec3\"})\
}}class Os extends \
Us{constructor({value:n}){super({value:n,outType:\"uvec4\",outKey:\"uvec4\"})\
}}class Ps extends \
Us{constructor({value:n}){super({value:n,outType:\"vec2\",outKey:\"vec2\"})}}\
class Ws extends \
Us{constructor({value:n}){super({value:n,outType:\"vec3\",outKey:\"vec3\"})}}\
class na extends \
Us{constructor({value:n}){super({value:n,outType:\"vec4\",outKey:\"vec4\"})}}\
class ta extends \
Us{constructor({value:n}){super({value:n,outType:\"mat2\",outKey:\"mat2\"})}}\
class ea extends \
Us{constructor({value:n}){super({value:n,outType:\"mat3\",outKey:\"mat3\"})}}\
class Aa extends \
Us{constructor({value:n}){super({value:n,outType:\"mat4\",outKey:\"mat4\"})}}\
class sa extends \
On{constructor({value:n}){super({a:n,outKey:\"int\",outTypeFunc:()=>\"int\"})\
,this.statements=({inputs:n,outputs:t})=>[`${t.int} = \
floatBitsToInt(${n.a});`]}}class aa extends \
On{constructor({value:n}){super({a:n,outKey:\"uint\",outTypeFunc:()=>\"uint\"\
}),this.statements=({inputs:n,outputs:t})=>[`${t.uint} = \
floatBitsToUint(${n.a});`]}}class ra extends \
On{constructor({value:n}){super({a:n,outKey:\"float\",outTypeFunc:()=>\"float\
\"}),this.statements=({inputs:n,outputs:t})=>[`${t.float} = \
intBitsToFloat(${n.a});`]}}class ia extends \
On{constructor({value:n}){super({a:n,outKey:\"float\",outTypeFunc:()=>\"float\
\"}),this.statements=({inputs:n,outputs:t})=>[`${t.float} = \
uintBitsToFloat(${n.a});`]}}class oa extends \
On{constructor({value:n}){super({a:n,outKey:\"uint\",outTypeFunc:()=>\"uint\"\
}),this.statements=({inputs:n,outputs:t})=>[`${t.uint} = \
packSnorm2x16(${n.a});`]}}class ca extends \
On{constructor({value:n}){super({a:n,outKey:\"vec2\",outTypeFunc:()=>\"vec2\"\
}),this.statements=({inputs:n,outputs:t})=>[`${t.vec2} = \
unpackSnorm2x16(${n.a});`]}}class la extends \
On{constructor({value:n}){super({a:n,outKey:\"uint\",outTypeFunc:()=>\"uint\"\
}),this.statements=({inputs:n,outputs:t})=>[`${t.uint} = \
packUnorm2x16(${n.a});`]}}class ua extends \
On{constructor({value:n}){super({a:n,outKey:\"vec2\",outTypeFunc:()=>\"vec2\"\
}),this.statements=({inputs:n,outputs:t})=>[`${t.vec2} = \
unpackUnorm2x16(${n.a});`]}}class ga extends \
On{constructor({value:n}){super({a:n,outKey:\"uint\",outTypeFunc:()=>\"uint\"\
}),this.statements=({inputs:n,outputs:t})=>[`${t.uint} = \
packHalf2x16(${n.a});`]}}class ha extends \
On{constructor({value:n}){super({a:n,outKey:\"vec2\",outTypeFunc:()=>\"vec2\"\
}),this.statements=({inputs:n,outputs:t})=>[`${t.vec2} = \
unpackHalf2x16(${n.a});`]}}class pa extends \
On{constructor({value:n}){super({a:n,outKey:\"rgba8\",outTypeFunc:()=>\"vec4\
\"}),this.statements=({inputs:n,outputs:t})=>[`uvec4 uRgba = uvec4(${n.a} & \
0xffu, (${n.a} >> 8u) & 0xffu, (${n.a} >> 16u) & 0xffu, (${n.a} >> 24u) & \
0xffu);`,`${t.rgba8} = vec4(uRgba) / 255.0;`]}}const Ia=(n,t)=>new \
Qa({a:n,b:t}),da=n=>new xa({a:n}),Ca=n=>new \
Ga({vector:n}),Ba=({vector:n,vectorType:t,x:e,y:A,z:s,w:a,r:r,g:i,b:o,a:c})=>\
new Ua({vector:n,vectorType:t,x:e,y:A,z:s,w:a,r:r,g:i,b:o,a:c}),fa=(n,t)=>new \
ba({a:n,b:t});class Ea extends \
On{constructor({a:n}){super({a:n,outTypeFunc:n=>\"float\",outKey:\"length\"})\
,this.statements=({inputs:n,outputs:t})=>[`${t.length} = \
length(${n.a});`]}}class ma extends \
Pn{constructor({a:n,b:t}){super({a:n,b:t,outKey:\"distance\",outTypeFunc:(n,t\
)=>\"float\"}),this.statements=({inputs:n,outputs:t})=>[`${t.distance} = \
distance(${n.a}, ${n.b});`]}}class Qa extends \
Pn{constructor({a:n,b:t}){super({a:n,b:t,outKey:\"dot\",outTypeFunc:(n,t)=>\"\
float\"}),this.statements=({inputs:n,outputs:t})=>[`${t.dot} = dot(${n.a}, \
${n.b});`]}}class ya extends \
Pn{constructor({a:n,b:t}){super({a:n,b:t,outKey:\"cross\",outTypeFunc:(n,t)=>\
\"vec3\"}),this.statements=({inputs:n,outputs:t})=>[`${t.cross} = \
cross(${n.a}, ${n.b});`]}}class xa extends \
On{constructor({a:n}){super({a:n,outTypeFunc:n=>n,outKey:\"normalize\"}),this\
.statements=({inputs:n,outputs:t})=>[`${t.normalize} = \
normalize(${n.a});`]}}class wa extends \
On{constructor({a:n}){super({a:n,outTypeFunc:n=>function(n){if(\"vec3\"===n)r\
eturn\"vec2\";if(\"vec4\"===n)return\"vec3\";throw new Error(\"Invalid \
type\")}(n),outKey:\"projected\"}),this.statements=({inputs:n,outputs:t})=>{i\
f(\"vec3\"===this.inTypes.a)return[`${t.projected} = ${n.a}.xy / \
${n.a}.z;`];if(\"vec4\"===this.inTypes.a)return[`${t.projected} = ${n.a}.xyz \
/ ${n.a}.w;`];throw new Error(\"Invalid type\")}}}class ba extends \
Pn{constructor({a:n,b:t}){const \
e=function(n){if(\"float\"===n)return\"vec2\";if(\"vec2\"===n)return\"vec3\";\
if(\"vec3\"===n)return\"vec4\";throw new Error(\"Invalid \
type\")}(Fn(n));super({a:n,b:t,outKey:\"extend\",outTypeFunc:()=>e}),this.sta\
tements=({inputs:n,outputs:t})=>[`${t.extend} = ${e}(${n.a}, \
${n.b});`]}}class va extends \
Wn{constructor({a:n,b:t,c:e}){super({a:n,b:t,c:e,outKey:\"forward\",outTypeFu\
nc:(n,t,e)=>n}),this.statements=({inputs:n,outputs:t})=>[`${t.forward} = \
faceforward(${n.a}, ${n.b}, ${n.c});`]}}class Sa extends \
Pn{constructor({incident:n,normal:t}){super({a:n,b:t,outKey:\"reflection\",ou\
tTypeFunc:(n,t)=>n}),this.statements=({inputs:n,outputs:t})=>[`${t.reflection\
} = reflect(${n.a}, ${n.b});`]}}class Da extends \
Wn{constructor({incident:n,normal:t,eta:e}){super({a:n,b:t,c:e,outKey:\"refra\
ction\",outTypeFunc:(n,t,e)=>n}),this.statements=({inputs:n,outputs:t})=>[`${\
t.refraction} = refract(${n.a}, ${n.b}, ${n.c});`]}}class Ma extends \
Pn{constructor({a:n,b:t}){super({a:n,b:t,outKey:\"product\",outTypeFunc:(n,t)\
=>n}),this.statements=({inputs:e,outputs:A})=>[`${A.product} = \
matrixCompMult(${n}, ${t});`]}}function \
ka(n,t){if(\"vec2\"===n){if(\"vec2\"===t)return\"mat2\";if(\"vec3\"===t)retur\
n\"mat3x2\";if(\"vec4\"===t)return\"mat4x2\"}if(\"vec3\"===n){if(\"vec2\"===t\
)return\"mat2x3\";if(\"vec3\"===t)return\"mat3\";if(\"vec4\"===t)return\"mat4\
x3\"}if(\"vec4\"===n){if(\"vec2\"===t)return\"mat2x4\";if(\"vec3\"===t)return\
\"mat3x4\";if(\"vec4\"===t)return\"mat4\"}throw new Error(`Invalid outer \
type: ${n}, ${t}`)}class _a extends \
Pn{constructor({a:n,b:t}){super({a:n,b:t,outKey:\"outer\",outTypeFunc:ka}),th\
is.statements=({inputs:n,outputs:t})=>[`${t.outer} = outerProduct(${n.a}, \
${n.b});`]}}function \
Ta(n){if(\"mat2\"===n)return\"mat2\";if(\"mat3\"===n)return\"mat3\";if(\"mat4\
\"===n)return\"mat4\";if(\"mat2x2\"===n)return\"mat2x2\";if(\"mat2x3\"===n)re\
turn\"mat3x2\";if(\"mat2x4\"===n)return\"mat4x2\";if(\"mat3x2\"===n)return\"m\
at2x3\";if(\"mat3x3\"===n)return\"mat3x3\";if(\"mat3x4\"===n)return\"mat4x3\"\
;if(\"mat4x2\"===n)return\"mat2x4\";if(\"mat4x3\"===n)return\"mat3x4\";if(\"m\
at4x4\"===n)return\"mat4x4\";throw new Error(`Invalid transpose type: \
${n}`)}class Fa extends \
On{constructor({a:n}){super({a:n,outKey:\"transpose\",outTypeFunc:Ta}),this.s\
tatements=({inputs:n,outputs:t})=>[`${t.transpose} = \
transpose(${n.a});`]}}class Na extends \
On{constructor({a:n}){super({a:n,outKey:\"det\",outTypeFunc:n=>\"float\"}),th\
is.statements=({inputs:n,outputs:t})=>[`${t.det} = \
determinant(${n.a});`]}}class Ra extends \
On{constructor({a:n}){super({a:n,outKey:\"inverse\",outTypeFunc:n=>n}),this.s\
tatements=({inputs:t,outputs:e})=>[`${e.inverse} = inverse(${n});`]}}class Ga \
extends Hn{constructor({vector:n}){const \
t={vector:Fn(n)},e=function(n){switch(n){case\"vec2\":return{x:\"float\",y:\"\
float\",r:\"float\",g:\"float\"};case\"vec3\":return{x:\"float\",y:\"float\",\
z:\"float\",r:\"float\",g:\"float\",b:\"float\"};case\"vec4\":return{x:\"floa\
t\",y:\"float\",z:\"float\",w:\"float\",r:\"float\",g:\"float\",b:\"float\",a\
:\"float\"};case\"ivec2\":return{x:\"int\",y:\"int\",r:\"int\",g:\"int\"};cas\
e\"ivec3\":return{x:\"int\",y:\"int\",z:\"int\",r:\"int\",g:\"int\",b:\"int\"\
};case\"ivec4\":return{x:\"int\",y:\"int\",z:\"int\",w:\"int\",r:\"int\",g:\"\
int\",b:\"int\",a:\"int\"};case\"uvec2\":return{x:\"uint\",y:\"uint\",r:\"uin\
t\",g:\"uint\"};case\"uvec3\":return{x:\"uint\",y:\"uint\",z:\"uint\",r:\"uin\
t\",g:\"uint\",b:\"uint\"};case\"uvec4\":return{x:\"uint\",y:\"uint\",z:\"uin\
t\",w:\"uint\",r:\"uint\",g:\"uint\",b:\"uint\",a:\"uint\"};default:throw new \
Error(`Invalid vector type: \
${n}`)}}(t.vector);super({inTypes:t,outTypes:e,inputs:{vector:n}}),this.state\
ments=({inputs:n,outputs:t})=>{const{x:e,y:A,z:s,w:a,r:r,g:i,b:o,a:c}=t,{vect\
or:l}=n;return[e?`${e} = ${l}.x;`:null,A?`${A} = ${l}.y;`:null,s?`${s} = \
${l}.z;`:null,a?`${a} = ${l}.w;`:null,r?`${r} = ${l}.r;`:null,i?`${i} = \
${l}.g;`:null,o?`${o} = ${l}.b;`:null,c?`${c} = \
${l}.a;`:null].filter(Boolean)}}}class Ua extends \
Hn{constructor({vector:n,vectorType:t,x:e,y:A,z:s,w:a,r:r,g:i,b:o,a:c}){if(!n\
&&!t)throw new Error(\"Either vector or vectorType must be provided\");const \
l=t??Fn(n),u=vn(l),g=Sn(l),h={vector:l,x:u,y:u,r:u,g:u},p={vector:n,x:e,y:A,r\
:r,g:i};g>=3&&(Object.assign(h,{z:u,b:u}),Object.assign(p,{z:s,b:o})),g>=4&&(\
Object.assign(h,{w:u,a:u}),Object.assign(p,{w:a,a:c})),super({inTypes:h,outTy\
pes:{vector:l},inputs:p}),this.statements=({inputs:n,outputs:t})=>{const{vect\
or:e}=t,{vector:A,x:s,y:a,z:r,w:i,r:o,g:c,b:l,a:h}=n,p=[`${e}.x = \
${s??o??(A?`${A}.x`:zn(u))};`,`${e}.y = ${a??c??(A?`${A}.y`:zn(u))};`];return \
g>=3&&p.push(`${e}.z = ${r??l??(A?`${A}.z`:zn(u))};`),g>=4&&p.push(`${e}.w = \
${i??h??(A?`${A}.w`:zn(u))};`),p}}dynoOut(){return new \
Rn(this,\"vector\")}}class Ya extends \
On{constructor({vector:n,select:t}){super({a:n,outKey:\"swizzle\",outTypeFunc\
:n=>function(n,t){let \
e=null;if(Bn(n)?e=1===t.length?\"float\":2===t.length?\"vec2\":3===t.length?\
\"vec3\":4===t.length?\"vec4\":null:dn(n)?e=1===t.length?\"int\":2===t.length\
?\"ivec2\":3===t.length?\"ivec3\":4===t.length?\"ivec4\":null:Cn(n)&&(e=1===t\
.length?\"uint\":2===t.length?\"uvec2\":3===t.length?\"uvec3\":4===t.length?\
\"uvec4\":null),null==e)throw new Error(`Invalid swizzle: ${t}`);return \
e}(n,t)}),this.statements=({inputs:n,outputs:e})=>[`${e.swizzle} = \
${n.a}.${t};`]}}const qa=n=>new Oa({value:n}),za=n=>new \
Pa({value:n}),La=n=>new Wa({value:n}),Ja=n=>new nr({value:n}),Ha=n=>new \
Ar({value:n}),Ka=n=>new sr({value:n}),Va=(n,t,e)=>new \
ar({z:n,zNear:t,zFar:e}).outputs.depth;class $a extends \
Hn{constructor({from:n,to:t,index:e}){super({inTypes:{from:\"int\",to:\"int\"\
,index:\"int\"},outTypes:{index:\"int\"},inputs:{from:n,to:t,index:e},stateme\
nts:({inputs:n,outputs:t})=>[`${t.index} = ${n.index} - ${n.from} + \
${n.to};`]})}dynoOut(){return new Rn(this,\"index\")}}class ja extends \
Hn{constructor({state:n}){const \
t=Fn(n);super({inTypes:{state:t},outTypes:{state:\"uint\"},inputs:{state:n},g\
lobals:()=>[Xn(\"\\n          uint pcg_next(uint state) {\\n            \
return state * 747796405u + 2891336453u;\\n          }\\n        \
\")],statements:({inputs:n,outputs:e})=>{const \
A=\"uint\"===t?`${n.state}`:\"int\"===t?`uint(${n.state})`:`floatBitsToUint($\
{n.state})`;return[`${e.state} = pcg_next(${A});`]}})}dynoOut(){return new \
Rn(this,\"state\")}}class Za extends \
Hn{constructor({state:n}){super({inTypes:{state:\"uint\"},outTypes:{hash:\"ui\
nt\"},inputs:{state:n},globals:()=>[Xn(\"\\n          uint pcg_hash(uint \
state) {\\n            uint hash = ((state >> ((state >> 28u) + 4u)) ^ state) \
* 277803737u;\\n            return (hash >> 22u) ^ hash;\\n          }\\n     \
   \")],statements:({inputs:n,outputs:t})=>[`${t.hash} = \
pcg_hash(${n.state});`]})}dynoOut(){return new Rn(this,\"hash\")}}class Xa \
extends Hn{constructor({value:n}){const \
t=Fn(n),e=Dn(t);super({inTypes:{value:t},outTypes:{state:\"uint\"},inputs:{va\
lue:n},globals:()=>[Xn(\"\\n          uint pcg_mix(uint value) {\\n           \
 return value;\\n          }\\n          uint pcg_mix(uvec2 value) {\\n       \
     return value.x + 0x9e3779b9u * value.y;\\n          }\\n          uint \
pcg_mix(uvec3 value) {\\n            return value.x + 0x9e3779b9u * value.y + \
0x85ebca6bu * value.z;\\n          }\\n          uint pcg_mix(uvec4 value) \
{\\n            return value.x + 0x9e3779b9u * value.y + 0x85ebca6bu * \
value.z + 0xc2b2ae35u * value.w;\\n          }\\n        \
\")],statements:({inputs:n,outputs:A})=>{const \
s=Cn(t)?`${n.value}`:dn(t)?`${e}(${n.value})`:`floatBitsToUint(${n.value})`;r\
eturn[`${e} bits = ${s};`,`${A.state} = pcg_mix(bits);`]}})}dynoOut(){return \
new Rn(this,\"state\")}}class Oa extends \
Kn{constructor({value:n}){super({inTypes:{value:Fn(n)},outTypes:{hash:\"uint\
\"},inputs:{value:n},construct:({value:n})=>{if(!n)throw new Error(\"value is \
required\");let t=new Xa({value:n}).outputs.state;return t=new \
ja({state:t}).outputs.state,new Za({state:t}).outputs}})}dynoOut(){return new \
Rn(this,\"hash\")}}class Pa extends \
Kn{constructor({value:n}){super({inTypes:{value:Fn(n)},outTypes:{hash:\"uvec2\
\"},inputs:{value:n},construct:({value:n})=>{if(!n)throw new Error(\"value is \
required\");let t=new Xa({value:n}).outputs.state;t=new \
ja({state:t}).outputs.state;const e=new Za({state:t}).outputs.hash;t=new \
ja({state:t}).outputs.state;const A=new \
Za({state:t}).outputs.hash;return{hash:Ba({vectorType:\"uvec2\",x:e,y:A})}}})\
}dynoOut(){return new Rn(this,\"hash\")}}class Wa extends \
Kn{constructor({value:n}){super({inTypes:{value:Fn(n)},outTypes:{hash:\"uvec3\
\"},inputs:{value:n},construct:({value:n})=>{if(!n)throw new Error(\"value is \
required\");let t=new Xa({value:n}).outputs.state;t=new \
ja({state:t}).outputs.state;const e=new Za({state:t}).outputs.hash;t=new \
ja({state:t}).outputs.state;const A=new Za({state:t}).outputs.hash;t=new \
ja({state:t}).outputs.state;const s=new \
Za({state:t}).outputs.hash;return{hash:Ba({vectorType:\"uvec3\",x:e,y:A,z:s})\
}}})}dynoOut(){return new Rn(this,\"hash\")}}class nr extends \
Kn{constructor({value:n}){super({inTypes:{value:Fn(n)},outTypes:{hash:\"uvec4\
\"},inputs:{value:n},construct:({value:n})=>{if(!n)throw new Error(\"value is \
required\");let t=new Xa({value:n}).outputs.state;t=new \
ja({state:t}).outputs.state;const e=new Za({state:t}).outputs.hash;t=new \
ja({state:t}).outputs.state;const A=new Za({state:t}).outputs.hash;t=new \
ja({state:t}).outputs.state;const s=new Za({state:t}).outputs.hash;t=new \
ja({state:t}).outputs.state;const a=new \
Za({state:t}).outputs.hash;return{hash:Ba({vectorType:\"uvec4\",x:e,y:A,z:s,w\
:a})}}})}dynoOut(){return new Rn(this,\"hash\")}}class tr extends \
Kn{constructor({value:n}){super({inTypes:{value:Fn(n)},outTypes:{hash:\"float\
\"},inputs:{value:n},construct:({value:n})=>{if(!n)throw new Error(\"value is \
required\");const \
t=qa(n);return{hash:bA(Ms(t),qn(\"float\",1/2**32))}}})}dynoOut(){return new \
Rn(this,\"hash\")}}class er extends \
Kn{constructor({value:n}){super({inTypes:{value:Fn(n)},outTypes:{hash:\"vec2\
\"},inputs:{value:n},construct:({value:n})=>{if(!n)throw new Error(\"value is \
required\");const \
t=za(n);return{hash:bA(ks(t),qn(\"float\",1/2**32))}}})}dynoOut(){return new \
Rn(this,\"hash\")}}class Ar extends \
Kn{constructor({value:n}){super({inTypes:{value:Fn(n)},outTypes:{hash:\"vec3\
\"},inputs:{value:n},construct:({value:n})=>{if(!n)throw new Error(\"value is \
required\");const \
t=La(n);return{hash:bA(_s(t),qn(\"float\",1/2**32))}}})}dynoOut(){return new \
Rn(this,\"hash\")}}class sr extends \
Kn{constructor({value:n}){super({inTypes:{value:Fn(n)},outTypes:{hash:\"vec4\
\"},inputs:{value:n},construct:({value:n})=>{if(!n)throw new Error(\"value is \
required\");const \
t=Ja(n);return{hash:bA(Ts(t),qn(\"float\",1/2**32))}}})}dynoOut(){return new \
Rn(this,\"hash\")}}class ar extends \
Hn{constructor({z:n,zNear:t,zFar:e}){super({inTypes:{z:\"float\",zNear:\"floa\
t\",zFar:\"float\"},outTypes:{depth:\"float\"},inputs:{z:n,zNear:t,zFar:e},st\
atements:({inputs:n,outputs:t})=>[`float clamped = clamp(${n.z}, ${n.zNear}, \
${n.zFar});`,`${t.depth} = (log2(clamped + 1.0) - log2(${n.zNear} + 1.0)) / \
(log2(${n.zFar} + 1.0) - log2(${n.zNear} + 1.0));`]})}dynoOut(){return new \
Rn(this,\"depth\")}}const rr=(n,{scale:t,scales:e,rotate:A,translate:s})=>new \
or({position:n,scale:t,scales:e,rotate:A,translate:s}).outputs.position,ir=(n\
,{scale:t,scales:e,rotate:A})=>new \
cr({dir:n,scale:t,scales:e,rotate:A}).outputs.dir;class or extends \
Hn{constructor({position:n,scale:t,scales:e,rotate:A,translate:s}){super({inT\
ypes:{position:\"vec3\",scale:\"float\",scales:\"vec3\",rotate:\"vec4\",trans\
late:\"vec3\"},outTypes:{position:\"vec3\"},inputs:{position:n,scale:t,scales\
:e,rotate:A,translate:s},statements:({inputs:n,outputs:t})=>{const{position:e\
}=t;if(!e)return[];const{scale:A,scales:s,rotate:a,translate:r}=n;return[`${e\
} = ${n.position??\"vec3(0.0, 0.0, 0.0)\"};`,A?`${e} *= ${A};`:null,s?`${e} \
*= ${s};`:null,a?`${e} = quatVec(${a}, ${e});`:null,r?`${e} += \
${r};`:null].filter(Boolean)}})}}class cr extends \
Hn{constructor({dir:n,scale:t,scales:e,rotate:A}){super({inTypes:{dir:\"vec3\
\",scale:\"float\",scales:\"vec3\",rotate:\"vec4\"},outTypes:{dir:\"vec3\"},i\
nputs:{dir:n,scale:t,scales:e,rotate:A},statements:({inputs:n,outputs:t})=>{c\
onst{dir:e}=t;if(!e)return[];const{scale:A,scales:s,rotate:a}=n;return[`${e} \
= ${n.dir??\"vec3(0.0, 0.0, 0.0)\"};`,A?`${e} *= ${A};`:null,s?`${e} *= \
${s};`:null,a?`${e} = quatVec(${a}, ${e});`:null].filter(Boolean)}})}}class \
lr extends \
Hn{constructor({quaternion:n,rotate:t}){super({inTypes:{quaternion:\"vec4\",r\
otate:\"vec4\"},outTypes:{quaternion:\"vec4\"},inputs:{quaternion:n,rotate:t}\
,statements:({inputs:n,outputs:e})=>{const{quaternion:A}=e;return A?[`${A} = \
${n.quaternion??\"vec4(0.0, 0.0, 0.0, 1.0)\"};`,t?`${A} = \
quatQuat(${n.rotate}, ${A});`:null].filter(Boolean):[]}})}}class ur extends \
Hn{constructor({texture:n,lod:t}){const \
e=Fn(n);super({inTypes:{texture:e,lod:\"int\"},outTypes:{size:pr(e)},inputs:{\
texture:n,lod:t},statements:({inputs:n,outputs:t})=>[`${t.size} = \
textureSize(${n.texture}, ${n.lod??\"0\"});`]})}dynoOut(){return new \
Rn(this,\"size\")}}class gr extends \
Hn{constructor({texture:n,coord:t,bias:e}){const \
A=Fn(n);super({inTypes:{texture:A,coord:Ir(A),bias:\"float\"},outTypes:{sampl\
e:dr(A)},inputs:{texture:n,coord:t,bias:e},statements:({inputs:n,outputs:t})=\
>[`${t.sample} = texture(${n.texture}, ${n.coord}${n.bias?`, \
${n.bias}`:\"\"});`]})}dynoOut(){return new Rn(this,\"sample\")}}class hr \
extends Hn{constructor({texture:n,coord:t,lod:e}){const \
A=Fn(n);super({inTypes:{texture:A,coord:pr(A),lod:\"int\"},outTypes:{texel:dr\
(A)},inputs:{texture:n,coord:t,lod:e},statements:({inputs:n,outputs:t})=>[`${\
t.texel} = texelFetch(${n.texture}, ${n.coord}, \
${n.lod??\"0\"});`]})}dynoOut(){return new Rn(this,\"texel\")}}function \
pr(n){switch(n){case\"sampler2D\":case\"usampler2D\":case\"isampler2D\":case\
\"samplerCube\":case\"usamplerCube\":case\"isamplerCube\":case\"sampler2DShad\
ow\":case\"samplerCubeShadow\":return\"ivec2\";case\"sampler3D\":case\"usampl\
er3D\":case\"isampler3D\":case\"sampler2DArray\":case\"usampler2DArray\":case\
\"isampler2DArray\":case\"sampler2DArrayShadow\":return\"ivec3\";default:thro\
w new Error(`Invalid texture type: ${n}`)}}function \
Ir(n){switch(n){case\"sampler2D\":case\"usampler2D\":case\"isampler2D\":retur\
n\"vec2\";case\"sampler3D\":case\"usampler3D\":case\"isampler3D\":case\"sampl\
erCube\":case\"usamplerCube\":case\"isamplerCube\":case\"sampler2DArray\":cas\
e\"usampler2DArray\":case\"isampler2DArray\":case\"sampler2DShadow\":return\"\
vec3\";case\"samplerCubeShadow\":case\"sampler2DArrayShadow\":return\"vec4\";\
default:throw new Error(`Invalid texture type: ${n}`)}}function \
dr(n){switch(n){case\"sampler2D\":case\"sampler2DArray\":case\"sampler3D\":ca\
se\"samplerCube\":case\"sampler2DShadow\":return\"vec4\";case\"usampler2D\":c\
ase\"usampler2DArray\":case\"usampler3D\":case\"usamplerCube\":return\"uvec4\
\";case\"isampler2D\":case\"isampler2DArray\":case\"isampler3D\":case\"isampl\
erCube\":return\"ivec4\";case\"samplerCubeShadow\":case\"sampler2DArrayShadow\
\":return\"float\";default:throw new Error(`Invalid texture type: \
${n}`)}}const Cr=n=>new Er({radians:n});class Br extends \
On{constructor({degrees:n}){super({a:n,outTypeFunc:n=>n,outKey:\"radians\"}),\
this.statements=({inputs:n,outputs:t})=>[`${t.radians} = \
radians(${n.a});`]}}class fr extends \
On{constructor({radians:n}){super({a:n,outTypeFunc:n=>n,outKey:\"degrees\"}),\
this.statements=({inputs:n,outputs:t})=>[`${t.degrees} = \
degrees(${n.a});`]}}class Er extends \
On{constructor({radians:n}){super({a:n,outTypeFunc:n=>n,outKey:\"sin\"}),this\
.statements=({inputs:n,outputs:t})=>[`${t.sin} = sin(${n.a});`]}}class mr \
extends \
On{constructor({radians:n}){super({a:n,outTypeFunc:n=>n,outKey:\"cos\"}),this\
.statements=({inputs:n,outputs:t})=>[`${t.cos} = cos(${n.a});`]}}class Qr \
extends \
On{constructor({radians:n}){super({a:n,outTypeFunc:n=>n,outKey:\"tan\"}),this\
.statements=({inputs:n,outputs:t})=>[`${t.tan} = tan(${n.a});`]}}class yr \
extends \
On{constructor({sin:n}){super({a:n,outTypeFunc:n=>n,outKey:\"asin\"}),this.st\
atements=({inputs:n,outputs:t})=>[`${t.asin} = asin(${n.a});`]}}class xr \
extends \
On{constructor({cos:n}){super({a:n,outTypeFunc:n=>n,outKey:\"acos\"}),this.st\
atements=({inputs:n,outputs:t})=>[`${t.acos} = acos(${n.a});`]}}class wr \
extends \
On{constructor({tan:n}){super({a:n,outTypeFunc:n=>n,outKey:\"atan\"}),this.st\
atements=({inputs:n,outputs:t})=>[`${t.atan} = atan(${n.a});`]}}class br \
extends \
Pn{constructor({y:n,x:t}){super({a:n,b:t,outTypeFunc:(n,t)=>n,outKey:\"atan2\
\"}),this.statements=({inputs:n,outputs:t})=>[`${t.atan2} = atan2(${n.a}, \
${n.b});`]}}class vr extends \
On{constructor({x:n}){super({a:n,outTypeFunc:n=>n,outKey:\"sinh\"}),this.stat\
ements=({inputs:n,outputs:t})=>[`${t.sinh} = sinh(${n.a});`]}}class Sr \
extends \
On{constructor({x:n}){super({a:n,outTypeFunc:n=>n,outKey:\"cosh\"}),this.stat\
ements=({inputs:n,outputs:t})=>[`${t.cosh} = cosh(${n.a});`]}}class Dr \
extends \
On{constructor({x:n}){super({a:n,outTypeFunc:n=>n,outKey:\"tanh\"}),this.stat\
ements=({inputs:n,outputs:t})=>[`${t.tanh} = tanh(${n.a});`]}}class Mr \
extends \
On{constructor({x:n}){super({a:n,outTypeFunc:n=>n,outKey:\"asinh\"}),this.sta\
tements=({inputs:n,outputs:t})=>[`${t.asinh} = asinh(${n.a});`]}}class kr \
extends \
On{constructor({x:n}){super({a:n,outTypeFunc:n=>n,outKey:\"acosh\"}),this.sta\
tements=({inputs:n,outputs:t})=>[`${t.acosh} = acosh(${n.a});`]}}class _r \
extends \
On{constructor({x:n}){super({a:n,outTypeFunc:n=>n,outKey:\"atanh\"}),this.sta\
tements=({inputs:n,outputs:t})=>[`${t.atanh} = \
atanh(${n.a});`]}}Symbol.toStringTag;const Tr=class \
t{constructor({renderer:n}={}){this.renderer=n,this.capacity=0,this.count=0}d\
ispose(){this.target&&(this.target.dispose(),this.target=void \
0)}ensureBuffer(n,t){const \
e=4*(Math.ceil(Math.max(1,n)/cn)*cn);if(t.byteLength>=e)return t;const A=new \
ArrayBuffer(e);if(t instanceof ArrayBuffer)return A;return \
new(0,t.constructor)(A)}ensureCapacity(t){const{width:e,height:A,depth:s,maxS\
plats:a}=Me(t);(!this.target||a>this.capacity)&&(this.dispose(),this.capacity\
=a,this.target=new \
n.WebGLArrayRenderTarget(e,A,s,{depthBuffer:!1,stencilBuffer:!1,generateMipma\
ps:!1,magFilter:n.NearestFilter,minFilter:n.NearestFilter}),this.target.textu\
re.format=n.RGBAFormat,this.target.texture.type=n.UnsignedByteType,this.targe\
t.texture.internalFormat=\"RGBA8\",this.target.scissorTest=!0)}prepareProgram\
Material(n){let e=t.readbackProgram.get(n);if(!e){const \
A=Vn({index:\"int\"},{rgba8:\"vec4\"},(({index:t})=>{n.inputs.index=t;return{\
rgba8:new \
mt({rgba8:n.outputs.rgba8})}}));t.programTemplate||(t.programTemplate=new \
Ve(\"precision highp float;\\nprecision highp int;\\nprecision highp \
sampler2D;\\nprecision highp usampler2D;\\nprecision highp \
isampler2D;\\nprecision highp sampler2DArray;\\nprecision highp \
usampler2DArray;\\nprecision highp isampler2DArray;\\nprecision highp \
sampler3D;\\nprecision highp usampler3D;\\nprecision highp \
isampler3D;\\n\\n#include <splatDefines>\\n\\nuniform uint \
targetLayer;\\nuniform int targetBase;\\nuniform int targetCount;\\n\\nout \
vec4 target;\\n\\n{{ GLOBALS }}\\n\\nvoid computeReadback(int index) {\\n    \
{{ STATEMENTS }}\\n}\\n\\nvoid main() {\\n    int targetIndex = \
int(targetLayer << SPLAT_TEX_LAYER_BITS) + int(uint(gl_FragCoord.y) << \
SPLAT_TEX_WIDTH_BITS) + int(gl_FragCoord.x);\\n    int index = targetIndex - \
targetBase;\\n\\n    if ((index >= 0) && (index < targetCount)) {\\n        \
computeReadback(index);\\n    } else {\\n        target = vec4(0.0, 0.0, 0.0, \
0.0);\\n    }\\n}\")),e=new \
Ke({graph:A,inputs:{index:\"index\"},outputs:{rgba8:\"target\"},template:t.pr\
ogramTemplate}),Object.assign(e.uniforms,{targetLayer:{value:0},targetBase:{v\
alue:0},targetCount:{value:0}}),t.readbackProgram.set(n,e)}const \
A=e.prepareMaterial();return \
t.fullScreenQuad.material=A,{program:e,material:A}}saveRenderState(n){return{\
xrEnabled:n.xr.enabled,autoClear:n.autoClear}}resetRenderState(n,t){n.setRend\
erTarget(null),n.xr.enabled=t.xrEnabled,n.autoClear=t.autoClear}process({coun\
t:n,material:e}){const A=this.renderer;if(!A)throw new Error(\"No \
renderer\");if(!this.target)throw new Error(\"No target\");const \
s=cn*ln;e.uniforms.targetBase.value=0,e.uniforms.targetCount.value=n;let \
a=0;for(;a<n;){const \
r=Math.floor(a/s),i=r*s,o=Math.min(ln,Math.ceil((n-i)/cn));e.uniforms.targetL\
ayer.value=r,this.target.scissor.set(0,0,cn,o),A.setRenderTarget(this.target,\
r),A.xr.enabled=!1,A.autoClear=!1,t.fullScreenQuad.render(A),a+=cn*o}this.cou\
nt=n}async read({readback:n}){const t=this.renderer;if(!t)throw new \
Error(\"No renderer\");if(!this.target)throw new Error(\"No target\");const \
e=Math.ceil(this.count/cn)*cn;if(n.byteLength<4*e)throw new Error(`Readback \
buffer too small: ${n.byteLength} < ${4*e}`);const A=new Uint8Array(n \
instanceof ArrayBuffer?n:n.buffer),s=cn*ln;let a=0;const \
r=[];for(;a<this.count;){const \
n=Math.floor(a/s),e=n*s,i=Math.min(ln,Math.ceil((this.count-e)/cn));t.setRend\
erTarget(this.target,n);const o=cn*i*4,c=A.subarray(4*e,4*e+o),l=null==t?void \
0:t.readRenderTargetPixelsAsync(this.target,0,0,cn,i,c);r.push(l),a+=cn*i}ret\
urn \
Promise.all(r).then((()=>n))}render({reader:n,count:t,renderer:e}){if(this.re\
nderer=e||this.renderer,!this.renderer)throw new Error(\"No \
renderer\");this.ensureCapacity(t);const{program:A,material:s}=this.preparePr\
ogramMaterial(n);A.update();const \
a=this.saveRenderState(this.renderer);this.process({count:t,material:s}),this\
.resetRenderState(this.renderer,a)}async \
readback({readback:n}){if(!this.renderer)throw new Error(\"No \
renderer\");const \
t=this.saveRenderState(this.renderer),e=this.read({readback:n});return \
this.resetRenderState(this.renderer,t),e}async \
renderReadback({reader:n,count:t,renderer:e,readback:A}){if(this.renderer=e||\
this.renderer,!this.renderer)throw new Error(\"No \
renderer\");this.ensureCapacity(t);const{program:s,material:a}=this.preparePr\
ogramMaterial(n);s.update();const \
r=this.saveRenderState(this.renderer);this.process({count:t,material:a});cons\
t i=this.read({readback:A});return \
this.resetRenderState(this.renderer,r),i}getTexture(){var n;return \
null==(n=this.target)?void \
0:n.texture}};Tr.programTemplate=null,Tr.readbackProgram=new \
Map,Tr.fullScreenQuad=new h(new n.RawShaderMaterial({visible:!1}));let \
Fr=Tr;const Nr=class \
t{constructor(n={}){this.capacity=0,this.count=0,this.array=null,this.readbac\
k=null,this.source=null,this.needsUpdate=!0,this.dyno=new \
xt({key:\"rgbaArray\",type:Gr,globals:()=>[Ur],value:{texture:t.getEmpty(),co\
unt:0},update:n=>{var e;return n.texture=(null==(e=this.readback)?void \
0:e.getTexture())??this.source??t.getEmpty(),n.count=this.count,n}}),n.array?\
(this.array=n.array,this.capacity=Math.floor(this.array.length/4),this.capaci\
ty=Math.floor(this.capacity/cn)*cn,this.count=Math.min(this.capacity,n.count?\
?Number.POSITIVE_INFINITY)):(this.capacity=n.capacity??0,this.count=0)}dispos\
e(){this.readback&&(this.readback.dispose(),this.readback=null),this.source&&\
(this.source.dispose(),this.source=null)}ensureCapacity(n){var \
t;if(!this.array||n>((null==(t=this.array)?void \
0:t.length)??0)/4){this.capacity=Me(n).maxSplats;const t=new \
Uint8Array(4*this.capacity);this.array&&t.set(this.array),this.array=t}return \
this.array}getTexture(){var n;let e=null==(n=this.readback)?void \
0:n.getTexture();return(this.source||this.array)&&(e=this.maybeUpdateSource()\
),e??t.getEmpty()}maybeUpdateSource(){if(!this.array)throw new Error(\"No \
array\");if(this.needsUpdate||!this.source){if(this.needsUpdate=!1,this.sourc\
e){const{width:n,height:t,depth:e}=this.source.image;this.capacity!==n*t*e&&(\
this.source.dispose(),this.source=null)}if(this.source)this.array.buffer!==th\
is.source.image.data.buffer&&(this.source.image.data=new \
Uint8Array(this.array.buffer));else{const{width:t,height:e,depth:A}=Me(this.c\
apacity);this.source=new \
n.DataArrayTexture(this.array,t,e,A),this.source.format=n.RGBAFormat,this.sou\
rce.type=n.UnsignedByteType,this.source.internalFormat=\"RGBA8\",this.source.\
needsUpdate=!0}this.source.needsUpdate=!0}return \
this.source}render({reader:n,count:t,renderer:e}){this.readback||(this.readba\
ck=new \
Fr({renderer:e})),this.readback.render({reader:n,count:t,renderer:e}),this.ca\
pacity=this.readback.capacity,this.count=this.readback.count}fromPackedSplats\
({packedSplats:n,base:e,count:A,renderer:s}){const{dynoSplats:a,dynoBase:r,dy\
noCount:i,reader:o}=t.makeDynos();return \
a.packedSplats=n,r.value=e,i.value=A,this.render({reader:o,count:A,renderer:s\
}),this}async read(){if(!this.readback)throw new Error(\"No \
readback\");(!this.array||this.array.length<4*this.count)&&(this.array=new \
Uint8Array(4*this.capacity));return(await \
this.readback.readback({readback:this.array})).subarray(0,4*this.count)}stati\
c getEmpty(){if(!t.emptySource){const e=new Uint8Array(4);t.emptySource=new \
n.DataArrayTexture(e,1,1,1),t.emptySource.format=n.RGBAFormat,t.emptySource.t\
ype=n.UnsignedByteType,t.emptySource.internalFormat=\"RGBA8\",t.emptySource.n\
eedsUpdate=!0}return t.emptySource}static makeDynos(){if(!t.dynos){const \
n=new Yi,e=new vt({value:0}),A=new \
vt({value:0}),s=Vn({index:\"int\"},{rgba8:\"vec4\"},(({index:t})=>{if(!t)thro\
w new Error(\"index is undefined\");t=xA(t,e);const \
s=At(n,t,e,A);return{rgba8:st(s).outputs.rgba}}));t.dynos={dynoSplats:n,dynoB\
ase:e,dynoCount:A,reader:s}}return \
t.dynos}};Nr.emptySource=null,Nr.dynos=null;let Rr=Nr;const \
Gr={type:\"RgbaArray\"},Ur=Xn(\"\\n  struct RgbaArray {\\n    sampler2DArray \
texture;\\n    int count;\\n  };\\n\");function \
Yr(n){switch(n){case\"all\":return 0;case\"plane\":return \
1;case\"sphere\":return 2;case\"box\":return 3;case\"ellipsoid\":return \
4;case\"cylinder\":return 5;case\"capsule\":return \
6;case\"infinite_cone\":return 7;default:throw new Error(`Unknown SDF type: \
${n}`)}}function qr(n){switch(n){case\"multiply\":return \
0;case\"set_rgb\":return 1;case\"add_rgba\":return 2;default:throw new \
Error(`Unknown blend mode: ${n}`)}}class zr extends \
n.Object3D{constructor(t={}){super();const{type:e,invert:A,opacity:s,color:a,\
displace:r,radius:i}=t;this.type=e??\"sphere\",this.invert=A??!1,this.opacity\
=s??1,this.color=a??new n.Color(1,1,1),this.displace=r??new \
n.Vector3(0,0,0),this.radius=i??0}}const Lr=class t extends \
n.Object3D{constructor(n={}){const{name:e,rgbaBlendMode:A=\"multiply\",sdfSmo\
oth:s=0,softEdge:a=0,invert:r=!1,sdfs:i=null}=n;super(),this.rgbaBlendMode=A,\
this.sdfSmooth=s,this.softEdge=a,this.invert=r,this.sdfs=i,this.ordering=t.ne\
xtOrdering++,this.name=e??`Edit \
${this.ordering}`}addSdf(n){null==this.sdfs&&(this.sdfs=[]),this.sdfs.include\
s(n)||this.sdfs.push(n)}removeSdf(n){null!=this.sdfs&&(this.sdfs=this.sdfs.fi\
lter((t=>t!==n)))}};Lr.nextOrdering=1;let Jr=Lr;class \
Hr{constructor({maxSdfs:n,maxEdits:t}){this.maxSdfs=Math.max(16,n??0),this.nu\
mSdfs=0,this.sdfData=new Uint32Array(8*this.maxSdfs*4),this.sdfFloatData=new \
Float32Array(this.sdfData.buffer),this.sdfTexture=this.newSdfTexture(this.sdf\
Data,this.maxSdfs),this.dynoSdfArray=new \
xt({key:\"sdfArray\",type:Kr,globals:()=>[Vr],value:{numSdfs:0,sdfTexture:thi\
s.sdfTexture},update:n=>(n.numSdfs=this.numSdfs,n.sdfTexture=this.sdfTexture,\
n)}),this.maxEdits=Math.max(16,t??0),this.numEdits=0,this.editData=new \
Uint32Array(4*this.maxEdits),this.editFloatData=new \
Float32Array(this.editData.buffer),this.dynoNumEdits=new \
vt({value:0}),this.dynoEdits=this.newEdits(this.editData,this.maxEdits)}newSd\
fTexture(t,e){const A=new \
n.DataTexture(t,8,e,n.RGBAIntegerFormat,n.UnsignedIntType);return \
A.internalFormat=\"RGBA32UI\",A.needsUpdate=!0,A}newEdits(n,t){return new \
xt({key:\"edits\",type:\"uvec4\",count:t,globals:()=>[$r],value:n})}ensureCap\
acity({maxSdfs:n,maxEdits:t}){let e=!1;return \
n>this.sdfTexture.image.height&&(this.sdfTexture.dispose(),this.maxSdfs=Math.\
max(2*this.maxSdfs,n),this.sdfData=new \
Uint32Array(8*this.maxSdfs*4),this.sdfFloatData=new \
Float32Array(this.sdfData.buffer),this.sdfTexture=this.newSdfTexture(this.sdf\
Data,this.maxSdfs)),t>(this.dynoEdits.count??0)&&(this.maxEdits=Math.max(2*th\
is.maxEdits,t),this.editData=new \
Uint32Array(4*this.maxEdits),this.editFloatData=new \
Float32Array(this.editData.buffer),this.dynoEdits=this.newEdits(this.editData\
,this.maxEdits),e=!0),e}updateEditData(n,t){const \
e=this.editData[n]!==t;return \
this.editData[n]=t,e}updateEditFloatData(n,t){jr[0]=t;const \
e=this.editFloatData[n]!==jr[0];return \
e&&(this.editFloatData[n]=jr[0]),e}encodeEdit(n,{sdfFirst:t,sdfCount:e,invert\
:A,rgbaBlendMode:s,softEdge:a,sdfSmooth:r}){const i=4*n;let o=!1;return \
o=this.updateEditData(i+0,s|(A?256:0))||o,o=this.updateEditData(i+1,t|e<<16)|\
|o,o=this.updateEditFloatData(i+2,a)||o,o=this.updateEditFloatData(i+3,r)||o,\
o}updateSdfData(n,t){const e=this.sdfData[n]!==t;return \
this.sdfData[n]=t,e}updateSdfFloatData(n,t){jr[0]=t;const \
e=this.sdfFloatData[n]!==jr[0];return \
e&&(this.sdfFloatData[n]=jr[0]),e}encodeSdf(n,{sdfType:t,invert:e,center:A,qu\
aternion:s,scale:a,sizes:r},i){const o=32*n,c=t|(e?256:0);let \
l=!1;l=this.updateSdfFloatData(o+0,(null==A?void \
0:A.x)??0)||l,l=this.updateSdfFloatData(o+1,(null==A?void \
0:A.y)??0)||l,l=this.updateSdfFloatData(o+2,(null==A?void \
0:A.z)??0)||l,l=this.updateSdfData(o+3,c)||l,l=this.updateSdfFloatData(o+4,(n\
ull==s?void 0:s.x)??0)||l,l=this.updateSdfFloatData(o+5,(null==s?void \
0:s.y)??0)||l,l=this.updateSdfFloatData(o+6,(null==s?void \
0:s.z)??0)||l,l=this.updateSdfFloatData(o+7,(null==s?void \
0:s.w)??0)||l,l=this.updateSdfFloatData(o+8,(null==a?void \
0:a.x)??0)||l,l=this.updateSdfFloatData(o+9,(null==a?void \
0:a.y)??0)||l,l=this.updateSdfFloatData(o+10,(null==a?void \
0:a.z)??0)||l,l=this.updateSdfData(o+11,0)||l,l=this.updateSdfFloatData(o+12,\
(null==r?void 0:r.x)??0)||l,l=this.updateSdfFloatData(o+13,(null==r?void \
0:r.y)??0)||l,l=this.updateSdfFloatData(o+14,(null==r?void \
0:r.z)??0)||l,l=this.updateSdfFloatData(o+15,(null==r?void \
0:r.w)??0)||l;const u=Math.min(4,i.length);for(let n=0;n<u;++n){const \
t=o+16+4*n;l=this.updateSdfFloatData(t+0,i[n].x)||l,l=this.updateSdfFloatData\
(t+1,i[n].y)||l,l=this.updateSdfFloatData(t+2,i[n].z)||l,l=this.updateSdfFloa\
tData(t+3,i[n].w)||l}return l}update(t){const \
e=t.reduce(((n,{sdfs:t})=>n+t.length),0),A=this.ensureCapacity({maxEdits:t.le\
ngth,maxSdfs:e}),s=[new n.Vector4,new n.Vector4],a=new n.Vector3,r=new \
n.Quaternion,i=new n.Vector3,o=new n.Vector4;let \
c=0,l=A;t.length!==this.dynoNumEdits.value&&(this.dynoNumEdits.value=t.length\
,this.numEdits=t.length,l=!0);for(const[n,{edit:e,sdfs:A}]of \
t.entries()){l=this.encodeEdit(n,{sdfFirst:c,sdfCount:A.length,invert:e.inver\
t,rgbaBlendMode:qr(e.rgbaBlendMode),softEdge:e.softEdge,sdfSmooth:e.sdfSmooth\
})||l;let t=!1;for(const n of \
A){o.set(n.scale.x,n.scale.y,n.scale.z,n.radius),n.scale.setScalar(1),n.updat\
eMatrixWorld();n.matrixWorld.clone().invert().decompose(a,r,i),n.scale.set(o.\
x,o.y,o.z),n.updateMatrixWorld(),s[0].set(n.color.r,n.color.g,n.color.b,n.opa\
city),s[1].set(n.displace.x,n.displace.y,n.displace.z,1),t=this.encodeSdf(c,{\
sdfType:Yr(n.type),invert:n.invert,center:a,quaternion:r,scale:i,sizes:o},s)|\
|t,c+=1}this.numSdfs=c,t&&(this.sdfTexture.needsUpdate=!0),l||(l=t)}return{up\
dated:l,dynoUpdated:A}}modify(n){return function(n,t,e,A){const s=new \
Hn({inTypes:{gsplat:nt,sdfArray:Kr,numEdits:\"int\",rgbaDisplaceEdits:\"uvec4\
\"},outTypes:{gsplat:nt},globals:()=>[Vr,$r],inputs:{gsplat:n,sdfArray:t,numE\
dits:e,rgbaDisplaceEdits:A},statements:({inputs:n,outputs:t})=>{const{sdfArra\
y:e,numEdits:A,rgbaDisplaceEdits:s}=n,{gsplat:a}=t;return Zn(`\\n        ${a} \
= ${n.gsplat};\\n        if (isGsplatActive(${a}.flags)) {\\n          for \
(int editIndex = 0; editIndex < ${A}; ++editIndex) {\\n            \
applyPackedRgbaDisplaceEdit(\\n              ${s}[editIndex], \
${e}.sdfTexture, ${e}.numSdfs,\\n              ${a}.center, ${a}.rgba\\n      \
      );\\n          }\\n        }\\n      `)}});return \
s.outputs.gsplat}(n,this.dynoSdfArray,this.dynoNumEdits,this.dynoEdits)}}cons\
t Kr={type:\"SdfArray\"},Vr=Xn(\"\\n  struct SdfArray {\\n    int numSdfs;\\n \
   usampler2D sdfTexture;\\n  };\\n\\n  void unpackSdfArray(\\n    usampler2D \
sdfTexture, int sdfIndex, out uint flags,\\n    out vec3 center, out vec4 \
quaternion, out vec3 scale, out vec4 sizes,\\n    int numValues, out vec4 \
values[4]\\n  ) {\\n    uvec4 temp = texelFetch(sdfTexture, ivec2(0, \
sdfIndex), 0);\\n    flags = temp.w;\\n    center = \
vec3(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), \
uintBitsToFloat(temp.z));\\n\\n    temp = texelFetch(sdfTexture, ivec2(1, \
sdfIndex), 0);\\n    quaternion = vec4(uintBitsToFloat(temp.x), \
uintBitsToFloat(temp.y), uintBitsToFloat(temp.z), \
uintBitsToFloat(temp.w));\\n\\n    temp = texelFetch(sdfTexture, ivec2(2, \
sdfIndex), 0);\\n    scale = vec3(uintBitsToFloat(temp.x), \
uintBitsToFloat(temp.y), uintBitsToFloat(temp.z));\\n\\n    temp = \
texelFetch(sdfTexture, ivec2(3, sdfIndex), 0);\\n    sizes = \
vec4(uintBitsToFloat(temp.x), uintBitsToFloat(temp.y), \
uintBitsToFloat(temp.z), uintBitsToFloat(temp.w));\\n\\n    for (int i = 0; i \
< numValues; ++i) {\\n      temp = texelFetch(sdfTexture, ivec2(4 + i, \
sdfIndex), 0);\\n      values[i] = vec4(uintBitsToFloat(temp.x), \
uintBitsToFloat(temp.y), uintBitsToFloat(temp.z), \
uintBitsToFloat(temp.w));\\n    }\\n  }\\n\\n  const uint SDF_FLAG_TYPE = \
0xFFu;\\n  const uint SDF_FLAG_INVERT = 1u << 8u;\\n\\n  const uint \
SDF_TYPE_ALL = 0u;\\n  const uint SDF_TYPE_PLANE = 1u;\\n  const uint \
SDF_TYPE_SPHERE = 2u;\\n  const uint SDF_TYPE_BOX = 3u;\\n  const uint \
SDF_TYPE_ELLIPSOID = 4u;\\n  const uint SDF_TYPE_CYLINDER = 5u;\\n  const \
uint SDF_TYPE_CAPSULE = 6u;\\n  const uint SDF_TYPE_INFINITE_CONE = 7u;\\n\\n \
 float evaluateSdfArray(\\n    usampler2D sdfTexture, int numSdfs, int \
sdfFirst, int sdfCount, vec3 pos,\\n    float smoothK, int numValues, out \
vec4 outValues[4]\\n  ) {\\n    float distanceAccum = (smoothK == 0.0) ? 1.0 \
/ 0.0 : 0.0;\\n    float maxExp = -1.0 / 0.0;\\n    for (int i = 0; i < \
numValues; ++i) {\\n        outValues[i] = vec4(0.0);\\n    }\\n\\n    uint \
flags;\\n    vec3 center, scale;\\n    vec4 quaternion, sizes;\\n    vec4 \
values[4];\\n\\n    int sdfLast = min(sdfFirst + sdfCount, numSdfs);\\n    \
for (int index = sdfFirst; index < sdfLast; ++index) {\\n      \
unpackSdfArray(sdfTexture, index, flags, center, quaternion, scale, sizes, \
numValues, values);\\n      uint sdfType = flags & SDF_FLAG_TYPE;\\n      \
vec3 sdfPos = quatVec(quaternion, pos * scale) + center;\\n\\n      float \
distance;\\n      switch (sdfType) {\\n        case SDF_TYPE_ALL:\\n          \
distance = -1.0 / 0.0;\\n          break;\\n        case SDF_TYPE_PLANE: {\\n \
         distance = sdfPos.z;\\n          break;\\n        }\\n        case \
SDF_TYPE_SPHERE: {\\n          distance = length(sdfPos) - sizes.w;\\n        \
  break;\\n        }\\n        case SDF_TYPE_BOX: {\\n          vec3 q = \
abs(sdfPos) - sizes.xyz + sizes.w;\\n          distance = length(max(q, 0.0)) \
+ min(max(q.x, max(q.y, q.z)), 0.0) - sizes.w;\\n          break;\\n        \
}\\n        case SDF_TYPE_ELLIPSOID: {\\n          vec3 sizes = sizes.xyz;\\n \
         float k0 = length(sdfPos / sizes);\\n          float k1 = \
length(sdfPos / dot(sizes, sizes));\\n          distance = k0 * (k0 - 1.0) / \
k1;\\n          break;\\n        }\\n        case SDF_TYPE_CYLINDER: {\\n     \
     vec2 d = abs(vec2(length(sdfPos.xz), sdfPos.y)) - sizes.wy;\\n          \
distance = min(max(d.x, d.y), 0.0) + length(max(d, 0.0));\\n          \
break;\\n        }\\n        case SDF_TYPE_CAPSULE: {\\n          sdfPos.y -= \
clamp(sdfPos.y, -0.5 * sizes.y, 0.5 * sizes.y);\\n          distance = \
length(sdfPos) - sizes.w;\\n          break;\\n        }\\n        case \
SDF_TYPE_INFINITE_CONE: {\\n          float angle = 0.25 * PI * sizes.w;\\n   \
       vec2 c = vec2(sin(angle), cos(angle));\\n          vec2 q = \
vec2(length(sdfPos.xy), -sdfPos.z);\\n          float d = length(q - c * \
max(dot(q, c), 0.0));\\n          distance = d * (((q.x * c.y - q.y * c.x) < \
0.0) ? -1.0 : 1.0);\\n          break;\\n        }\\n      }\\n\\n      if \
((flags & SDF_FLAG_INVERT) != 0u) {\\n        distance = -distance;\\n      \
}\\n\\n      if (smoothK == 0.0) {\\n        if (distance < distanceAccum) \
{\\n          distanceAccum = distance;\\n          for (int i = 0; i < \
numValues; ++i) {\\n            outValues[i] = values[i];\\n          }\\n    \
    }\\n      } else {\\n        float scaledDistance = -distance / \
smoothK;\\n        if (scaledDistance > maxExp) {\\n          float scale = \
exp(maxExp - scaledDistance);\\n          distanceAccum *= scale;\\n          \
for (int i = 0; i < numValues; ++i) {\\n            outValues[i] *= scale;\\n \
         }\\n          maxExp = scaledDistance;\\n        }\\n\\n        \
float weight = exp(scaledDistance - maxExp);\\n        distanceAccum += \
weight;\\n        for (int i = 0; i < numValues; ++i) {\\n          \
outValues[i] += weight * values[i];\\n        }\\n      }\\n    }\\n\\n    if \
(smoothK == 0.0) {\\n      return distanceAccum;\\n    } else {\\n      // \
Very distant SDFs may result in 0 accumulation\\n      if (distanceAccum == \
0.0) {\\n        return 1.0 / 0.0;\\n      }\\n      for (int i = 0; i < \
numValues; ++i) {\\n        outValues[i] /= distanceAccum;\\n      }\\n      \
return (-log(distanceAccum) - maxExp) * smoothK;\\n    }\\n  }\\n\\n  float \
modulateSdfArray(\\n    usampler2D sdfTexture, int numSdfs, int sdfFirst, int \
sdfCount, vec3 pos,\\n    float smoothK, int numValues, out vec4 \
values[4],\\n    float softEdge, bool invert\\n  ) {\\n    float distance = \
evaluateSdfArray(sdfTexture, numSdfs, sdfFirst, sdfCount, pos, smoothK, \
numValues, values);\\n    if (invert) {\\n      distance = -distance;\\n    \
}\\n\\n    return (softEdge == 0.0) ? ((distance < 0.0) ? 1.0 : 0.0)\\n      \
: clamp(-distance / softEdge + 0.5, 0.0, 1.0);\\n  }\\n\"),$r=Xn(\"\\n  const \
uint EDIT_FLAG_BLEND = 0xFFu;\\n  const uint EDIT_BLEND_MULTIPLY = 0u;\\n  \
const uint EDIT_BLEND_SET_RGB = 1u;\\n  const uint EDIT_BLEND_ADD_RGBA = \
2u;\\n  const uint EDIT_FLAG_INVERT = 0x100u;\\n\\n  void decodeEdit(\\n    \
uvec4 packedEdit, out int sdfFirst, out int sdfCount,\\n    out bool invert, \
out uint rgbaBlendMode, out float softEdge, out float sdfSmooth\\n  ) {\\n    \
rgbaBlendMode = packedEdit.x & EDIT_FLAG_BLEND;\\n    invert = (packedEdit.x \
& EDIT_FLAG_INVERT) != 0u;\\n\\n    sdfFirst = int(packedEdit.y & \
0xFFFFu);\\n    sdfCount = int(packedEdit.y >> 16u);\\n\\n    softEdge = \
uintBitsToFloat(packedEdit.z);\\n    sdfSmooth = \
uintBitsToFloat(packedEdit.w);\\n  }\\n\\n  void applyRgbaDisplaceEdit(\\n    \
usampler2D sdfTexture, int numSdfs, int sdfFirst, int sdfCount, inout vec3 \
pos,\\n    float smoothK, float softEdge, bool invert, uint rgbaBlendMode, \
inout vec4 rgba\\n  ) {\\n    vec4 values[4];\\n    float modulate = \
modulateSdfArray(sdfTexture, numSdfs, sdfFirst, sdfCount, pos, smoothK, 2, \
values, softEdge, invert);\\n    // On Android, moving values[0] is necessary \
to work around a compiler bug.\\n    vec4 sdfRgba = values[0];\\n    vec4 \
sdfDisplaceScale = values[1];\\n\\n    vec4 target;\\n    switch \
(rgbaBlendMode) {\\n      case EDIT_BLEND_MULTIPLY:\\n        target = rgba * \
sdfRgba;\\n        break;\\n      case EDIT_BLEND_SET_RGB:\\n        target = \
vec4(sdfRgba.rgb, rgba.a * sdfRgba.a);\\n        break;\\n      case \
EDIT_BLEND_ADD_RGBA:\\n        target = rgba + sdfRgba;\\n        break;\\n   \
   default:\\n        // Debug output if blend mode not set\\n        target \
= vec4(fract(pos), 1.0);\\n    }\\n    rgba = mix(rgba, target, modulate);\\n \
   pos += sdfDisplaceScale.xyz * modulate;\\n  }\\n\\n  void \
applyPackedRgbaDisplaceEdit(uvec4 packedEdit, usampler2D sdfTexture, int \
numSdfs, inout vec3 pos, inout vec4 rgba) {\\n    int sdfFirst, sdfCount;\\n  \
  bool invert;\\n    uint rgbaBlendMode;\\n    float softEdge, sdfSmooth;\\n  \
  decodeEdit(packedEdit, sdfFirst, sdfCount, invert, rgbaBlendMode, softEdge, \
sdfSmooth);\\n    applyRgbaDisplaceEdit(sdfTexture, numSdfs, sdfFirst, \
sdfCount, pos, sdfSmooth, softEdge, invert, rgbaBlendMode, rgba);\\n  \
}\\n\");const jr=new Float32Array(1);class \
Zr{constructor(n){this.modifier=n,this.cache=new Map}apply(n){let \
t=this.cache.get(n);return \
t||(t=Vn({index:\"int\"},{gsplat:nt},(({index:t})=>{const{gsplat:e}=n.apply({\
index:t});return \
this.modifier.apply({gsplat:e})})),this.cache.set(n,t)),t}}class \
Xr{constructor(){this.scale=new \
St({value:Number.NEGATIVE_INFINITY}),this.rotate=new qt({value:new \
n.Quaternion(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,Number.POSITIV\
E_INFINITY,Number.POSITIVE_INFINITY)}),this.translate=new Rt({value:new \
n.Vector3(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,Number.POSITIVE_I\
NFINITY)})}apply(n){return \
rr(n,{scale:this.scale,rotate:this.rotate,translate:this.translate})}applyDir\
(n){return ir(n,{rotate:this.rotate})}applyGsplat(n){return \
it(n,{scale:this.scale,rotate:this.rotate,translate:this.translate})}updateFr\
omMatrix(t){const e=new n.Vector3,A=new n.Quaternion,s=new \
n.Vector3;t.decompose(s,A,e);const a=(e.x+e.y+e.z)/3;let r=!1;return \
a!==this.scale.value&&(this.scale.value=a,r=!0),s.equals(this.translate.value\
)||(this.translate.value.copy(s),r=!0),A.equals(this.rotate.value)||(this.rot\
ate.value.copy(A),r=!0),r}update(n){return \
n.updateMatrixWorld(),this.updateFromMatrix(n.matrixWorld)}}class Or extends \
n.Object3D{constructor({numSplats:n,generator:t,construct:e,update:A}){if(sup\
er(),this.numSplats=n??0,this.generator=t,this.frameUpdate=A,this.version=0,e\
){const n=e(this);Object.assign(this,n)}}updateVersion(){this.version+=1}set \
needsUpdate(n){n&&this.updateVersion()}}const Pr=class t extends \
Or{constructor(t={}){const e={transform:new Xr,viewToWorld:new \
Xr,worldToView:new Xr,viewToObject:new Xr,recolor:new qt({value:new \
n.Vector4(Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,Number.NEGATIVE_I\
NFINITY,Number.NEGATIVE_INFINITY)}),time:new St({value:0}),deltaTime:new \
St({value:0})};if(super({update:({time:n,deltaTime:t,viewToWorld:e,globalEdit\
s:A})=>this.update({time:n,deltaTime:t,viewToWorld:e,globalEdits:A})}),this.i\
sInitialized=!1,this.recolor=new \
n.Color(1,1,1),this.opacity=1,this.enableViewToObject=!1,this.enableViewToWor\
ld=!1,this.enableWorldToView=!1,this.skinning=null,this.edits=null,this.rgbaD\
isplaceEdits=null,this.splatRgba=null,this.maxSh=3,this.packedSplats=t.packed\
Splats??new \
Ui,this.packedSplats.splatEncoding=t.splatEncoding??{...Ri},this.numSplats=th\
is.packedSplats.numSplats,this.editable=t.editable??!0,this.onFrame=t.onFrame\
,this.context=e,this.objectModifier=t.objectModifier,this.worldModifier=t.wor\
ldModifier,this.updateGenerator(),t.url||t.fileBytes||t.constructSplats||t.pa\
ckedSplats&&!t.packedSplats.isInitialized)this.initialized=this.asyncInitiali\
ze(t).then((async()=>{if(this.updateGenerator(),this.isInitialized=!0,t.onLoa\
d){const n=t.onLoad(this);n instanceof Promise&&await n}return this}));else \
if(this.isInitialized=!0,this.initialized=Promise.resolve(this),t.onLoad){con\
st n=t.onLoad(this);n instanceof \
Promise&&(this.initialized=n.then((()=>this)))}this.add(function(){const \
t=new n.Mesh(Ai,si);return \
t.frustumCulled=!1,t.onBeforeRender=function(n,t){if(!t.isScene)return void \
this.removeFromParent();let e=!1;t.traverse((n=>{n instanceof \
Xi&&(e=!0)})),e||t.add(new \
Xi({renderer:n})),this.removeFromParent()},t}())}async \
asyncInitialize(n){const{url:t,fileBytes:e,fileType:A,fileName:s,maxSplats:a,\
constructSplats:r,splatEncoding:i}=n;if(t||e||r){const \
n={url:t,fileBytes:e,fileType:A,fileName:s,maxSplats:a,construct:r,splatEncod\
ing:i};this.packedSplats.reinitialize(n)}this.packedSplats&&(await \
this.packedSplats.initialized,this.numSplats=this.packedSplats.numSplats,this\
.updateGenerator())}static async staticInitialize(){await \
An(),t.isStaticInitialized=!0}pushSplat(n,t,e,A,s){this.packedSplats.pushSpla\
t(n,t,e,A,s)}forEachSplat(n){this.packedSplats.forEachSplat(n)}dispose(){this\
.packedSplats.dispose()}getBoundingBox(t=!0){if(!this.initialized)throw new \
Error(\"Cannot get bounding box before SplatMesh is initialized\");const \
e=new \
n.Vector3(Number.POSITIVE_INFINITY,Number.POSITIVE_INFINITY,Number.POSITIVE_I\
NFINITY),A=new \
n.Vector3(Number.NEGATIVE_INFINITY,Number.NEGATIVE_INFINITY,Number.NEGATIVE_I\
NFINITY),s=new \
n.Vector3,a=[-1,1];this.packedSplats.forEachSplat(((n,r,i,o,c,l)=>{if(t)e.min\
(r),A.max(r);else for(const n of a)for(const t of a)for(const c of \
a)s.set(n*i.x,t*i.y,c*i.z),s.applyQuaternion(o),s.add(r),e.min(s),A.max(s)}))\
;return new \
n.Box3(e,A)}constructGenerator(n){const{transform:t,viewToObject:e,recolor:A}\
=n,s=Vn({index:\"int\"},{gsplat:nt},(({index:n})=>{if(!n)throw new \
Error(\"index is undefined\");let \
s=et(this.packedSplats.dyno,n);if(this.maxSh>=1){const{sh1Texture:n,sh2Textur\
e:t,sh3Texture:A}=this.ensureShTextures();if(n){let \
a=function(n,t){const{x:e,y:A}=Ca(t).outputs,s=bA(xA(e,A),qn(\"float\",.5)),a\
=bA(wA(A,e),qn(\"float\",.5));return xA(s,bA(n,a))};const \
r=e.translate,{center:i}=st(s).outputs,o=da(wA(i,r)),c=function(n,t,e){return \
$n({inTypes:{gsplat:nt,sh1:\"usampler2DArray\",viewDir:\"vec3\"},outTypes:{rg\
b:\"vec3\"},inputs:{gsplat:n,sh1:t,viewDir:e},globals:()=>[ot,ni],statements:\
({inputs:n,outputs:t})=>Zn(`\\n        if (isGsplatActive(${n.gsplat}.flags)) \
{\\n          ${t.rgb} = evaluateSH1(${n.gsplat}, ${n.sh1}, ${n.viewDir});\\n \
       } else {\\n          ${t.rgb} = vec3(0.0);\\n        }\\n      \
`)}).outputs.rgb}(s,n,o);let \
l=a(c,this.packedSplats.dynoSh1MinMax);if(this.maxSh>=2&&t){const \
n=function(n,t,e){return \
$n({inTypes:{gsplat:nt,sh2:\"usampler2DArray\",viewDir:\"vec3\"},outTypes:{rg\
b:\"vec3\"},inputs:{gsplat:n,sh2:t,viewDir:e},globals:()=>[ot,ti],statements:\
({inputs:n,outputs:t})=>Zn(`\\n        if (isGsplatActive(${n.gsplat}.flags)) \
{\\n          ${t.rgb} = evaluateSH2(${n.gsplat}, ${n.sh2}, ${n.viewDir});\\n \
       } else {\\n          ${t.rgb} = vec3(0.0);\\n        }\\n      \
`)}).outputs.rgb}(s,t,o);l=xA(l,a(n,this.packedSplats.dynoSh2MinMax))}if(this\
.maxSh>=3&&A){const n=function(n,t,e){return \
$n({inTypes:{gsplat:nt,sh3:\"usampler2DArray\",viewDir:\"vec3\"},outTypes:{rg\
b:\"vec3\"},inputs:{gsplat:n,sh3:t,viewDir:e},globals:()=>[ot,ei],statements:\
({inputs:n,outputs:t})=>Zn(`\\n        if (isGsplatActive(${n.gsplat}.flags)) \
{\\n          ${t.rgb} = evaluateSH3(${n.gsplat}, ${n.sh3}, ${n.viewDir});\\n \
       } else {\\n          ${t.rgb} = vec3(0.0);\\n        }\\n      \
`)}).outputs.rgb}(s,A,o);l=xA(l,a(n,this.packedSplats.dynoSh3MinMax))}let{rgb\
a:u}=st(s).outputs;u=xA(u,fa(l,qn(\"float\",0))),s=at({gsplat:s,rgba:u})}}if(\
this.splatRgba){const t=function(n,t){return new \
Hn({inTypes:{rgba:Gr,index:\"int\"},outTypes:{rgba:\"vec4\"},inputs:{rgba:n,i\
ndex:t},globals:()=>[Ur],statements:({inputs:n,outputs:t})=>Zn(`\\n        if \
((index >= 0) && (index < ${n.rgba}.count)) {\\n          ${t.rgba} = \
texelFetch(${n.rgba}.texture, splatTexCoord(index), 0);\\n        } else {\\n \
         ${t.rgba} = vec4(0.0, 0.0, 0.0, 0.0);\\n        }\\n      \
`)}).outputs.rgba}(this.splatRgba.dyno,n);s=at({gsplat:s,rgba:t})}this.skinni\
ng&&(s=this.skinning.modify(s)),this.objectModifier&&(s=this.objectModifier.a\
pply({gsplat:s}).gsplat),s=t.applyGsplat(s);const \
a=bA(A,st(s).outputs.rgba);return \
s=at({gsplat:s,rgba:a}),this.rgbaDisplaceEdits&&(s=this.rgbaDisplaceEdits.mod\
ify(s)),this.worldModifier&&(s=this.worldModifier.apply({gsplat:s}).gsplat),{\
gsplat:s}}));this.generator=s}updateGenerator(){this.constructGenerator(this.\
context)}update({time:e,viewToWorld:A,deltaTime:s,globalEdits:a}){var \
r;this.numSplats=this.packedSplats.numSplats,this.context.time.value=e,this.c\
ontext.deltaTime.value=s,t.dynoTime.value=e;const{transform:i,viewToObject:o,\
recolor:c}=this.context;let \
l=i.update(this);this.context.viewToWorld.updateFromMatrix(A)&&this.enableVie\
wToWorld&&(l=!0);const \
u=A.clone().invert();this.context.worldToView.updateFromMatrix(u)&&this.enabl\
eWorldToView&&(l=!0);const g=(new \
n.Matrix4).compose(i.translate.value,i.rotate.value,(new \
n.Vector3).setScalar(i.scale.value)).invert().multiply(A);o.updateFromMatrix(\
g)&&(this.enableViewToObject||this.packedSplats.extra.sh1)&&(l=!0);const \
h=new \
n.Vector4(this.recolor.r,this.recolor.g,this.recolor.b,this.opacity);h.equals\
(c.value)||(c.value.copy(h),l=!0);const \
p=this.editable?(this.edits??[]).concat(a):[];this.editable&&!this.edits&&thi\
s.traverseVisible((n=>{n instanceof \
Jr&&p.push(n)})),p.sort(((n,t)=>n.ordering-t.ordering));const \
I=p.map((n=>{if(null!=n.sdfs)return{edit:n,sdfs:n.sdfs};const t=[];return \
n.traverseVisible((n=>{n instanceof \
zr&&t.push(n)})),{edit:n,sdfs:t}}));if(I.length>0&&!this.rgbaDisplaceEdits){c\
onst \
n=I.length,t=I.reduce(((n,t)=>n+t.sdfs.length),0);this.rgbaDisplaceEdits=new \
Hr({maxEdits:n,maxSdfs:t}),this.updateGenerator()}if(this.rgbaDisplaceEdits){\
const \
n=this.rgbaDisplaceEdits.update(I);l||(l=n.updated),n.dynoUpdated&&this.updat\
eGenerator()}l&&this.updateVersion(),null==(r=this.onFrame)||r.call(this,{mes\
h:this,time:e,deltaTime:s})}raycast(t,e){var \
A,s;if(!this.packedSplats.packedArray||!this.packedSplats.numSplats)return;co\
nst{near:a,far:r,ray:i}=t,o=this.matrixWorld.clone().invert(),c=(new \
n.Matrix3).setFromMatrix4(o),l=i.origin.clone().applyMatrix4(o),u=i.direction\
.clone().applyMatrix3(c),g=new n.Vector3;o.decompose(new n.Vector3,new \
n.Quaternion,g),g.x,g.y,g.z;const \
h=function(n,t,e,A,s,a,r,i,o,c,l,u,g){return \
W.raycast_splats(n,t,e,A,s,a,r,i,o,c,l,u,g)}(l.x,l.y,l.z,u.x,u.y,u.z,a,r,this\
.packedSplats.numSplats,this.packedSplats.packedArray,!0,(null==(A=this.packe\
dSplats.splatEncoding)?void \
0:A.lnScaleMin)??sn,(null==(s=this.packedSplats.splatEncoding)?void \
0:s.lnScaleMax)??9);for(const n of h){const \
t=i.direction.clone().multiplyScalar(n).add(i.origin);e.push({distance:n,poin\
t:t,object:this})}}ensureShTextures(){if(!this.packedSplats.extra.sh1)return{\
};let t=this.packedSplats.extra.sh1Texture;if(!t){let \
e=this.packedSplats.extra.sh1;const{width:A,height:s,depth:a,maxSplats:r}=Me(\
e.length/2);if(e.length<2*r){const n=new \
Uint32Array(2*r);n.set(e),this.packedSplats.extra.sh1=n,e=n}const i=new \
n.DataArrayTexture(e,A,s,a);i.format=n.RGIntegerFormat,i.type=n.UnsignedIntTy\
pe,i.internalFormat=\"RG32UI\",i.needsUpdate=!0,t=new \
ee({value:i,key:\"sh1\"}),this.packedSplats.extra.sh1Texture=t}if(!this.packe\
dSplats.extra.sh2)return{sh1Texture:t};let \
e=this.packedSplats.extra.sh2Texture;if(!e){let \
t=this.packedSplats.extra.sh2;const{width:A,height:s,depth:a,maxSplats:r}=Me(\
t.length/4);if(t.length<4*r){const n=new \
Uint32Array(4*r);n.set(t),this.packedSplats.extra.sh2=n,t=n}const i=new \
n.DataArrayTexture(t,A,s,a);i.format=n.RGBAIntegerFormat,i.type=n.UnsignedInt\
Type,i.internalFormat=\"RGBA32UI\",i.needsUpdate=!0,e=new \
ee({value:i,key:\"sh2\"}),this.packedSplats.extra.sh2Texture=e}if(!this.packe\
dSplats.extra.sh3)return{sh1Texture:t,sh2Texture:e};let \
A=this.packedSplats.extra.sh3Texture;if(!A){let \
t=this.packedSplats.extra.sh3;const{width:e,height:s,depth:a,maxSplats:r}=Me(\
t.length/4);if(t.length<4*r){const n=new \
Uint32Array(4*r);n.set(t),this.packedSplats.extra.sh3=n,t=n}const i=new \
n.DataArrayTexture(t,e,s,a);i.format=n.RGBAIntegerFormat,i.type=n.UnsignedInt\
Type,i.internalFormat=\"RGBA32UI\",i.needsUpdate=!0,A=new \
ee({value:i,key:\"sh3\"}),this.packedSplats.extra.sh3Texture=A}return{sh1Text\
ure:t,sh2Texture:e,sh3Texture:A}}};Pr.staticInitialized=Pr.staticInitialize()\
,Pr.isStaticInitialized=!1,Pr.dynoTime=new St({value:0});let Wr=Pr;const \
ni=Xn(\"\\n  vec3 evaluateSH1(Gsplat gsplat, usampler2DArray sh1, vec3 \
viewDir) {\\n    // Extract sint7 values packed into 2 x uint32\\n    uvec2 \
packed = texelFetch(sh1, splatTexCoord(gsplat.index), 0).rg;\\n    vec3 sh1_0 \
= vec3(ivec3(\\n      int(packed.x << 25u) >> 25,\\n      int(packed.x << \
18u) >> 25,\\n      int(packed.x << 11u) >> 25\\n    )) / 63.0;\\n    vec3 \
sh1_1 = vec3(ivec3(\\n      int(packed.x << 4u) >> 25,\\n      int((packed.x \
>> 3u) | (packed.y << 29u)) >> 25,\\n      int(packed.y << 22u) >> 25\\n    \
)) / 63.0;\\n    vec3 sh1_2 = vec3(ivec3(\\n      int(packed.y << 15u) >> \
25,\\n      int(packed.y << 8u) >> 25,\\n      int(packed.y << 1u) >> 25\\n   \
 )) / 63.0;\\n\\n    return sh1_0 * (-0.4886025 * viewDir.y)\\n      + sh1_1 \
* (0.4886025 * viewDir.z)\\n      + sh1_2 * (-0.4886025 * viewDir.x);\\n  \
}\\n\"),ti=Xn(\"\\n  vec3 evaluateSH2(Gsplat gsplat, usampler2DArray sh2, \
vec3 viewDir) {\\n    // Extract sint8 values packed into 4 x uint32\\n    \
uvec4 packed = texelFetch(sh2, splatTexCoord(gsplat.index), 0);\\n    vec3 \
sh2_0 = vec3(ivec3(\\n      int(packed.x << 24u) >> 24,\\n      int(packed.x \
<< 16u) >> 24,\\n      int(packed.x << 8u) >> 24\\n    )) / 127.0;\\n    vec3 \
sh2_1 = vec3(ivec3(\\n      int(packed.x) >> 24,\\n      int(packed.y << 24u) \
>> 24,\\n      int(packed.y << 16u) >> 24\\n    )) / 127.0;\\n    vec3 sh2_2 \
= vec3(ivec3(\\n      int(packed.y << 8u) >> 24,\\n      int(packed.y) >> \
24,\\n      int(packed.z << 24u) >> 24\\n    )) / 127.0;\\n    vec3 sh2_3 = \
vec3(ivec3(\\n      int(packed.z << 16u) >> 24,\\n      int(packed.z << 8u) \
>> 24,\\n      int(packed.z) >> 24\\n    )) / 127.0;\\n    vec3 sh2_4 = \
vec3(ivec3(\\n      int(packed.w << 24u) >> 24,\\n      int(packed.w << 16u) \
>> 24,\\n      int(packed.w << 8u) >> 24\\n    )) / 127.0;\\n\\n    return \
sh2_0 * (1.0925484 * viewDir.x * viewDir.y)\\n      + sh2_1 * (-1.0925484 * \
viewDir.y * viewDir.z)\\n      + sh2_2 * (0.3153915 * (2.0 * viewDir.z * \
viewDir.z - viewDir.x * viewDir.x - viewDir.y * viewDir.y))\\n      + sh2_3 * \
(-1.0925484 * viewDir.x * viewDir.z)\\n      + sh2_4 * (0.5462742 * \
(viewDir.x * viewDir.x - viewDir.y * viewDir.y));\\n  }\\n\"),ei=Xn(\"\\n  \
vec3 evaluateSH3(Gsplat gsplat, usampler2DArray sh3, vec3 viewDir) {\\n    // \
Extract sint6 values packed into 4 x uint32\\n    uvec4 packed = \
texelFetch(sh3, splatTexCoord(gsplat.index), 0);\\n    vec3 sh3_0 = \
vec3(ivec3(\\n      int(packed.x << 26u) >> 26,\\n      int(packed.x << 20u) \
>> 26,\\n      int(packed.x << 14u) >> 26\\n    )) / 31.0;\\n    vec3 sh3_1 = \
vec3(ivec3(\\n      int(packed.x << 8u) >> 26,\\n      int(packed.x << 2u) >> \
26,\\n      int((packed.x >> 4u) | (packed.y << 28u)) >> 26\\n    )) / \
31.0;\\n    vec3 sh3_2 = vec3(ivec3(\\n      int(packed.y << 22u) >> 26,\\n   \
   int(packed.y << 16u) >> 26,\\n      int(packed.y << 10u) >> 26\\n    )) / \
31.0;\\n    vec3 sh3_3 = vec3(ivec3(\\n      int(packed.y << 4u) >> 26,\\n    \
  int((packed.y >> 2u) | (packed.z << 30u)) >> 26,\\n      int(packed.z << \
24u) >> 26\\n    )) / 31.0;\\n    vec3 sh3_4 = vec3(ivec3(\\n      \
int(packed.z << 18u) >> 26,\\n      int(packed.z << 12u) >> 26,\\n      \
int(packed.z << 6u) >> 26\\n    )) / 31.0;\\n    vec3 sh3_5 = vec3(ivec3(\\n  \
    int(packed.z) >> 26,\\n      int(packed.w << 26u) >> 26,\\n      \
int(packed.w << 20u) >> 26\\n    )) / 31.0;\\n    vec3 sh3_6 = vec3(ivec3(\\n \
     int(packed.w << 14u) >> 26,\\n      int(packed.w << 8u) >> 26,\\n      \
int(packed.w << 2u) >> 26\\n    )) / 31.0;\\n\\n    float xx = viewDir.x * \
viewDir.x;\\n    float yy = viewDir.y * viewDir.y;\\n    float zz = viewDir.z \
* viewDir.z;\\n    float xy = viewDir.x * viewDir.y;\\n    float yz = \
viewDir.y * viewDir.z;\\n    float zx = viewDir.z * viewDir.x;\\n\\n    \
return sh3_0 * (-0.5900436 * viewDir.y * (3.0 * xx - yy))\\n      + sh3_1 * \
(2.8906114 * xy * viewDir.z) +\\n      + sh3_2 * (-0.4570458 * viewDir.y * \
(4.0 * zz - xx - yy))\\n      + sh3_3 * (0.3731763 * viewDir.z * (2.0 * zz - \
3.0 * xx - 3.0 * yy))\\n      + sh3_4 * (-0.4570458 * viewDir.x * (4.0 * zz - \
xx - yy))\\n      + sh3_5 * (1.4453057 * viewDir.z * (xx - yy))\\n      + \
sh3_6 * (-0.5900436 * viewDir.x * (xx - 3.0 * yy));\\n  }\\n\");const Ai=new \
n.BufferGeometry,si=new n.ShaderMaterial;const \
ai=[\"char\",\"uchar\",\"short\",\"ushort\",\"int\",\"uint\",\"float\",\"doub\
le\"],ri=class \
n{constructor({fileBytes:n}){this.header=\"\",this.littleEndian=!0,this.eleme\
nts={},this.comments=[],this.data=null,this.numSplats=0,this.fileBytes=n \
instanceof ArrayBuffer?new Uint8Array(n):n}async parseHeader(){const n=new \
ReadableStream({start:n=>{n.enqueue(this.fileBytes.slice(0,65536)),n.close()}\
}).pipeThrough(new TextDecoderStream).getReader();this.header=\"\";const \
t=\"end_header\\n\";for(;;){const{value:e,done:A}=await n.read();if(A)throw \
new Error(\"Failed to read header\");this.header+=e;const \
s=this.header.indexOf(t);if(s>=0){this.header=this.header.slice(0,s+11);break\
}}const e=(new TextEncoder).encode(this.header).length;this.data=new \
DataView(this.fileBytes.buffer,e),this.elements={};let \
A=null;this.comments=[],this.header.trim().split(\"\\n\").forEach(((n,t)=>{co\
nst e=n.trim();if(0===t){if(\"ply\"!==e)throw new Error(\"Invalid PLY \
header\");return}if(0===e.length)return;const s=e.split(\" \
\");switch(s[0]){case\"format\":if(\"binary_little_endian\"===s[1])this.littl\
eEndian=!0;else{if(\"binary_big_endian\"!==s[1])throw new Error(`Unsupported \
PLY format: ${s[1]}`);this.littleEndian=!1}if(\"1.0\"!==s[2])throw new \
Error(`Unsupported PLY version: \
${s[2]}`);break;case\"end_header\":break;case\"comment\":this.comments.push(e\
.slice(8));break;case\"element\":{const \
n=s[1];A={name:n,count:Number.parseInt(s[2]),properties:{}},this.elements[n]=\
A;break}case\"property\":if(null==A)throw new Error(\"Property must be inside \
an \
element\");\"list\"===s[1]?A.properties[s[4]]={isList:!0,type:s[3],countType:\
s[2]}:A.properties[s[2]]={isList:!1,type:s[1]}}})),this.elements.vertex&&(thi\
s.numSplats=this.elements.vertex.count)}parseData(n){let t=0;const \
e=this.data;if(null==e)throw new Error(\"No data to parse\");for(const A in \
this.elements){const \
s=this.elements[A],{count:a,properties:r}=s,i=di(r),o=Ci(r,this.littleEndian)\
,c=n(s)??(()=>{});for(let \
n=0;n<a;n++)t=o(e,t,i),c(n,i)}}parseSplats(t,e){if(null==this.elements.vertex\
)throw new Error(\"No vertex element found\");let A=!1;const s=[];let \
a,r,i,o=0,c=[],l=[],u=[];function g(){const n=pi[o];c=new \
Array(3).fill(null).flatMap(((t,e)=>[0,1,2].map(((t,A)=>e+A*n/3)))),l=new \
Array(5).fill(null).flatMap(((t,e)=>[0,1,2].map(((t,A)=>3+e+A*n/3)))),u=new \
Array(7).fill(null).flatMap(((t,e)=>[0,1,2].map(((t,A)=>8+e+A*n/3)))),a=o>=1?\
new Float32Array(9):void 0,r=o>=2?new Float32Array(15):void 0,i=o>=3?new \
Float32Array(21):void 0}function h(n,t){if(!a)throw new Error(\"Missing \
sh1\");const A=t.f_rest;for(let \
n=0;n<c.length;n++)a[n]=8*A[c[n]]/255-4;if(r)for(let \
n=0;n<l.length;n++)r[n]=8*A[l[n]]/255-4;if(i)for(let \
n=0;n<u.length;n++)i[n]=8*A[u[n]]/255-4;null==e||e(n,a,r,i)}this.parseData((p\
=>{if(\"chunk\"===p.name)return \
function(n){const{min_x:t,min_y:e,min_z:a,max_x:r,max_y:i,max_z:o,min_scale_x\
:c,min_scale_y:l,min_scale_z:u,max_scale_x:g,max_scale_y:h,max_scale_z:p}=n.p\
roperties;if(!(t&&e&&a&&r&&i&&o&&c&&l&&u&&g&&h&&p))throw new Error(\"Missing \
PLY chunk properties\");return \
A=!0,(n,t)=>{const{min_x:e,min_y:A,min_z:a,max_x:r,max_y:i,max_z:o,min_scale_\
x:c,min_scale_y:l,min_scale_z:u,max_scale_x:g,max_scale_y:h,max_scale_z:p,min\
_r:I,min_g:d,min_b:C,max_r:B,max_g:f,max_b:E}=t;s.push({min_x:e,min_y:A,min_z\
:a,max_x:r,max_y:i,max_z:o,min_scale_x:c,min_scale_y:l,min_scale_z:u,max_scal\
e_x:g,max_scale_y:h,max_scale_z:p,min_r:I,min_g:d,min_b:C,max_r:B,max_g:f,max\
_b:E})}}(p);if(A)return function(n){if(e&&\"sh\"===n.name)return \
o=Ei(n.properties),g(),h;if(\"vertex\"!==n.name)return \
null;const{packed_position:A,packed_rotation:a,packed_scale:r,packed_color:i}\
=n.properties;if(!(A&&a&&r&&i))throw new Error(\"Missing PLY properties: \
packed_position, packed_rotation, packed_scale, packed_color\");const \
c=Math.sqrt(2);return(n,e)=>{const A=s[n>>>8];if(null==A)throw new \
Error(\"Missing PLY \
chunk\");const{min_x:a,min_y:r,min_z:i,max_x:o,max_y:l,max_z:u,min_scale_x:g,\
min_scale_y:h,min_scale_z:p,max_scale_x:I,max_scale_y:d,max_scale_z:C,min_r:B\
,min_g:f,min_b:E,max_r:m,max_g:Q,max_b:y}=A,{packed_position:x,packed_rotatio\
n:w,packed_scale:b,packed_color:v}=e,S=(x>>>21&2047)/2047*(o-a)+a,D=(x>>>11&1\
023)/1023*(l-r)+r,M=(2047&x)/2047*(u-i)+i,k=((w>>>20&1023)/1023-.5)*c,_=((w>>\
>10&1023)/1023-.5)*c,T=((1023&w)/1023-.5)*c,F=Math.sqrt(Math.max(0,1-k*k-_*_-\
T*T)),N=w>>>30,R=0===N?k:1===N?F:_,G=N<=1?_:2===N?F:T,U=N<=2?T:F,Y=0===N?F:k,\
q=Math.exp((b>>>21&2047)/2047*(I-g)+g),z=Math.exp((b>>>11&1023)/1023*(d-h)+h)\
,L=Math.exp((2047&b)/2047*(C-p)+p);t(n,S,D,M,q,z,L,R,G,U,Y,(255&v)/255,(v>>>2\
4&255)/255*((m??1)-(B??0))+(B??0),(v>>>16&255)/255*((Q??1)-(f??0))+(f??0),(v>\
>>8&255)/255*((y??1)-(E??0))+(E??0))}}(p);if(\"vertex\"!==p.name)return \
null;const{x:I,y:d,z:C,scale_0:B,scale_1:f,scale_2:E,rot_0:m,rot_1:Q,rot_2:y,\
rot_3:x,opacity:w,f_dc_0:b,f_dc_1:v,f_dc_2:S,red:D,green:M,blue:k,alpha:_}=p.\
properties;if(!I||!d||!C)throw new Error(\"Missing PLY properties: x, y, \
z\");const \
T=B&&f&&E,F=m&&Q&&y&&x,N=null!=_?gi[_.type]:1,R=null!=D?gi[D.type]:1,G=null!=\
M?gi[M.type]:1,U=null!=k?gi[k.type]:1;return \
o=Ei(p.properties),g(),(A,s)=>{const \
o=T?Math.exp(s.scale_0):n.defaultPointScale,g=T?Math.exp(s.scale_1):n.default\
PointScale,h=T?Math.exp(s.scale_2):n.defaultPointScale,p=F?s.rot_1:0,I=F?s.ro\
t_2:0,d=F?s.rot_3:0,C=F?s.rot_0:1,B=null!=w?1/(1+Math.exp(-s.opacity)):null!=\
_?s.alpha/N:1,f=null!=b?s.f_dc_0*oi+.5:null!=D?s.red/R:1,E=null!=v?s.f_dc_1*o\
i+.5:null!=M?s.green/G:1,m=null!=S?s.f_dc_2*oi+.5:null!=k?s.blue/U:1;if(t(A,s\
.x,s.y,s.z,o,g,h,p,I,d,C,B,f,E,m),e&&a){const n=s.f_rest;if(a)for(let \
t=0;t<c.length;t++)a[t]=n[c[t]];if(r)for(let \
t=0;t<l.length;t++)r[t]=n[l[t]];if(i)for(let \
t=0;t<u.length;t++)i[t]=n[u[t]];e(A,a,r,i)}}}))}injectRgba(n){let t=0;const \
e=this.data;if(null==e)throw new Error(\"No parsed \
data\");if(n.length!==4*this.numSplats)throw new Error(\"Invalid RGBA array \
length\");for(const A in this.elements){const \
s=this.elements[A],{count:a,properties:r}=s,i=[];let o=0;const \
c=\"vertex\"===A;if(c)for(const n \
of[\"opacity\",\"f_dc_0\",\"f_dc_1\",\"f_dc_2\"])if(!r[n]||\"float\"!==r[n].t\
ype)throw new Error(`Can't injectRgba due to property: \
${n}`);for(const[A,s]of Object.entries(r))if(s.isList)i.push((()=>{const \
n=ci[s.countType](e,t,this.littleEndian);t+=ui[s.countType],t+=n*ui[s.type]})\
);else{if(c)if(\"f_dc_0\"===A||\"f_dc_1\"===A||\"f_dc_2\"===A){const \
a=Number.parseInt(A.slice(5));i.push((()=>{const \
A=(n[o+a]/255-.5)/oi;li[s.type](e,t,this.littleEndian,A)}))}else\"opacity\"==\
=A&&i.push((()=>{const \
A=Math.max(-100,Math.min(100,-Math.log(1/(n[o+3]/255)-1)));li[s.type](e,t,thi\
s.littleEndian,A)}));i.push((()=>{t+=ui[s.type]}))}for(let \
n=0;n<a;n++){for(const n of i)n();c&&(o+=4)}}}};ri.defaultPointScale=.001;let \
ii=ri;const \
oi=.28209479177387814,ci={char:(n,t,e)=>n.getInt8(t),uchar:(n,t,e)=>n.getUint\
8(t),short:(n,t,e)=>n.getInt16(t,e),ushort:(n,t,e)=>n.getUint16(t,e),int:(n,t\
,e)=>n.getInt32(t,e),uint:(n,t,e)=>n.getUint32(t,e),float:(n,t,e)=>n.getFloat\
32(t,e),double:(n,t,e)=>n.getFloat64(t,e)},li={char:(n,t,e,A)=>{n.setInt8(t,A\
)},uchar:(n,t,e,A)=>{n.setUint8(t,A)},short:(n,t,e,A)=>{n.setInt16(t,A,e)},us\
hort:(n,t,e,A)=>{n.setUint16(t,A,e)},int:(n,t,e,A)=>{n.setInt32(t,A,e)},uint:\
(n,t,e,A)=>{n.setUint32(t,A,e)},float:(n,t,e,A)=>{n.setFloat32(t,A,e)},double\
:(n,t,e,A)=>{n.setFloat64(t,A,e)}},ui={char:1,uchar:1,short:2,ushort:2,int:4,\
uint:4,float:4,double:8},gi={char:127,uchar:255,short:32767,ushort:65535,int:\
2147483647,uint:4294967295,float:1,double:1},hi={0:0,9:1,24:2,45:3},pi={0:0,1\
:9,2:24,3:45},Ii=/^f_rest_([0-9]{1,2})$/;function di(n){const \
t={};for(const[e,A]of Object.entries(n))Ii.test(e)?t.f_rest=new \
Array(Ei(n)):t[e]=A.isList?[]:0;return t}function Ci(n,t){return \
function(n){if(!Bi)return!1;for(const[t,e]of \
Object.entries(n)){if(!fi.test(t))return!1;if(e.isList&&!ai.includes(e.countT\
ype))return!1;if(!ai.includes(e.type))return!1}return!0}(n)?function(n,t){con\
st e=[\"let list;\"];for(const[A,s]of Object.entries(n)){const \
n=A.match(Ii);if(n){const A=+n[1];e.push(`\\n        item.f_rest[${A}] = \
PARSE_FIELD['${s.type}'](data, offset, ${t});\\n        offset += \
${ui[s.type]};\\n      `)}else s.isList?e.push(`\\n        list = \
item['${A}'];\\n        list.length = PARSE_FIELD['${s.countType}'](data, \
offset, ${t});\\n        offset += ${ui[s.countType]};\\n        for (let i = \
0; i < list.length; i++) {\\n          list[i] = \
PARSE_FIELD['${s.type}'](data, offset, ${t});\\n          offset += \
${ui[s.type]};\\n        }\\n      `):e.push(`\\n        item['${A}'] = \
PARSE_FIELD['${s.type}'](data, offset, ${t});\\n        offset += \
${ui[s.type]};\\n      `)}e.push(\"return offset;\");const A=new \
Function(\"data\",\"offset\",\"item\",\"PARSE_FIELD\",e.join(\"\\n\"));return\
(n,t,e)=>A(n,t,e,ci)}(n,t):function(n,t){const e=[];for(const[A,s]of \
Object.entries(n)){const n=A.match(Ii);if(n){const \
A=+n[1];e.push(((n,e,a)=>(a.f_rest[A]=ci[s.type](n,e,t),e+ui[s.type])))}else \
s.isList?e.push(((n,e,a)=>{const r=a[A];r.length=ci[s.countType](n,e,t);let \
i=e+ui[s.countType];for(let \
e=0;e<r.length;e++)r[e]=ci[s.type](n,i,t),i+=ui[s.type];return \
i})):e.push(((n,e,a)=>(a[A]=ci[s.type](n,e,t),e+ui[s.type])))}return(n,t,A)=>\
{let s=t;for(let t=0;t<e.length;t++)s=e[t](n,s,A);return s}}(n,t)}const \
Bi=(()=>{try{new Function(\"return \
42;\")}catch(n){return!1}return!0})(),fi=/^[a-zA-Z0-9_]+$/;function Ei(n){let \
t=0;for(;n[`f_rest_${t}`];)t+=1;const e=hi[t];if(null==e)throw new \
Error(`Unsupported number of SH coefficients: ${t}`);return e}const \
mi='(function() {\\n  \"use strict\";\\n  let wasm;\\n  const \
cachedTextDecoder = typeof TextDecoder !== \"undefined\" ? new \
TextDecoder(\"utf-8\", { ignoreBOM: true, fatal: true }) : { decode: () => \
{\\n    throw Error(\"TextDecoder not available\");\\n  } };\\n  if (typeof \
TextDecoder !== \"undefined\") {\\n    cachedTextDecoder.decode();\\n  }\\n  \
let cachedUint8ArrayMemory0 = null;\\n  function getUint8ArrayMemory0() {\\n  \
  if (cachedUint8ArrayMemory0 === null || cachedUint8ArrayMemory0.byteLength \
=== 0) {\\n      cachedUint8ArrayMemory0 = new \
Uint8Array(wasm.memory.buffer);\\n    }\\n    return \
cachedUint8ArrayMemory0;\\n  }\\n  function getStringFromWasm0(ptr, len) {\\n \
   ptr = ptr >>> 0;\\n    return \
cachedTextDecoder.decode(getUint8ArrayMemory0().subarray(ptr, ptr + len));\\n \
 }\\n  function sort_splats(num_splats, readback, ordering) {\\n    const ret \
= wasm.sort_splats(num_splats, readback, ordering);\\n    return ret >>> \
0;\\n  }\\n  function sort32_splats(num_splats, readback, ordering) {\\n    \
const ret = wasm.sort32_splats(num_splats, readback, ordering);\\n    return \
ret >>> 0;\\n  }\\n  async function __wbg_load(module, imports) {\\n    if \
(typeof Response === \"function\" && module instanceof Response) {\\n      if \
(typeof WebAssembly.instantiateStreaming === \"function\") {\\n        try \
{\\n          return await WebAssembly.instantiateStreaming(module, \
imports);\\n        } catch (e) {\\n          if \
(module.headers.get(\"Content-Type\") != \"application/wasm\") {\\n           \
 console.warn(\"`WebAssembly.instantiateStreaming` failed because your server \
does not serve Wasm with `application/wasm` MIME type. Falling back to \
`WebAssembly.instantiate` which is slower. Original error:\\\\n\", e);\\n     \
     } else {\\n            throw e;\\n          }\\n        }\\n      }\\n   \
   const bytes = await module.arrayBuffer();\\n      return await \
WebAssembly.instantiate(bytes, imports);\\n    } else {\\n      const \
instance = await WebAssembly.instantiate(module, imports);\\n      if \
(instance instanceof WebAssembly.Instance) {\\n        return { instance, \
module };\\n      } else {\\n        return instance;\\n      }\\n    }\\n  \
}\\n  function __wbg_get_imports() {\\n    const imports = {};\\n    \
imports.wbg = {};\\n    imports.wbg.__wbg_buffer_609cc3eee51ed158 = \
function(arg0) {\\n      const ret = arg0.buffer;\\n      return ret;\\n    \
};\\n    imports.wbg.__wbg_length_3b4f022188ae8db6 = function(arg0) {\\n      \
const ret = arg0.length;\\n      return ret;\\n    };\\n    \
imports.wbg.__wbg_length_6ca527665d89694d = function(arg0) {\\n      const \
ret = arg0.length;\\n      return ret;\\n    };\\n    \
imports.wbg.__wbg_length_8cfd2c6409af88ad = function(arg0) {\\n      const \
ret = arg0.length;\\n      return ret;\\n    };\\n    \
imports.wbg.__wbg_new_9fee97a409b32b68 = function(arg0) {\\n      const ret = \
new Uint16Array(arg0);\\n      return ret;\\n    };\\n    \
imports.wbg.__wbg_new_e3b321dcfef89fc7 = function(arg0) {\\n      const ret = \
new Uint32Array(arg0);\\n      return ret;\\n    };\\n    \
imports.wbg.__wbg_newwithbyteoffsetandlength_e6b7e69acd4c7354 = \
function(arg0, arg1, arg2) {\\n      const ret = new Float32Array(arg0, arg1 \
>>> 0, arg2 >>> 0);\\n      return ret;\\n    };\\n    \
imports.wbg.__wbg_newwithbyteoffsetandlength_f1dead44d1fc7212 = \
function(arg0, arg1, arg2) {\\n      const ret = new Uint32Array(arg0, arg1 \
>>> 0, arg2 >>> 0);\\n      return ret;\\n    };\\n    \
imports.wbg.__wbg_newwithlength_5a5efe313cfd59f1 = function(arg0) {\\n      \
const ret = new Float32Array(arg0 >>> 0);\\n      return ret;\\n    };\\n    \
imports.wbg.__wbg_set_10bad9bee0e9c58b = function(arg0, arg1, arg2) {\\n      \
arg0.set(arg1, arg2 >>> 0);\\n    };\\n    \
imports.wbg.__wbg_set_d23661d19148b229 = function(arg0, arg1, arg2) {\\n      \
arg0.set(arg1, arg2 >>> 0);\\n    };\\n    \
imports.wbg.__wbg_set_f4f1f0daa30696fc = function(arg0, arg1, arg2) {\\n      \
arg0.set(arg1, arg2 >>> 0);\\n    };\\n    \
imports.wbg.__wbg_subarray_3aaeec89bb2544f0 = function(arg0, arg1, arg2) {\\n \
     const ret = arg0.subarray(arg1 >>> 0, arg2 >>> 0);\\n      return \
ret;\\n    };\\n    imports.wbg.__wbg_subarray_769e1e0f81bb259b = \
function(arg0, arg1, arg2) {\\n      const ret = arg0.subarray(arg1 >>> 0, \
arg2 >>> 0);\\n      return ret;\\n    };\\n    \
imports.wbg.__wbindgen_init_externref_table = function() {\\n      const \
table = wasm.__wbindgen_export_0;\\n      const offset = table.grow(4);\\n    \
  table.set(0, void 0);\\n      table.set(offset + 0, void 0);\\n      \
table.set(offset + 1, null);\\n      table.set(offset + 2, true);\\n      \
table.set(offset + 3, false);\\n    };\\n    imports.wbg.__wbindgen_memory = \
function() {\\n      const ret = wasm.memory;\\n      return ret;\\n    };\\n \
   imports.wbg.__wbindgen_throw = function(arg0, arg1) {\\n      throw new \
Error(getStringFromWasm0(arg0, arg1));\\n    };\\n    return imports;\\n  \
}\\n  function __wbg_finalize_init(instance, module) {\\n    wasm = \
instance.exports;\\n    __wbg_init.__wbindgen_wasm_module = module;\\n    \
cachedUint8ArrayMemory0 = null;\\n    wasm.__wbindgen_start();\\n    return \
wasm;\\n  }\\n  async function __wbg_init(module_or_path) {\\n    if (wasm \
!== void 0) return wasm;\\n    if (typeof module_or_path !== \"undefined\") \
{\\n      if (Object.getPrototypeOf(module_or_path) === Object.prototype) \
{\\n        ({ module_or_path } = module_or_path);\\n      } else {\\n        \
console.warn(\"using deprecated parameters for the initialization function; \
pass a single object instead\");\\n      }\\n    }\\n    if (typeof \
module_or_path === \"undefined\") {\\n      module_or_path = new \
URL(\"data:application/wasm;base64,AGFzbQEAAAABzAEeYAJ/fwF/YAJ/fwBgA39/fwF/YA\
N/f38AYAF/AX9gAX8AYANvf38Bb2AFf39/f38Bf2AFf39/f38AYAFvAW9gA29vfwBgAW8Bf2AAAGA\
AAX9gBH9/f38AYAR/f39/AX9gA39vbwF/YAF/AW9gAAFvYAF9AX1gBn9/f39/fwBgDX19fX19fX19\
f29/fX0Bb2AGf39/f39/AX9gBX9/fX9/AGAEf31/fwBgBX9/fH9/AGAEf3x/fwBgBX9/fn9/AGAEf\
35/fwBgAn19AX0C8gQRA3diZx1fX3diZ19idWZmZXJfNjA5Y2MzZWVlNTFlZDE1OAAJA3diZxpfX3\
diZ19uZXdfOWZlZTk3YTQwOWIzMmI2OAAJA3diZxpfX3diZ19zZXRfZjRmMWYwZGFhMzA2OTZmYwA\
KA3diZx1fX3diZ19sZW5ndGhfOGNmZDJjNjQwOWFmODhhZAALA3diZzFfX3diZ19uZXd3aXRoYnl0\
ZW9mZnNldGFuZGxlbmd0aF9mMWRlYWQ0NGQxZmM3MjEyAAYDd2JnGl9fd2JnX25ld19lM2IzMjFkY\
2ZlZjg5ZmM3AAkDd2JnGl9fd2JnX3NldF9kMjM2NjFkMTkxNDhiMjI5AAoDd2JnHV9fd2JnX2xlbm\
d0aF82Y2E1Mjc2NjVkODk2OTRkAAsDd2JnMV9fd2JnX25ld3dpdGhieXRlb2Zmc2V0YW5kbGVuZ3R\
oX2U2YjdlNjlhY2Q0YzczNTQABgN3YmcaX193Ymdfc2V0XzEwYmFkOWJlZTBlOWM1OGIACgN3Ymcd\
X193YmdfbGVuZ3RoXzNiNGYwMjIxODhhZThkYjYACwN3YmcfX193Ymdfc3ViYXJyYXlfNzY5ZTFlM\
GY4MWJiMjU5YgAGA3diZx9fX3diZ19zdWJhcnJheV8zYWFlZWM4OWJiMjU0NGYwAAYDd2JnJF9fd2\
JnX25ld3dpdGhsZW5ndGhfNWE1ZWZlMzEzY2ZkNTlmMQARA3diZxBfX3diaW5kZ2VuX3Rocm93AAE\
Dd2JnEV9fd2JpbmRnZW5fbWVtb3J5ABIDd2JnH19fd2JpbmRnZW5faW5pdF9leHRlcm5yZWZfdGFi\
bGUADANeXQQAAQcFAgMCEwEBAA0BAwEAAA0BAwgIAwEBBRQBAw4AAwEDAgwMAgABAQcDABUBFhcIG\
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\
4EccSABQf+B/AdxakGBgARsQRB2IARqDwsgAUUEQEEADwsgAUEDcSEDAkAgAUEESQRADAELIAFBfH\
EhBQNAIAQgACACaiIBLAAAQb9/SmogAUEBaiwAAEG/f0pqIAFBAmosAABBv39KaiABQQNqLAAAQb9\
/SmohBCAFIAJBBGoiAkcNAAsLIANFDQAgACACaiEBA0AgBCABLAAAQb9/SmohBCABQQFqIQEgA0EB\
ayIDDQALCyAEC4oGAQZ/IAAoAggiAyABSQRAIAEgAyICayIEIAAoAgAgAmtLBEAgACACIARBBEEEE\
CYgACgCCCECCyAAKAIEIgYgAkECdGohBSAEQQJPBEAgASADQX9zakECdCIHBEAgBUEAIAf8CwALIA\
EgAmpBAnQgA0ECdGsgBmpBBGshBSACIARqQQFrIQILIAVBADYCACAAIAJBAWo2AggLIAAoAhQiAyA\
BSQRAIAEgAyICayIEIAAoAgwgAmtLBEAgAEEMaiACIARBBEEEECYgACgCFCECCyAAKAIQIgYgAkEC\
dGohBSAEQQJPBEAgASADQX9zakECdCIHBEAgBUEAIAf8CwALIAEgAmpBAnQgA0ECdGsgBmpBBGshB\
SACIARqQQFrIQILIAVBADYCACAAIAJBAWo2AhQLIAAoAjgiAyABSQRAIAEgAyICayIEIAAoAjAgAm\
tLBEAgAEEwaiACIARBBEEEECYgACgCOCECCyAAKAI0IgYgAkECdGohBSAEQQJPBEAgASADQX9zakE\
CdCIHBEAgBUEAIAf8CwALIAEgAmpBAnQgA0ECdGsgBmpBBGshBSACIARqQQFrIQILIAVBADYCACAA\
IAJBAWo2AjgLIAAoAiAiA0H//wNNBEAgAyEBQYCABCADayICIAAoAhggA2tLBEAgAEEYaiADIAJBB\
EEEECYgACgCICEBCyAAKAIcIgUgAUECdCIEaiECIANB//8DRwRAQfz/DyADQQJ0IgZrIgcEQCACQQ\
AgB/wLAAsgBCAGayAFakH8/w9qIQIgASADa0H//wNqIQELIAJBADYCACAAIAFBAWo2AiALIAAoAiw\
iA0H//wNNBEAgAyEBQYCABCADayICIAAoAiQgA2tLBEAgAEEkaiADIAJBBEEEECYgACgCLCEBCyAA\
KAIoIgUgAUECdCIEaiECIANB//8DRwRAQfz/DyADQQJ0IgZrIgcEQCACQQAgB/wLAAsgBCAGayAFa\
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\
zYCCCANIAo2AgQgDSAANgIAIA0gDUEEaiIAKAIAEG02AgwgDSANQQhqNgIcIA0gDTYCGCANIAA2Ah\
QgDSANQQxqNgIQIA1BEGohACMAQdAAayIIJAACQAJAAkACQAJAQQBBjIbAACgCABEEACIPBEAgDyg\
CAA0BIAAoAgwhFiAAKAIIIQogACgCACEDIA9BfzYCACAAKAIEIQAgD0EEaiILIAMoAgAQEyAIIABB\
ACAKKAIAEGE2AgggCigCACIAIA8oAgwiCUsNAiAIQQhqIA8oAgggABAzIAhBDGohFSADKAIAIQAgC\
igCACETIwBBMGsiDiQAIAsgABATAkAgCygCCCIAIBNPBEAgCygCBCEKIAsoAhwhAwJAIAsoAiAiDE\
UNACAMQQJ0IgBFDQAgA0EAIAD8CwALIAsoAighFAJAIAsoAiwiEEUNACAQQQJ0IgBFDQAgFEEAIAD\
8CwALIBNBAnQhCSATBEAgCSEEIAohAANAAkAgACgCACIGQYCAgPwHTw0AIAwgBkF/cyIFQf//A3Ei\
BksEQCADIAZBAnRqIgYgBigCAEEBajYCACAQIAVBEHYiBksEQCAUIAZBAnRqIgYgBigCAEEBajYCA\
AwCCyAGIBBB3InAABAxAAsgBiAMQcyJwAAQMQALIABBBGohACAEQQRrIgQNAAsLAkAgDEUEQEEAIQ\
QMAQsgDEEBa0H/////A3EiAEEBaiIEQQdxIQUCQCAAQQdJBEBBACEEIAMhAAwBCyAEQfj///8HcSE\
GQQAhBCADIQADQCAAKAIAIQcgACAENgIAIABBBGoiESgCACESIBEgBCAHaiIENgIAIABBCGoiBygC\
ACERIAcgBCASaiIENgIAIABBDGoiBygCACESIAcgBCARaiIENgIAIABBEGoiBygCACERIAcgBCASa\
iIENgIAIABBFGoiBygCACESIAcgBCARaiIENgIAIABBGGoiBygCACERIAcgBCASaiIENgIAIABBHG\
oiBygCACESIAcgBCARaiIENgIAIAQgEmohBCAAQSBqIQAgBkEIayIGDQALCyAFRQ0AA0AgACgCACE\
GIAAgBDYCACAAQQRqIQAgBCAGaiEEIAVBAWsiBQ0ACwsgDiAENgIEIBMEQCAJIApqIREgCkEEaiEG\
IBNBAWtB/////wNxQQFqIRIgCygCNCEXIAsoAjghB0EAIQUgCiEJA0AgBiEAAkAgCSgCACIJQYCAg\
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\
3I2AgQgByAHKAIEQQFyNgIEIAEgAxAaDAkLQciZwAAoAgAgBGoiBCABSw0HCyADEBEiAUUNASADQX\
xBeCAFKAIAIgJBA3EbIAJBeHFqIgIgAiADSxsiAgRAIAEgACAC/AoAAAsgABAVIAEMCAsgAyABIAE\
gA0sbIgIEQCAIIAAgAvwKAAALIAUoAgAiAkF4cSIDIAFBBEEIIAJBA3EiAhtqSQ0DIAJBACADIAlL\
Gw0EIAAQFQsgCAwGC0HQi8AAQYCMwAAQOgALQZCMwABBwIzAABA6AAtB0IvAAEGAjMAAEDoAC0GQj\
MAAQcCMwAAQOgALIAUgASAGQQFxckECcjYCACABIAJqIgIgBCABayIBQQFyNgIEQciZwAAgATYCAE\
HQmcAAIAI2AgAgAAwBCyAACwsWACAAKAIAIAEgAiAAKAIEKAIMEQIAC4UCAQN/QfCVwAAoAgBFBEA\
CQAJAAn8CQCAARQ0AIAAoAgAgAEEANgIAQQFxRQ0AIAAoAhAhAiAAKAIMIQEgACgCCCEDIAAoAgQM\
AQsCQEGAgMAAEBEiAEUNACAAQQRrLQAAQQNxRQ0AIABBAEGAgMAA/AsACyAAIgFFDQFBgIAQIQJBg\
IAQIQNBAAshAEGAlsAAIAI2AgBB9JXAACAANgIAQfyVwAAoAgAhAkH8lcAAIAE2AgBB+JXAACgCAC\
EAQfiVwAAgAzYCAEHwlcAAKAIAQfCVwABBATYCAEUgAEVyRQRAIAIgAEECdBBgCwwBC0EEQYCAwAB\
B+IXAABBMAAsLQfSVwAALxAQBEX9BrJXAACgCAEUEQAJAIAAEQCAAKAJAIQEgACgCPCECIAAoAjgh\
AyAAKAI0IQQgACgCMCEFIAAoAiwhBiAAKAIoIQcgACgCJCEIIAAoAiAhCSAAKAIcIQogACgCGCELI\
AAoAhQhDCAAKAIQIQ0gACgCDCEOIAAoAgghDyAAKAIEIRAgACgCACAAQQA2AgBBAXENAQtBBCECQQ\
AhAUEAIQNBACEEQQQhBUEAIQZBACEHQQQhCEEAIQlBACEKQQQhC0EAIQxBACENQQQhDkEAIQ9BACE\
QC0HslcAAIAE2AgBB4JXAACAENgIAQdSVwAAgBzYCAEHIlcAAIAo2AgBBvJXAACANNgIAQbCVwAAg\
EDYCAEHolcAAKAIAIQdB6JXAACACNgIAQeSVwAAoAgAhAEHklcAAIAM2AgBB3JXAACgCACEKQdyVw\
AAgBTYCAEHYlcAAKAIAIQFB2JXAACAGNgIAQdCVwAAoAgAhBUHQlcAAIAg2AgBBzJXAACgCACECQc\
yVwAAgCTYCAEHElcAAKAIAIQZBxJXAACALNgIAQcCVwAAoAgAhA0HAlcAAIAw2AgBBuJXAACgCACE\
IQbiVwAAgDjYCAEG0lcAAKAIAIQRBtJXAACAPNgIAQayVwAAoAgAhCUGslcAAQQE2AgACQCAJRQ0A\
IAQEQCAIIARBAnQQYAsgAwRAIAYgA0ECdBBgCyACBEAgBSACQQJ0EGALIAEEQCAKIAFBAnQQYAsgA\
EUNACAHIABBAnQQYAsLQbCVwAAL8gIBCX9BgJXAACgCAEUEQAJ/AkAgAEUNACAAKAIAIABBADYCAE\
EBcUUNACAAKAIoIQEgACgCJCEHIAAoAiAhAiAAKAIcIQMgACgCGCEIIAAoAhQhBCAAKAIQIQUgACg\
CDCEJIAAoAgghBiAAKAIEDAELQQIhCUEEIQdBACEBQQQhCEEACyEAQaiVwAAgATYCAEGclcAAIAM2\
AgBBkJXAACAFNgIAQYSVwAAgADYCAEGklcAAKAIAIQVBpJXAACAHNgIAQaCVwAAoAgAhAEGglcAAI\
AI2AgBBmJXAACgCACEBQZiVwAAgCDYCAEGUlcAAKAIAIQJBlJXAACAENgIAQYyVwAAoAgAhBEGMlc\
AAIAk2AgBBiJXAACgCACEDQYiVwAAgBjYCAEGAlcAAKAIAIQZBgJXAAEEBNgIAAkAgBkUNACADBEA\
gBCADQQF0EGALIAIEQCABIAJBAnQQYAsgAEUNACAFIABBAnQQYAsLQYSVwAALFAAgACgCACABIAAo\
AgQoAgwRAAALFAIBbwF/EA8hABAdIgEgACYBIAELEAAgASAAKAIEIAAoAggQFgsZAAJ/IAFBCU8EQ\
CABIAAQHAwBCyAAEBELCyAAIABC356dmJy3lrgCNwMIIABCoe2sjPn0nLgHNwMACyIAIABC7bqtts\
2F1PXjADcDCCAAQviCmb2V7sbFuX83AwALEwAgAEGAjsAANgIEIAAgATYCAAsQACABIAAoAgAgACg\
CBBBRCxAAIAEgACgCACAAKAIEEBYLEAAgASgCACABKAIEIAAQGAsOACAAJQEgASUBIAIQBgtbAQJ/\
AkACQCAAQQRrKAIAIgJBeHEiA0EEQQggAkEDcSICGyABak8EQCACQQAgAyABQSdqSxsNASAAEBUMA\
gtB0IvAAEGAjMAAEDoAC0GQjMAAQcCMwAAQOgALCx0BAW8gACgCACUBIAEgAhAMIQMQHSIAIAMmAS\
AAC2oBAX8jAEEwayIDJAAgAyABNgIEIAMgADYCACADQQI2AgwgA0G0lMAANgIIIANCAjcCFCADIAN\
BBGqtQoCAgIDQAIQ3AyggAyADrUKAgICA0ACENwMgIAMgA0EgajYCECADQQhqIAIQPwALCQAgACAB\
EA4ACw0AIABBuIvAACABEBgLDAAgACABKQIANwMACw0AIABB0I7AACABEBgLDQAgAUHIjsAAQQUQU\
QsZACAAIAFBkJbAACgCACIAQRQgABsRAQAACw0AIAFBpJDAAEEYEBYLoAIBA38gACgCACEAIwBBkA\
FrIgMkAAJ/AkAgASgCCCICQYCAgBBxRQRAIAJBgICAIHENASADQQhqIAAoAgAgA0EQahAfIAFBAUE\
AIAMoAgggAygCDBAUDAILIAAoAgAhAkEAIQADQCAAIANqQY8BaiACQQ9xIgRBMHIgBEHXAGogBEEK\
SRs6AAAgAEEBayEAIAJBD0sgAkEEdiECDQALIAFBt5LAAEECIAAgA2pBkAFqQQAgAGsQFAwBCyAAK\
AIAIQJBACEAA0AgACADakGPAWogAkEPcSIEQTByIARBN2ogBEEKSRs6AAAgAEEBayEAIAJBD0sgAk\
EEdiECDQALIAFBt5LAAEECIAAgA2pBkAFqQQAgAGsQFAsgA0GQAWokAAsJACAAQQA2AgALCAAgACU\
BEAMLCAAgACUBEAcLC/UUAwBBgIDAAAuhD3NwYXJrLWludGVybmFsLXJzL3NyYy9yYXljYXN0LnJz\
AHNwYXJrLWludGVybmFsLXJzL3NyYy9zb3J0LnJzAGxpYnJhcnkvYWxsb2Mvc3JjL2ZtdC5ycwAva\
G9tZS9ydW5uZXIvLmNhcmdvL3JlZ2lzdHJ5L3NyYy9pbmRleC5jcmF0ZXMuaW8tMTk0OWNmOGM2Yj\
ViNTU3Zi93YXNtLWJpbmRnZW4tMC4yLjEwMC9zcmMvY29udmVydC9zbGljZXMucnMAL3J1c3RjLzI\
5NDgzODgzZWVkNjlkNWZiNGRiMDE5NjRjZGYyYWY0ZDg2ZTljYjIvbGlicmFyeS9zdGQvc3JjL3Ro\
cmVhZC9sb2NhbC5ycwBsaWJyYXJ5L2FsbG9jL3NyYy9zdHJpbmcucnMAL3J1c3RjLzI5NDgzODgzZ\
WVkNjlkNWZiNGRiMDE5NjRjZGYyYWY0ZDg2ZTljYjIvbGlicmFyeS9hbGxvYy9zcmMvc2xpY2Uucn\
MAL3J1c3RjLzI5NDgzODgzZWVkNjlkNWZiNGRiMDE5NjRjZGYyYWY0ZDg2ZTljYjIvbGlicmFyeS9\
hbGxvYy9zcmMvcmF3X3ZlYy9tb2QucnMAL3J1c3QvZGVwcy9kbG1hbGxvYy0wLjIuOS9zcmMvZGxt\
YWxsb2MucnMAbGlicmFyeS9zdGQvc3JjL2FsbG9jLnJzAHNwYXJrLWludGVybmFsLXJzL3NyYy9sa\
WIucnMAL2hvbWUvcnVubmVyLy5jYXJnby9yZWdpc3RyeS9zcmMvaW5kZXguY3JhdGVzLmlvLTE5ND\
ljZjhjNmI1YjU1N2YvanMtc3lzLTAuMy43Ny9zcmMvbGliLnJzAC9ob21lL3J1bm5lci8uY2FyZ28\
vcmVnaXN0cnkvc3JjL2luZGV4LmNyYXRlcy5pby0xOTQ5Y2Y4YzZiNWI1NTdmL29uY2VfY2VsbC0x\
LjIxLjMvc3JjL2xpYi5ycwAAAHwBEABRAAAALgIAABEAAAAQAhAAHQAAABEAAAA9AAAAAQAAAAIAA\
AADAAAAxQAQAFAAAAAZAQAAGQAAAMUAEABQAAAAGAIAACYAAAAxARAASwAAAMEBAAAdAAAAAAAQAC\
EAAAAqAAAAFwAAAAAAEAAhAAAAeAAAABcAAAAAABAAIQAAAH4AAAAcAAAAAAAQACEAAACAAAAAHAA\
AAAAAEAAhAAAAhQAAACAAAAAQAhAAHQAAAB0AAAAzAAAAEAIQAB0AAAAoAAAALQAAAAEAAAAAAAAA\
EAIQAB0AAAA6AAAAMwAAABACEAAdAAAARQAAAC0AAAAQAhAAHQAAAF4AAAAoAAAAIQAQAB4AAAAbA\
AAAHQAAAEV4cGVjdGVkICBhY3RpdmUgc3BsYXRzIGJ1dCBnb3Qg/AMQAAkAAAAFBBAAFwAAACEAEA\
AeAAAAMwAAAB0AAAAhABAAHgAAADMAAAAVAAAAIQAQAB4AAAAkAAAAFAAAACEAEAAeAAAAdAAAABk\
AAAAhABAAHgAAAKcAAAATAAAAIQAQAB4AAACfAAAAEwAAACEAEAAeAAAAogAAAB0AAAAhABAAHgAA\
AKIAAAARAAAAIQAQAB4AAACQAAAAIAAAACEAEAAeAAAAkAAAABQAAAAhABAAHgAAAHwAAAAYAAAAI\
QAQAB4AAAB9AAAAGAAAAC0CEABbAAAA+xgAAAEAAABYABAAbQAAACQBAAAOAAAAY2xvc3VyZSBpbn\
Zva2VkIHJlY3Vyc2l2ZWx5IG9yIGFmdGVyIGJlaW5nIGRyb3BwZWRMYXp5IGluc3RhbmNlIGhhcyB\
wcmV2aW91c2x5IGJlZW4gcG9pc29uZWQ+BRAAKgAAAIgCEABeAAAACAMAABkAAAByZWVudHJhbnQg\
aW5pdAAAgAUQAA4AAACIAhAAXgAAAHoCAAANAAAAfAEQAFEAAAAuAgAAEQAAABUAAAAMAAAABAAAA\
BYAAAAXAAAAGAAAAGFzc2VydGlvbiBmYWlsZWQ6IHBzaXplID49IHNpemUgKyBtaW5fb3ZlcmhlYW\
QAAM0BEAAqAAAAsAQAAAkAAABhc3NlcnRpb24gZmFpbGVkOiBwc2l6ZSA8PSBzaXplICsgbWF4X29\
2ZXJoZWFkAADNARAAKgAAALYEAAANAAAAQWNjZXNzRXJyb3JjYW5ub3QgYWNjZXNzIGEgVGhyZWFk\
IExvY2FsIFN0b3JhZ2UgdmFsdWUgZHVyaW5nIG9yIGFmdGVyIGRlc3RydWN0aW9uOiAAWwYQAEgAA\
ABtZW1vcnkgYWxsb2NhdGlvbiBvZiAgYnl0ZXMgZmFpbGVkAACsBhAAFQAAAMEGEAANAAAA9wEQAB\
kAAABkAQAACQAAABUAAAAMAAAABAAAABkAAAAAAAAACAAAAAQAAAAaAAAAAAAAAAgAAAAEAAAAGwA\
AABwAAAAdAAAAHgAAAB8AAAAQAAAABAAAACAAAAAhAAAAIgAAACMAAABFcnJvcgAAACQAAAAMAAAA\
BAAAACUAAAAmAAAAJwAAAGNhcGFjaXR5IG92ZXJmbG93AAAAaAcQABEAAACsARAAIQAAAC4CAAARA\
AAAFQEQABwAAADoAQAAFwBBrI/AAAu4BQEAAAAoAAAAYSBmb3JtYXR0aW5nIHRyYWl0IGltcGxlbW\
VudGF0aW9uIHJldHVybmVkIGFuIGVycm9yIHdoZW4gdGhlIHVuZGVybHlpbmcgc3RyZWFtIGRpZCB\
ub3QAAD8AEAAZAAAAigIAAA4AAAABAAAAAAAAAFJlZkNlbGwgYWxyZWFkeSBib3Jyb3dlZGluZGV4\
IG91dCBvZiBib3VuZHM6IHRoZSBsZW4gaXMgIGJ1dCB0aGUgaW5kZXggaXMgAAA8CBAAIAAAAFwIE\
AASAAAAAAAAAAQAAAAEAAAALQAAAD09IT1tYXRjaGVzYXNzZXJ0aW9uIGBsZWZ0ICByaWdodGAgZm\
FpbGVkCiAgbGVmdDogCiByaWdodDogAJsIEAAQAAAAqwgQABcAAADCCBAACQAAACByaWdodGAgZmF\
pbGVkOiAKICBsZWZ0OiAAAACbCBAAEAAAAOQIEAAQAAAA9AgQAAkAAADCCBAACQAAADogAAABAAAA\
AAAAACAJEAACAAAAfSB9MHgwMDAxMDIwMzA0MDUwNjA3MDgwOTEwMTExMjEzMTQxNTE2MTcxODE5M\
jAyMTIyMjMyNDI1MjYyNzI4MjkzMDMxMzIzMzM0MzUzNjM3MzgzOTQwNDE0MjQzNDQ0NTQ2NDc0OD\
Q5NTA1MTUyNTM1NDU1NTY1NzU4NTk2MDYxNjI2MzY0NjU2NjY3Njg2OTcwNzE3MjczNzQ3NTc2Nzc\
3ODc5ODA4MTgyODM4NDg1ODY4Nzg4ODk5MDkxOTI5Mzk0OTU5Njk3OTg5OSBvdXQgb2YgcmFuZ2Ug\
Zm9yIHNsaWNlIG9mIGxlbmd0aCByYW5nZSBlbmQgaW5kZXggACMKEAAQAAAAAQoQACIAAACQCBAAk\
ggQAJQIEAACAAAAAgAAAAcAAAAAAAA/AAAAvwBB/JTAAAsBEgB8CXByb2R1Y2VycwIIbGFuZ3VhZ2\
UBBFJ1c3QADHByb2Nlc3NlZC1ieQMFcnVzdGMdMS44OS4wICgyOTQ4Mzg4M2UgMjAyNS0wOC0wNCk\
Gd2FscnVzBjAuMjMuMwx3YXNtLWJpbmRnZW4TMC4yLjEwMCAoMjQwNWVjMmI0KQBrD3RhcmdldF9m\
ZWF0dXJlcwYrD211dGFibGUtZ2xvYmFscysTbm9udHJhcHBpbmctZnB0b2ludCsLYnVsay1tZW1vc\
nkrCHNpZ24tZXh0Kw9yZWZlcmVuY2UtdHlwZXMrCm11bHRpdmFsdWU=\", \
self.location.href);\\n    }\\n    const imports = __wbg_get_imports();\\n    \
if (typeof module_or_path === \"string\" || typeof Request === \"function\" \
&& module_or_path instanceof Request || typeof URL === \"function\" && \
module_or_path instanceof URL) {\\n      module_or_path = \
fetch(module_or_path);\\n    }\\n    const { instance, module } = await \
__wbg_load(await module_or_path, imports);\\n    return \
__wbg_finalize_init(instance, module);\\n  }\\n  var ch2 = {};\\n  var wk = \
function(c, id, msg, transfer, cb) {\\n    var w = new Worker(ch2[id] || \
(ch2[id] = URL.createObjectURL(new Blob([\\n      c + \
\\';addEventListener(\"error\",function(e){e=e.error;postMessage({$e$:[e.mess\
age,e.code,e.stack]})})\\'\\n    ], { type: \"text/javascript\" }))));\\n    \
w.onmessage = function(e) {\\n      var d = e.data, ed = d.$e$;\\n      if \
(ed) {\\n        var err2 = new Error(ed[0]);\\n        err2[\"code\"] = \
ed[1];\\n        err2.stack = ed[2];\\n        cb(err2, null);\\n      } \
else\\n        cb(null, d);\\n    };\\n    w.postMessage(msg, transfer);\\n   \
 return w;\\n  };\\n  var u8 = Uint8Array, u16 = Uint16Array, i32 = \
Int32Array;\\n  var fleb = new u8([\\n    0,\\n    0,\\n    0,\\n    0,\\n    \
0,\\n    0,\\n    0,\\n    0,\\n    1,\\n    1,\\n    1,\\n    1,\\n    2,\\n \
   2,\\n    2,\\n    2,\\n    3,\\n    3,\\n    3,\\n    3,\\n    4,\\n    \
4,\\n    4,\\n    4,\\n    5,\\n    5,\\n    5,\\n    5,\\n    0,\\n    /* \
unused */\\n    0,\\n    0,\\n    /* impossible */\\n    0\\n  ]);\\n  var \
fdeb = new u8([\\n    0,\\n    0,\\n    0,\\n    0,\\n    1,\\n    1,\\n    \
2,\\n    2,\\n    3,\\n    3,\\n    4,\\n    4,\\n    5,\\n    5,\\n    6,\\n \
   6,\\n    7,\\n    7,\\n    8,\\n    8,\\n    9,\\n    9,\\n    10,\\n    \
10,\\n    11,\\n    11,\\n    12,\\n    12,\\n    13,\\n    13,\\n    /* \
unused */\\n    0,\\n    0\\n  ]);\\n  var clim = new u8([16, 17, 18, 0, 8, \
7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\\n  var freb = function(eb, \
start) {\\n    var b = new u16(31);\\n    for (var i2 = 0; i2 < 31; ++i2) \
{\\n      b[i2] = start += 1 << eb[i2 - 1];\\n    }\\n    var r = new \
i32(b[30]);\\n    for (var i2 = 1; i2 < 30; ++i2) {\\n      for (var j = \
b[i2]; j < b[i2 + 1]; ++j) {\\n        r[j] = j - b[i2] << 5 | i2;\\n      \
}\\n    }\\n    return { b, r };\\n  };\\n  var _a = freb(fleb, 2), fl = \
_a.b, revfl = _a.r;\\n  fl[28] = 258, revfl[258] = 28;\\n  var _b = \
freb(fdeb, 0), fd = _b.b;\\n  var rev = new u16(32768);\\n  for (var i = 0; i \
< 32768; ++i) {\\n    var x = (i & 43690) >> 1 | (i & 21845) << 1;\\n    x = \
(x & 52428) >> 2 | (x & 13107) << 2;\\n    x = (x & 61680) >> 4 | (x & 3855) \
<< 4;\\n    rev[i] = ((x & 65280) >> 8 | (x & 255) << 8) >> 1;\\n  }\\n  var \
hMap = function(cd, mb, r) {\\n    var s = cd.length;\\n    var i2 = 0;\\n    \
var l = new u16(mb);\\n    for (; i2 < s; ++i2) {\\n      if (cd[i2])\\n      \
  ++l[cd[i2] - 1];\\n    }\\n    var le = new u16(mb);\\n    for (i2 = 1; i2 \
< mb; ++i2) {\\n      le[i2] = le[i2 - 1] + l[i2 - 1] << 1;\\n    }\\n    var \
co;\\n    if (r) {\\n      co = new u16(1 << mb);\\n      var rvb = 15 - \
mb;\\n      for (i2 = 0; i2 < s; ++i2) {\\n        if (cd[i2]) {\\n          \
var sv = i2 << 4 | cd[i2];\\n          var r_1 = mb - cd[i2];\\n          var \
v = le[cd[i2] - 1]++ << r_1;\\n          for (var m = v | (1 << r_1) - 1; v \
<= m; ++v) {\\n            co[rev[v] >> rvb] = sv;\\n          }\\n        \
}\\n      }\\n    } else {\\n      co = new u16(s);\\n      for (i2 = 0; i2 < \
s; ++i2) {\\n        if (cd[i2]) {\\n          co[i2] = rev[le[cd[i2] - 1]++] \
>> 15 - cd[i2];\\n        }\\n      }\\n    }\\n    return co;\\n  };\\n  var \
flt = new u8(288);\\n  for (var i = 0; i < 144; ++i)\\n    flt[i] = 8;\\n  \
for (var i = 144; i < 256; ++i)\\n    flt[i] = 9;\\n  for (var i = 256; i < \
280; ++i)\\n    flt[i] = 7;\\n  for (var i = 280; i < 288; ++i)\\n    flt[i] \
= 8;\\n  var fdt = new u8(32);\\n  for (var i = 0; i < 32; ++i)\\n    fdt[i] \
= 5;\\n  var flrm = /* @__PURE__ */ hMap(flt, 9, 1);\\n  var fdrm = /* \
@__PURE__ */ hMap(fdt, 5, 1);\\n  var max = function(a) {\\n    var m = \
a[0];\\n    for (var i2 = 1; i2 < a.length; ++i2) {\\n      if (a[i2] > m)\\n \
       m = a[i2];\\n    }\\n    return m;\\n  };\\n  var bits = function(d, \
p, m) {\\n    var o = p / 8 | 0;\\n    return (d[o] | d[o + 1] << 8) >> (p & \
7) & m;\\n  };\\n  var bits16 = function(d, p) {\\n    var o = p / 8 | 0;\\n  \
  return (d[o] | d[o + 1] << 8 | d[o + 2] << 16) >> (p & 7);\\n  };\\n  var \
shft = function(p) {\\n    return (p + 7) / 8 | 0;\\n  };\\n  var slc = \
function(v, s, e) {\\n    if (s == null || s < 0)\\n      s = 0;\\n    if (e \
== null || e > v.length)\\n      e = v.length;\\n    return new \
u8(v.subarray(s, e));\\n  };\\n  var ec = [\\n    \"unexpected EOF\",\\n    \
\"invalid block type\",\\n    \"invalid length/literal\",\\n    \"invalid \
distance\",\\n    \"stream finished\",\\n    \"no stream handler\",\\n    \
,\\n    \"no callback\",\\n    \"invalid UTF-8 data\",\\n    \"extra field \
too long\",\\n    \"date not in range 1980-2099\",\\n    \"filename too \
long\",\\n    \"stream finishing\",\\n    \"invalid zip data\"\\n    // \
determined by unknown compression method\\n  ];\\n  var err = function(ind, \
msg, nt) {\\n    var e = new Error(msg || ec[ind]);\\n    e.code = ind;\\n    \
if (Error.captureStackTrace)\\n      Error.captureStackTrace(e, err);\\n    \
if (!nt)\\n      throw e;\\n    return e;\\n  };\\n  var inflt = \
function(dat, st, buf, dict) {\\n    var sl = dat.length, dl = dict ? \
dict.length : 0;\\n    if (!sl || st.f && !st.l)\\n      return buf || new \
u8(0);\\n    var noBuf = !buf;\\n    var resize = noBuf || st.i != 2;\\n    \
var noSt = st.i;\\n    if (noBuf)\\n      buf = new u8(sl * 3);\\n    var \
cbuf = function(l2) {\\n      var bl = buf.length;\\n      if (l2 > bl) {\\n  \
      var nbuf = new u8(Math.max(bl * 2, l2));\\n        nbuf.set(buf);\\n    \
    buf = nbuf;\\n      }\\n    };\\n    var final = st.f || 0, pos = st.p || \
0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;\\n    var \
tbts = sl * 8;\\n    do {\\n      if (!lm) {\\n        final = bits(dat, pos, \
1);\\n        var type = bits(dat, pos + 1, 3);\\n        pos += 3;\\n        \
if (!type) {\\n          var s = shft(pos) + 4, l = dat[s - 4] | dat[s - 3] \
<< 8, t = s + l;\\n          if (t > sl) {\\n            if (noSt)\\n         \
     err(0);\\n            break;\\n          }\\n          if (resize)\\n    \
        cbuf(bt + l);\\n          buf.set(dat.subarray(s, t), bt);\\n         \
 st.b = bt += l, st.p = pos = t * 8, st.f = final;\\n          continue;\\n   \
     } else if (type == 1)\\n          lm = flrm, dm = fdrm, lbt = 9, dbt = \
5;\\n        else if (type == 2) {\\n          var hLit = bits(dat, pos, 31) \
+ 257, hcLen = bits(dat, pos + 10, 15) + 4;\\n          var tl = hLit + \
bits(dat, pos + 5, 31) + 1;\\n          pos += 14;\\n          var ldt = new \
u8(tl);\\n          var clt = new u8(19);\\n          for (var i2 = 0; i2 < \
hcLen; ++i2) {\\n            clt[clim[i2]] = bits(dat, pos + i2 * 3, 7);\\n   \
       }\\n          pos += hcLen * 3;\\n          var clb = max(clt), clbmsk \
= (1 << clb) - 1;\\n          var clm = hMap(clt, clb, 1);\\n          for \
(var i2 = 0; i2 < tl; ) {\\n            var r = clm[bits(dat, pos, \
clbmsk)];\\n            pos += r & 15;\\n            var s = r >> 4;\\n       \
     if (s < 16) {\\n              ldt[i2++] = s;\\n            } else {\\n   \
           var c = 0, n = 0;\\n              if (s == 16)\\n                n \
= 3 + bits(dat, pos, 3), pos += 2, c = ldt[i2 - 1];\\n              else if \
(s == 17)\\n                n = 3 + bits(dat, pos, 7), pos += 3;\\n           \
   else if (s == 18)\\n                n = 11 + bits(dat, pos, 127), pos += \
7;\\n              while (n--)\\n                ldt[i2++] = c;\\n            \
}\\n          }\\n          var lt = ldt.subarray(0, hLit), dt = \
ldt.subarray(hLit);\\n          lbt = max(lt);\\n          dbt = max(dt);\\n  \
        lm = hMap(lt, lbt, 1);\\n          dm = hMap(dt, dbt, 1);\\n        } \
else\\n          err(1);\\n        if (pos > tbts) {\\n          if (noSt)\\n \
           err(0);\\n          break;\\n        }\\n      }\\n      if \
(resize)\\n        cbuf(bt + 131072);\\n      var lms = (1 << lbt) - 1, dms = \
(1 << dbt) - 1;\\n      var lpos = pos;\\n      for (; ; lpos = pos) {\\n     \
   var c = lm[bits16(dat, pos) & lms], sym = c >> 4;\\n        pos += c & \
15;\\n        if (pos > tbts) {\\n          if (noSt)\\n            \
err(0);\\n          break;\\n        }\\n        if (!c)\\n          \
err(2);\\n        if (sym < 256)\\n          buf[bt++] = sym;\\n        else \
if (sym == 256) {\\n          lpos = pos, lm = null;\\n          break;\\n    \
    } else {\\n          var add = sym - 254;\\n          if (sym > 264) {\\n \
           var i2 = sym - 257, b = fleb[i2];\\n            add = bits(dat, \
pos, (1 << b) - 1) + fl[i2];\\n            pos += b;\\n          }\\n         \
 var d = dm[bits16(dat, pos) & dms], dsym = d >> 4;\\n          if (!d)\\n    \
        err(3);\\n          pos += d & 15;\\n          var dt = fd[dsym];\\n  \
        if (dsym > 3) {\\n            var b = fdeb[dsym];\\n            dt += \
bits16(dat, pos) & (1 << b) - 1, pos += b;\\n          }\\n          if (pos \
> tbts) {\\n            if (noSt)\\n              err(0);\\n            \
break;\\n          }\\n          if (resize)\\n            cbuf(bt + \
131072);\\n          var end = bt + add;\\n          if (bt < dt) {\\n        \
    var shift = dl - dt, dend = Math.min(dt, end);\\n            if (shift + \
bt < 0)\\n              err(3);\\n            for (; bt < dend; ++bt)\\n      \
        buf[bt] = dict[shift + bt];\\n          }\\n          for (; bt < \
end; ++bt)\\n            buf[bt] = buf[bt - dt];\\n        }\\n      }\\n     \
 st.l = lm, st.p = lpos, st.b = bt, st.f = final;\\n      if (lm)\\n        \
final = 1, st.m = lbt, st.d = dm, st.n = dbt;\\n    } while (!final);\\n    \
return bt != buf.length && noBuf ? slc(buf, 0, bt) : buf.subarray(0, bt);\\n  \
};\\n  var et = /* @__PURE__ */ new u8(0);\\n  var mrg = function(a, b) {\\n  \
  var o = {};\\n    for (var k in a)\\n      o[k] = a[k];\\n    for (var k in \
b)\\n      o[k] = b[k];\\n    return o;\\n  };\\n  var wcln = function(fn, \
fnStr, td2) {\\n    var dt = fn();\\n    var st = fn.toString();\\n    var ks \
= st.slice(st.indexOf(\"[\") + 1, st.lastIndexOf(\"]\")).replace(/\\\\s+/g, \
\"\").split(\",\");\\n    for (var i2 = 0; i2 < dt.length; ++i2) {\\n      \
var v = dt[i2], k = ks[i2];\\n      if (typeof v == \"function\") {\\n        \
fnStr += \";\" + k + \"=\";\\n        var st_1 = v.toString();\\n        if \
(v.prototype) {\\n          if (st_1.indexOf(\"[native code]\") != -1) {\\n   \
         var spInd = st_1.indexOf(\" \", 8) + 1;\\n            fnStr += \
st_1.slice(spInd, st_1.indexOf(\"(\", spInd));\\n          } else {\\n        \
    fnStr += st_1;\\n            for (var t in v.prototype)\\n              \
fnStr += \";\" + k + \".prototype.\" + t + \"=\" + \
v.prototype[t].toString();\\n          }\\n        } else\\n          fnStr \
+= st_1;\\n      } else\\n        td2[k] = v;\\n    }\\n    return fnStr;\\n  \
};\\n  var ch = [];\\n  var cbfs = function(v) {\\n    var tl = [];\\n    for \
(var k in v) {\\n      if (v[k].buffer) {\\n        tl.push((v[k] = new \
v[k].constructor(v[k])).buffer);\\n      }\\n    }\\n    return tl;\\n  };\\n \
 var wrkr = function(fns, init, id, cb) {\\n    if (!ch[id]) {\\n      var \
fnStr = \"\", td_1 = {}, m = fns.length - 1;\\n      for (var i2 = 0; i2 < m; \
++i2)\\n        fnStr = wcln(fns[i2], fnStr, td_1);\\n      ch[id] = { c: \
wcln(fns[m], fnStr, td_1), e: td_1 };\\n    }\\n    var td2 = mrg({}, \
ch[id].e);\\n    return wk(ch[id].c + \";onmessage=function(e){for(var k in \
e.data)self[k]=e.data[k];onmessage=\" + init.toString() + \"}\", id, td2, \
cbfs(td2), cb);\\n  };\\n  var bInflt = function() {\\n    return [u8, u16, \
i32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, ec, hMap, max, bits, bits16, \
shft, slc, err, inflt, inflateSync, pbf, gopt];\\n  };\\n  var pbf = \
function(msg) {\\n    return postMessage(msg, [msg.buffer]);\\n  };\\n  var \
gopt = function(o) {\\n    return o && {\\n      out: o.size && new \
u8(o.size),\\n      dictionary: o.dictionary\\n    };\\n  };\\n  var cbify = \
function(dat, opts, fns, init, id, cb) {\\n    var w = wrkr(fns, init, id, \
function(err2, dat2) {\\n      w.terminate();\\n      cb(err2, dat2);\\n    \
});\\n    w.postMessage([dat, opts], opts.consume ? [dat.buffer] : []);\\n    \
return function() {\\n      w.terminate();\\n    };\\n  };\\n  var b2 = \
function(d, b) {\\n    return d[b] | d[b + 1] << 8;\\n  };\\n  var b4 = \
function(d, b) {\\n    return (d[b] | d[b + 1] << 8 | d[b + 2] << 16 | d[b + \
3] << 24) >>> 0;\\n  };\\n  var b8 = function(d, b) {\\n    return b4(d, b) + \
b4(d, b + 4) * 4294967296;\\n  };\\n  var gzs = function(d) {\\n    if (d[0] \
!= 31 || d[1] != 139 || d[2] != 8)\\n      err(6, \"invalid gzip data\");\\n  \
  var flg = d[3];\\n    var st = 10;\\n    if (flg & 4)\\n      st += (d[10] \
| d[11] << 8) + 2;\\n    for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > \
0; zs -= !d[st++])\\n      ;\\n    return st + (flg & 2);\\n  };\\n  var \
Inflate = /* @__PURE__ */ function() {\\n    function Inflate2(opts, cb) {\\n \
     if (typeof opts == \"function\")\\n        cb = opts, opts = {};\\n      \
this.ondata = cb;\\n      var dict = opts && opts.dictionary && \
opts.dictionary.subarray(-32768);\\n      this.s = { i: 0, b: dict ? \
dict.length : 0 };\\n      this.o = new u8(32768);\\n      this.p = new \
u8(0);\\n      if (dict)\\n        this.o.set(dict);\\n    }\\n    \
Inflate2.prototype.e = function(c) {\\n      if (!this.ondata)\\n        \
err(5);\\n      if (this.d)\\n        err(4);\\n      if (!this.p.length)\\n  \
      this.p = c;\\n      else if (c.length) {\\n        var n = new \
u8(this.p.length + c.length);\\n        n.set(this.p), n.set(c, \
this.p.length), this.p = n;\\n      }\\n    };\\n    Inflate2.prototype.c = \
function(final) {\\n      this.s.i = +(this.d = final || false);\\n      var \
bts = this.s.b;\\n      var dt = inflt(this.p, this.s, this.o);\\n      \
this.ondata(slc(dt, bts, this.s.b), this.d);\\n      this.o = slc(dt, \
this.s.b - 32768), this.s.b = this.o.length;\\n      this.p = slc(this.p, \
this.s.p / 8 | 0), this.s.p &= 7;\\n    };\\n    Inflate2.prototype.push = \
function(chunk, final) {\\n      this.e(chunk), this.c(final);\\n    };\\n    \
return Inflate2;\\n  }();\\n  function inflate(data, opts, cb) {\\n    if \
(!cb)\\n      cb = opts, opts = {};\\n    if (typeof cb != \"function\")\\n   \
   err(7);\\n    return cbify(data, opts, [\\n      bInflt\\n    ], \
function(ev) {\\n      return pbf(inflateSync(ev.data[0], \
gopt(ev.data[1])));\\n    }, 1, cb);\\n  }\\n  function inflateSync(data, \
opts) {\\n    return inflt(data, { i: 2 }, opts && opts.out, opts && \
opts.dictionary);\\n  }\\n  var Gunzip = /* @__PURE__ */ function() {\\n    \
function Gunzip2(opts, cb) {\\n      this.v = 1;\\n      this.r = 0;\\n      \
Inflate.call(this, opts, cb);\\n    }\\n    Gunzip2.prototype.push = \
function(chunk, final) {\\n      Inflate.prototype.e.call(this, chunk);\\n    \
  this.r += chunk.length;\\n      if (this.v) {\\n        var p = \
this.p.subarray(this.v - 1);\\n        var s = p.length > 3 ? gzs(p) : 4;\\n  \
      if (s > p.length) {\\n          if (!final)\\n            return;\\n    \
    } else if (this.v > 1 && this.onmember) {\\n          \
this.onmember(this.r - p.length);\\n        }\\n        this.p = \
p.subarray(s), this.v = 0;\\n      }\\n      Inflate.prototype.c.call(this, \
final);\\n      if (this.s.f && !this.s.l && !final) {\\n        this.v = \
shft(this.s.p) + 9;\\n        this.s = { i: 0 };\\n        this.o = new \
u8(0);\\n        this.push(new u8(0), final);\\n      }\\n    };\\n    return \
Gunzip2;\\n  }();\\n  var td = typeof TextDecoder != \"undefined\" && /* \
@__PURE__ */ new TextDecoder();\\n  try {\\n    td.decode(et, { stream: true \
});\\n  } catch (e) {\\n  }\\n  var dutf8 = function(d) {\\n    for (var r = \
\"\", i2 = 0; ; ) {\\n      var c = d[i2++];\\n      var eb = (c > 127) + (c \
> 223) + (c > 239);\\n      if (i2 + eb > d.length)\\n        return { s: r, \
r: slc(d, i2 - 1) };\\n      if (!eb)\\n        r += \
String.fromCharCode(c);\\n      else if (eb == 3) {\\n        c = ((c & 15) \
<< 18 | (d[i2++] & 63) << 12 | (d[i2++] & 63) << 6 | d[i2++] & 63) - 65536, r \
+= String.fromCharCode(55296 | c >> 10, 56320 | c & 1023);\\n      } else if \
(eb & 1)\\n        r += String.fromCharCode((c & 31) << 6 | d[i2++] & 63);\\n \
     else\\n        r += String.fromCharCode((c & 15) << 12 | (d[i2++] & 63) \
<< 6 | d[i2++] & 63);\\n    }\\n  };\\n  function strFromU8(dat, latin1) {\\n \
   if (latin1) {\\n      var r = \"\";\\n      for (var i2 = 0; i2 < \
dat.length; i2 += 16384)\\n        r += String.fromCharCode.apply(null, \
dat.subarray(i2, i2 + 16384));\\n      return r;\\n    } else if (td) {\\n    \
  return td.decode(dat);\\n    } else {\\n      var _a2 = dutf8(dat), s = \
_a2.s, r = _a2.r;\\n      if (r.length)\\n        err(8);\\n      return \
s;\\n    }\\n  }\\n  var slzh = function(d, b) {\\n    return b + 30 + b2(d, \
b + 26) + b2(d, b + 28);\\n  };\\n  var zh = function(d, b, z) {\\n    var \
fnl = b2(d, b + 28), fn = strFromU8(d.subarray(b + 46, b + 46 + fnl), !(b2(d, \
b + 8) & 2048)), es = b + 46 + fnl, bs = b4(d, b + 20);\\n    var _a2 = z && \
bs == 4294967295 ? z64e(d, es) : [bs, b4(d, b + 24), b4(d, b + 42)], sc = \
_a2[0], su = _a2[1], off = _a2[2];\\n    return [b2(d, b + 10), sc, su, fn, \
es + b2(d, b + 30) + b2(d, b + 32), off];\\n  };\\n  var z64e = function(d, \
b) {\\n    for (; b2(d, b) != 1; b += 4 + b2(d, b + 2))\\n      ;\\n    \
return [b8(d, b + 12), b8(d, b + 4), b8(d, b + 20)];\\n  };\\n  var mt = \
typeof queueMicrotask == \"function\" ? queueMicrotask : typeof setTimeout == \
\"function\" ? setTimeout : function(fn) {\\n    fn();\\n  };\\n  function \
unzip(data, opts, cb) {\\n    if (!cb)\\n      cb = opts, opts = {};\\n    if \
(typeof cb != \"function\")\\n      err(7);\\n    var term = [];\\n    var \
tAll = function() {\\n      for (var i3 = 0; i3 < term.length; ++i3)\\n       \
 term[i3]();\\n    };\\n    var files = {};\\n    var cbd = function(a, b) \
{\\n      mt(function() {\\n        cb(a, b);\\n      });\\n    };\\n    \
mt(function() {\\n      cbd = cb;\\n    });\\n    var e = data.length - \
22;\\n    for (; b4(data, e) != 101010256; --e) {\\n      if (!e || \
data.length - e > 65558) {\\n        cbd(err(13, 0, 1), null);\\n        \
return tAll;\\n      }\\n    }\\n    var lft = b2(data, e + 8);\\n    if \
(lft) {\\n      var c = lft;\\n      var o = b4(data, e + 16);\\n      var z \
= o == 4294967295 || c == 65535;\\n      if (z) {\\n        var ze = b4(data, \
e - 12);\\n        z = b4(data, ze) == 101075792;\\n        if (z) {\\n       \
   c = lft = b4(data, ze + 32);\\n          o = b4(data, ze + 48);\\n        \
}\\n      }\\n      var fltr = opts && opts.filter;\\n      var _loop_3 = \
function(i3) {\\n        var _a2 = zh(data, o, z), c_1 = _a2[0], sc = _a2[1], \
su = _a2[2], fn = _a2[3], no = _a2[4], off = _a2[5], b = slzh(data, off);\\n  \
      o = no;\\n        var cbl = function(e2, d) {\\n          if (e2) {\\n  \
          tAll();\\n            cbd(e2, null);\\n          } else {\\n        \
    if (d)\\n              files[fn] = d;\\n            if (!--lft)\\n        \
      cbd(null, files);\\n          }\\n        };\\n        if (!fltr || \
fltr({\\n          name: fn,\\n          size: sc,\\n          originalSize: \
su,\\n          compression: c_1\\n        })) {\\n          if (!c_1)\\n     \
       cbl(null, slc(data, b, b + sc));\\n          else if (c_1 == 8) {\\n   \
         var infl = data.subarray(b, b + sc);\\n            if (su < 524288 \
|| sc > 0.8 * su) {\\n              try {\\n                cbl(null, \
inflateSync(infl, { out: new u8(su) }));\\n              } catch (e2) {\\n    \
            cbl(e2, null);\\n              }\\n            } else\\n          \
    term.push(inflate(infl, { size: su }, cbl));\\n          } else\\n        \
    cbl(err(14, \"unknown compression type \" + c_1, 1), null);\\n        } \
else\\n          cbl(null, null);\\n      };\\n      for (var i2 = 0; i2 < c; \
++i2) {\\n        _loop_3(i2);\\n      }\\n    } else\\n      cbd(null, \
{});\\n    return tAll;\\n  }\\n  function unzipSync(data, opts) {\\n    var \
files = {};\\n    var e = data.length - 22;\\n    for (; b4(data, e) != \
101010256; --e) {\\n      if (!e || data.length - e > 65558)\\n        \
err(13);\\n    }\\n    var c = b2(data, e + 8);\\n    if (!c)\\n      return \
{};\\n    var o = b4(data, e + 16);\\n    var z = o == 4294967295 || c == \
65535;\\n    if (z) {\\n      var ze = b4(data, e - 12);\\n      z = b4(data, \
ze) == 101075792;\\n      if (z) {\\n        c = b4(data, ze + 32);\\n        \
o = b4(data, ze + 48);\\n      }\\n    }\\n    var fltr = opts && \
opts.filter;\\n    for (var i2 = 0; i2 < c; ++i2) {\\n      var _a2 = \
zh(data, o, z), c_2 = _a2[0], sc = _a2[1], su = _a2[2], fn = _a2[3], no = \
_a2[4], off = _a2[5], b = slzh(data, off);\\n      o = no;\\n      if (!fltr \
|| fltr({\\n        name: fn,\\n        size: sc,\\n        originalSize: \
su,\\n        compression: c_2\\n      })) {\\n        if (!c_2)\\n          \
files[fn] = slc(data, b, b + sc);\\n        else if (c_2 == 8)\\n          \
files[fn] = inflateSync(data.subarray(b, b + sc), { out: new u8(su) });\\n    \
    else\\n          err(14, \"unknown compression type \" + c_2);\\n      \
}\\n    }\\n    return files;\\n  }\\n  /**\\n   * @license\\n   * Copyright \
2010-2025 Three.js Authors\\n   * SPDX-License-Identifier: MIT\\n   */\\n  \
const REVISION = \"178\";\\n  const NoColorSpace = \"\";\\n  const \
SRGBColorSpace = \"srgb\";\\n  const LinearSRGBColorSpace = \
\"srgb-linear\";\\n  const LinearTransfer = \"linear\";\\n  const \
SRGBTransfer = \"srgb\";\\n  function clamp(value, min, max2) {\\n    return \
Math.max(min, Math.min(max2, value));\\n  }\\n  function euclideanModulo(n, \
m) {\\n    return (n % m + m) % m;\\n  }\\n  function lerp(x2, y, t) {\\n    \
return (1 - t) * x2 + t * y;\\n  }\\n  class Quaternion {\\n    /**\\n     * \
Constructs a new quaternion.\\n     *\\n     * @param {number} [x=0] - The x \
value of this quaternion.\\n     * @param {number} [y=0] - The y value of \
this quaternion.\\n     * @param {number} [z=0] - The z value of this \
quaternion.\\n     * @param {number} [w=1] - The w value of this \
quaternion.\\n     */\\n    constructor(x2 = 0, y = 0, z = 0, w = 1) {\\n     \
 this.isQuaternion = true;\\n      this._x = x2;\\n      this._y = y;\\n      \
this._z = z;\\n      this._w = w;\\n    }\\n    /**\\n     * Interpolates \
between two quaternions via SLERP. This implementation assumes the\\n     * \
quaternion data are managed  in flat arrays.\\n     *\\n     * @param \
{Array<number>} dst - The destination array.\\n     * @param {number} \
dstOffset - An offset into the destination array.\\n     * @param \
{Array<number>} src0 - The source array of the first quaternion.\\n     * \
@param {number} srcOffset0 - An offset into the first source array.\\n     * \
@param {Array<number>} src1 -  The source array of the second quaternion.\\n  \
   * @param {number} srcOffset1 - An offset into the second source array.\\n  \
   * @param {number} t - The interpolation factor in the range `[0,1]`.\\n    \
 * @see {@link Quaternion#slerp}\\n     */\\n    static slerpFlat(dst, \
dstOffset, src0, srcOffset0, src1, srcOffset1, t) {\\n      let x0 = \
src0[srcOffset0 + 0], y0 = src0[srcOffset0 + 1], z0 = src0[srcOffset0 + 2], \
w0 = src0[srcOffset0 + 3];\\n      const x1 = src1[srcOffset1 + 0], y1 = \
src1[srcOffset1 + 1], z1 = src1[srcOffset1 + 2], w1 = src1[srcOffset1 + \
3];\\n      if (t === 0) {\\n        dst[dstOffset + 0] = x0;\\n        \
dst[dstOffset + 1] = y0;\\n        dst[dstOffset + 2] = z0;\\n        \
dst[dstOffset + 3] = w0;\\n        return;\\n      }\\n      if (t === 1) \
{\\n        dst[dstOffset + 0] = x1;\\n        dst[dstOffset + 1] = y1;\\n    \
    dst[dstOffset + 2] = z1;\\n        dst[dstOffset + 3] = w1;\\n        \
return;\\n      }\\n      if (w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== \
z1) {\\n        let s = 1 - t;\\n        const cos = x0 * x1 + y0 * y1 + z0 * \
z1 + w0 * w1, dir = cos >= 0 ? 1 : -1, sqrSin = 1 - cos * cos;\\n        if \
(sqrSin > Number.EPSILON) {\\n          const sin = Math.sqrt(sqrSin), len = \
Math.atan2(sin, cos * dir);\\n          s = Math.sin(s * len) / sin;\\n       \
   t = Math.sin(t * len) / sin;\\n        }\\n        const tDir = t * \
dir;\\n        x0 = x0 * s + x1 * tDir;\\n        y0 = y0 * s + y1 * tDir;\\n \
       z0 = z0 * s + z1 * tDir;\\n        w0 = w0 * s + w1 * tDir;\\n        \
if (s === 1 - t) {\\n          const f = 1 / Math.sqrt(x0 * x0 + y0 * y0 + z0 \
* z0 + w0 * w0);\\n          x0 *= f;\\n          y0 *= f;\\n          z0 *= \
f;\\n          w0 *= f;\\n        }\\n      }\\n      dst[dstOffset] = x0;\\n \
     dst[dstOffset + 1] = y0;\\n      dst[dstOffset + 2] = z0;\\n      \
dst[dstOffset + 3] = w0;\\n    }\\n    /**\\n     * Multiplies two \
quaternions. This implementation assumes the quaternion data are managed\\n   \
  * in flat arrays.\\n     *\\n     * @param {Array<number>} dst - The \
destination array.\\n     * @param {number} dstOffset - An offset into the \
destination array.\\n     * @param {Array<number>} src0 - The source array of \
the first quaternion.\\n     * @param {number} srcOffset0 - An offset into \
the first source array.\\n     * @param {Array<number>} src1 -  The source \
array of the second quaternion.\\n     * @param {number} srcOffset1 - An \
offset into the second source array.\\n     * @return {Array<number>} The \
destination array.\\n     * @see {@link Quaternion#multiplyQuaternions}.\\n   \
  */\\n    static multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, \
src1, srcOffset1) {\\n      const x0 = src0[srcOffset0];\\n      const y0 = \
src0[srcOffset0 + 1];\\n      const z0 = src0[srcOffset0 + 2];\\n      const \
w0 = src0[srcOffset0 + 3];\\n      const x1 = src1[srcOffset1];\\n      const \
y1 = src1[srcOffset1 + 1];\\n      const z1 = src1[srcOffset1 + 2];\\n      \
const w1 = src1[srcOffset1 + 3];\\n      dst[dstOffset] = x0 * w1 + w0 * x1 + \
y0 * z1 - z0 * y1;\\n      dst[dstOffset + 1] = y0 * w1 + w0 * y1 + z0 * x1 - \
x0 * z1;\\n      dst[dstOffset + 2] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * \
x1;\\n      dst[dstOffset + 3] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\\n    \
  return dst;\\n    }\\n    /**\\n     * The x value of this quaternion.\\n   \
  *\\n     * @type {number}\\n     * @default 0\\n     */\\n    get x() {\\n  \
    return this._x;\\n    }\\n    set x(value) {\\n      this._x = value;\\n  \
    this._onChangeCallback();\\n    }\\n    /**\\n     * The y value of this \
quaternion.\\n     *\\n     * @type {number}\\n     * @default 0\\n     */\\n \
   get y() {\\n      return this._y;\\n    }\\n    set y(value) {\\n      \
this._y = value;\\n      this._onChangeCallback();\\n    }\\n    /**\\n     * \
The z value of this quaternion.\\n     *\\n     * @type {number}\\n     * \
@default 0\\n     */\\n    get z() {\\n      return this._z;\\n    }\\n    \
set z(value) {\\n      this._z = value;\\n      this._onChangeCallback();\\n  \
  }\\n    /**\\n     * The w value of this quaternion.\\n     *\\n     * \
@type {number}\\n     * @default 1\\n     */\\n    get w() {\\n      return \
this._w;\\n    }\\n    set w(value) {\\n      this._w = value;\\n      \
this._onChangeCallback();\\n    }\\n    /**\\n     * Sets the quaternion \
components.\\n     *\\n     * @param {number} x - The x value of this \
quaternion.\\n     * @param {number} y - The y value of this quaternion.\\n   \
  * @param {number} z - The z value of this quaternion.\\n     * @param \
{number} w - The w value of this quaternion.\\n     * @return {Quaternion} A \
reference to this quaternion.\\n     */\\n    set(x2, y, z, w) {\\n      \
this._x = x2;\\n      this._y = y;\\n      this._z = z;\\n      this._w = \
w;\\n      this._onChangeCallback();\\n      return this;\\n    }\\n    \
/**\\n     * Returns a new quaternion with copied values from this \
instance.\\n     *\\n     * @return {Quaternion} A clone of this instance.\\n \
    */\\n    clone() {\\n      return new this.constructor(this._x, this._y, \
this._z, this._w);\\n    }\\n    /**\\n     * Copies the values of the given \
quaternion to this instance.\\n     *\\n     * @param {Quaternion} quaternion \
- The quaternion to copy.\\n     * @return {Quaternion} A reference to this \
quaternion.\\n     */\\n    copy(quaternion) {\\n      this._x = \
quaternion.x;\\n      this._y = quaternion.y;\\n      this._z = \
quaternion.z;\\n      this._w = quaternion.w;\\n      \
this._onChangeCallback();\\n      return this;\\n    }\\n    /**\\n     * \
Sets this quaternion from the rotation specified by the given\\n     * Euler \
angles.\\n     *\\n     * @param {Euler} euler - The Euler angles.\\n     * \
@param {boolean} [update=true] - Whether the internal `onChange` callback \
should be executed or not.\\n     * @return {Quaternion} A reference to this \
quaternion.\\n     */\\n    setFromEuler(euler, update = true) {\\n      \
const x2 = euler._x, y = euler._y, z = euler._z, order = euler._order;\\n     \
 const cos = Math.cos;\\n      const sin = Math.sin;\\n      const c1 = \
cos(x2 / 2);\\n      const c2 = cos(y / 2);\\n      const c3 = cos(z / 2);\\n \
     const s1 = sin(x2 / 2);\\n      const s2 = sin(y / 2);\\n      const s3 \
= sin(z / 2);\\n      switch (order) {\\n        case \"XYZ\":\\n          \
this._x = s1 * c2 * c3 + c1 * s2 * s3;\\n          this._y = c1 * s2 * c3 - \
s1 * c2 * s3;\\n          this._z = c1 * c2 * s3 + s1 * s2 * c3;\\n          \
this._w = c1 * c2 * c3 - s1 * s2 * s3;\\n          break;\\n        case \
\"YXZ\":\\n          this._x = s1 * c2 * c3 + c1 * s2 * s3;\\n          \
this._y = c1 * s2 * c3 - s1 * c2 * s3;\\n          this._z = c1 * c2 * s3 - \
s1 * s2 * c3;\\n          this._w = c1 * c2 * c3 + s1 * s2 * s3;\\n          \
break;\\n        case \"ZXY\":\\n          this._x = s1 * c2 * c3 - c1 * s2 * \
s3;\\n          this._y = c1 * s2 * c3 + s1 * c2 * s3;\\n          this._z = \
c1 * c2 * s3 + s1 * s2 * c3;\\n          this._w = c1 * c2 * c3 - s1 * s2 * \
s3;\\n          break;\\n        case \"ZYX\":\\n          this._x = s1 * c2 \
* c3 - c1 * s2 * s3;\\n          this._y = c1 * s2 * c3 + s1 * c2 * s3;\\n    \
      this._z = c1 * c2 * s3 - s1 * s2 * c3;\\n          this._w = c1 * c2 * \
c3 + s1 * s2 * s3;\\n          break;\\n        case \"YZX\":\\n          \
this._x = s1 * c2 * c3 + c1 * s2 * s3;\\n          this._y = c1 * s2 * c3 + \
s1 * c2 * s3;\\n          this._z = c1 * c2 * s3 - s1 * s2 * c3;\\n          \
this._w = c1 * c2 * c3 - s1 * s2 * s3;\\n          break;\\n        case \
\"XZY\":\\n          this._x = s1 * c2 * c3 - c1 * s2 * s3;\\n          \
this._y = c1 * s2 * c3 - s1 * c2 * s3;\\n          this._z = c1 * c2 * s3 + \
s1 * s2 * c3;\\n          this._w = c1 * c2 * c3 + s1 * s2 * s3;\\n          \
break;\\n        default:\\n          console.warn(\"THREE.Quaternion: \
.setFromEuler() encountered an unknown order: \" + order);\\n      }\\n      \
if (update === true) this._onChangeCallback();\\n      return this;\\n    \
}\\n    /**\\n     * Sets this quaternion from the given axis and angle.\\n   \
  *\\n     * @param {Vector3} axis - The normalized axis.\\n     * @param \
{number} angle - The angle in radians.\\n     * @return {Quaternion} A \
reference to this quaternion.\\n     */\\n    setFromAxisAngle(axis, angle) \
{\\n      const halfAngle = angle / 2, s = Math.sin(halfAngle);\\n      \
this._x = axis.x * s;\\n      this._y = axis.y * s;\\n      this._z = axis.z \
* s;\\n      this._w = Math.cos(halfAngle);\\n      \
this._onChangeCallback();\\n      return this;\\n    }\\n    /**\\n     * \
Sets this quaternion from the given rotation matrix.\\n     *\\n     * @param \
{Matrix4} m - A 4x4 matrix of which the upper 3x3 of matrix is a pure \
rotation matrix (i.e. unscaled).\\n     * @return {Quaternion} A reference to \
this quaternion.\\n     */\\n    setFromRotationMatrix(m) {\\n      const te \
= m.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = \
te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10], trace = m11 + m22 \
+ m33;\\n      if (trace > 0) {\\n        const s = 0.5 / Math.sqrt(trace + \
1);\\n        this._w = 0.25 / s;\\n        this._x = (m32 - m23) * s;\\n     \
   this._y = (m13 - m31) * s;\\n        this._z = (m21 - m12) * s;\\n      } \
else if (m11 > m22 && m11 > m33) {\\n        const s = 2 * Math.sqrt(1 + m11 \
- m22 - m33);\\n        this._w = (m32 - m23) / s;\\n        this._x = 0.25 * \
s;\\n        this._y = (m12 + m21) / s;\\n        this._z = (m13 + m31) / \
s;\\n      } else if (m22 > m33) {\\n        const s = 2 * Math.sqrt(1 + m22 \
- m11 - m33);\\n        this._w = (m13 - m31) / s;\\n        this._x = (m12 + \
m21) / s;\\n        this._y = 0.25 * s;\\n        this._z = (m23 + m32) / \
s;\\n      } else {\\n        const s = 2 * Math.sqrt(1 + m33 - m11 - \
m22);\\n        this._w = (m21 - m12) / s;\\n        this._x = (m13 + m31) / \
s;\\n        this._y = (m23 + m32) / s;\\n        this._z = 0.25 * s;\\n      \
}\\n      this._onChangeCallback();\\n      return this;\\n    }\\n    /**\\n \
    * Sets this quaternion to the rotation required to rotate the direction \
vector\\n     * `vFrom` to the direction vector `vTo`.\\n     *\\n     * \
@param {Vector3} vFrom - The first (normalized) direction vector.\\n     * \
@param {Vector3} vTo - The second (normalized) direction vector.\\n     * \
@return {Quaternion} A reference to this quaternion.\\n     */\\n    \
setFromUnitVectors(vFrom, vTo) {\\n      let r = vFrom.dot(vTo) + 1;\\n      \
if (r < 1e-8) {\\n        r = 0;\\n        if (Math.abs(vFrom.x) > \
Math.abs(vFrom.z)) {\\n          this._x = -vFrom.y;\\n          this._y = \
vFrom.x;\\n          this._z = 0;\\n          this._w = r;\\n        } else \
{\\n          this._x = 0;\\n          this._y = -vFrom.z;\\n          \
this._z = vFrom.y;\\n          this._w = r;\\n        }\\n      } else {\\n   \
     this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\\n        this._y = vFrom.z \
* vTo.x - vFrom.x * vTo.z;\\n        this._z = vFrom.x * vTo.y - vFrom.y * \
vTo.x;\\n        this._w = r;\\n      }\\n      return this.normalize();\\n   \
 }\\n    /**\\n     * Returns the angle between this quaternion and the given \
one in radians.\\n     *\\n     * @param {Quaternion} q - The quaternion to \
compute the angle with.\\n     * @return {number} The angle in radians.\\n    \
 */\\n    angleTo(q) {\\n      return 2 * \
Math.acos(Math.abs(clamp(this.dot(q), -1, 1)));\\n    }\\n    /**\\n     * \
Rotates this quaternion by a given angular step to the given quaternion.\\n   \
  * The method ensures that the final quaternion will not overshoot `q`.\\n   \
  *\\n     * @param {Quaternion} q - The target quaternion.\\n     * @param \
{number} step - The angular step in radians.\\n     * @return {Quaternion} A \
reference to this quaternion.\\n     */\\n    rotateTowards(q, step) {\\n     \
 const angle = this.angleTo(q);\\n      if (angle === 0) return this;\\n      \
const t = Math.min(1, step / angle);\\n      this.slerp(q, t);\\n      return \
this;\\n    }\\n    /**\\n     * Sets this quaternion to the identity \
quaternion; that is, to the\\n     * quaternion that represents \"no \
rotation\".\\n     *\\n     * @return {Quaternion} A reference to this \
quaternion.\\n     */\\n    identity() {\\n      return this.set(0, 0, 0, \
1);\\n    }\\n    /**\\n     * Inverts this quaternion via {@link \
Quaternion#conjugate}. The\\n     * quaternion is assumed to have unit \
length.\\n     *\\n     * @return {Quaternion} A reference to this \
quaternion.\\n     */\\n    invert() {\\n      return this.conjugate();\\n    \
}\\n    /**\\n     * Returns the rotational conjugate of this quaternion. The \
conjugate of a\\n     * quaternion represents the same rotation in the \
opposite direction about\\n     * the rotational axis.\\n     *\\n     * \
@return {Quaternion} A reference to this quaternion.\\n     */\\n    \
conjugate() {\\n      this._x *= -1;\\n      this._y *= -1;\\n      this._z \
*= -1;\\n      this._onChangeCallback();\\n      return this;\\n    }\\n    \
/**\\n     * Calculates the dot product of this quaternion and the given \
one.\\n     *\\n     * @param {Quaternion} v - The quaternion to compute the \
dot product with.\\n     * @return {number} The result of the dot product.\\n \
    */\\n    dot(v) {\\n      return this._x * v._x + this._y * v._y + \
this._z * v._z + this._w * v._w;\\n    }\\n    /**\\n     * Computes the \
squared Euclidean length (straight-line length) of this quaternion,\\n     * \
considered as a 4 dimensional vector. This can be useful if you are comparing \
the\\n     * lengths of two quaternions, as this is a slightly more efficient \
calculation than\\n     * {@link Quaternion#length}.\\n     *\\n     * \
@return {number} The squared Euclidean length.\\n     */\\n    lengthSq() \
{\\n      return this._x * this._x + this._y * this._y + this._z * this._z + \
this._w * this._w;\\n    }\\n    /**\\n     * Computes the Euclidean length \
(straight-line length) of this quaternion,\\n     * considered as a 4 \
dimensional vector.\\n     *\\n     * @return {number} The Euclidean \
length.\\n     */\\n    length() {\\n      return Math.sqrt(this._x * this._x \
+ this._y * this._y + this._z * this._z + this._w * this._w);\\n    }\\n    \
/**\\n     * Normalizes this quaternion - that is, calculated the quaternion \
that performs\\n     * the same rotation as this one, but has a length equal \
to `1`.\\n     *\\n     * @return {Quaternion} A reference to this \
quaternion.\\n     */\\n    normalize() {\\n      let l = this.length();\\n   \
   if (l === 0) {\\n        this._x = 0;\\n        this._y = 0;\\n        \
this._z = 0;\\n        this._w = 1;\\n      } else {\\n        l = 1 / l;\\n  \
      this._x = this._x * l;\\n        this._y = this._y * l;\\n        \
this._z = this._z * l;\\n        this._w = this._w * l;\\n      }\\n      \
this._onChangeCallback();\\n      return this;\\n    }\\n    /**\\n     * \
Multiplies this quaternion by the given one.\\n     *\\n     * @param \
{Quaternion} q - The quaternion.\\n     * @return {Quaternion} A reference to \
this quaternion.\\n     */\\n    multiply(q) {\\n      return \
this.multiplyQuaternions(this, q);\\n    }\\n    /**\\n     * Pre-multiplies \
this quaternion by the given one.\\n     *\\n     * @param {Quaternion} q - \
The quaternion.\\n     * @return {Quaternion} A reference to this \
quaternion.\\n     */\\n    premultiply(q) {\\n      return \
this.multiplyQuaternions(q, this);\\n    }\\n    /**\\n     * Multiplies the \
given quaternions and stores the result in this instance.\\n     *\\n     * \
@param {Quaternion} a - The first quaternion.\\n     * @param {Quaternion} b \
- The second quaternion.\\n     * @return {Quaternion} A reference to this \
quaternion.\\n     */\\n    multiplyQuaternions(a, b) {\\n      const qax = \
a._x, qay = a._y, qaz = a._z, qaw = a._w;\\n      const qbx = b._x, qby = \
b._y, qbz = b._z, qbw = b._w;\\n      this._x = qax * qbw + qaw * qbx + qay * \
qbz - qaz * qby;\\n      this._y = qay * qbw + qaw * qby + qaz * qbx - qax * \
qbz;\\n      this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\\n      \
this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\\n      \
this._onChangeCallback();\\n      return this;\\n    }\\n    /**\\n     * \
Performs a spherical linear interpolation between quaternions.\\n     *\\n    \
 * @param {Quaternion} qb - The target quaternion.\\n     * @param {number} t \
- The interpolation factor in the closed interval `[0, 1]`.\\n     * @return \
{Quaternion} A reference to this quaternion.\\n     */\\n    slerp(qb, t) \
{\\n      if (t === 0) return this;\\n      if (t === 1) return \
this.copy(qb);\\n      const x2 = this._x, y = this._y, z = this._z, w = \
this._w;\\n      let cosHalfTheta = w * qb._w + x2 * qb._x + y * qb._y + z * \
qb._z;\\n      if (cosHalfTheta < 0) {\\n        this._w = -qb._w;\\n        \
this._x = -qb._x;\\n        this._y = -qb._y;\\n        this._z = -qb._z;\\n  \
      cosHalfTheta = -cosHalfTheta;\\n      } else {\\n        \
this.copy(qb);\\n      }\\n      if (cosHalfTheta >= 1) {\\n        this._w = \
w;\\n        this._x = x2;\\n        this._y = y;\\n        this._z = z;\\n   \
     return this;\\n      }\\n      const sqrSinHalfTheta = 1 - cosHalfTheta \
* cosHalfTheta;\\n      if (sqrSinHalfTheta <= Number.EPSILON) {\\n        \
const s = 1 - t;\\n        this._w = s * w + t * this._w;\\n        this._x = \
s * x2 + t * this._x;\\n        this._y = s * y + t * this._y;\\n        \
this._z = s * z + t * this._z;\\n        this.normalize();\\n        return \
this;\\n      }\\n      const sinHalfTheta = Math.sqrt(sqrSinHalfTheta);\\n   \
   const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);\\n      const \
ratioA = Math.sin((1 - t) * halfTheta) / sinHalfTheta, ratioB = Math.sin(t * \
halfTheta) / sinHalfTheta;\\n      this._w = w * ratioA + this._w * \
ratioB;\\n      this._x = x2 * ratioA + this._x * ratioB;\\n      this._y = y \
* ratioA + this._y * ratioB;\\n      this._z = z * ratioA + this._z * \
ratioB;\\n      this._onChangeCallback();\\n      return this;\\n    }\\n    \
/**\\n     * Performs a spherical linear interpolation between the given \
quaternions\\n     * and stores the result in this quaternion.\\n     *\\n    \
 * @param {Quaternion} qa - The source quaternion.\\n     * @param \
{Quaternion} qb - The target quaternion.\\n     * @param {number} t - The \
interpolation factor in the closed interval `[0, 1]`.\\n     * @return \
{Quaternion} A reference to this quaternion.\\n     */\\n    \
slerpQuaternions(qa, qb, t) {\\n      return this.copy(qa).slerp(qb, t);\\n   \
 }\\n    /**\\n     * Sets this quaternion to a uniformly random, normalized \
quaternion.\\n     *\\n     * @return {Quaternion} A reference to this \
quaternion.\\n     */\\n    random() {\\n      const theta1 = 2 * Math.PI * \
Math.random();\\n      const theta2 = 2 * Math.PI * Math.random();\\n      \
const x0 = Math.random();\\n      const r1 = Math.sqrt(1 - x0);\\n      const \
r2 = Math.sqrt(x0);\\n      return this.set(\\n        r1 * \
Math.sin(theta1),\\n        r1 * Math.cos(theta1),\\n        r2 * \
Math.sin(theta2),\\n        r2 * Math.cos(theta2)\\n      );\\n    }\\n    \
/**\\n     * Returns `true` if this quaternion is equal with the given \
one.\\n     *\\n     * @param {Quaternion} quaternion - The quaternion to \
test for equality.\\n     * @return {boolean} Whether this quaternion is \
equal with the given one.\\n     */\\n    equals(quaternion) {\\n      return \
quaternion._x === this._x && quaternion._y === this._y && quaternion._z === \
this._z && quaternion._w === this._w;\\n    }\\n    /**\\n     * Sets this \
quaternion\\'s components from the given array.\\n     *\\n     * @param \
{Array<number>} array - An array holding the quaternion component values.\\n  \
   * @param {number} [offset=0] - The offset into the array.\\n     * @return \
{Quaternion} A reference to this quaternion.\\n     */\\n    fromArray(array, \
offset = 0) {\\n      this._x = array[offset];\\n      this._y = array[offset \
+ 1];\\n      this._z = array[offset + 2];\\n      this._w = array[offset + \
3];\\n      this._onChangeCallback();\\n      return this;\\n    }\\n    \
/**\\n     * Writes the components of this quaternion to the given array. If \
no array is provided,\\n     * the method returns a new instance.\\n     *\\n \
    * @param {Array<number>} [array=[]] - The target array holding the \
quaternion components.\\n     * @param {number} [offset=0] - Index of the \
first element in the array.\\n     * @return {Array<number>} The quaternion \
components.\\n     */\\n    toArray(array = [], offset = 0) {\\n      \
array[offset] = this._x;\\n      array[offset + 1] = this._y;\\n      \
array[offset + 2] = this._z;\\n      array[offset + 3] = this._w;\\n      \
return array;\\n    }\\n    /**\\n     * Sets the components of this \
quaternion from the given buffer attribute.\\n     *\\n     * @param \
{BufferAttribute} attribute - The buffer attribute holding quaternion \
data.\\n     * @param {number} index - The index into the attribute.\\n     * \
@return {Quaternion} A reference to this quaternion.\\n     */\\n    \
fromBufferAttribute(attribute, index) {\\n      this._x = \
attribute.getX(index);\\n      this._y = attribute.getY(index);\\n      \
this._z = attribute.getZ(index);\\n      this._w = attribute.getW(index);\\n  \
    this._onChangeCallback();\\n      return this;\\n    }\\n    /**\\n     * \
This methods defines the serialization result of this class. Returns the\\n   \
  * numerical elements of this quaternion in an array of format `[x, y, z, \
w]`.\\n     *\\n     * @return {Array<number>} The serialized quaternion.\\n  \
   */\\n    toJSON() {\\n      return this.toArray();\\n    }\\n    \
_onChange(callback) {\\n      this._onChangeCallback = callback;\\n      \
return this;\\n    }\\n    _onChangeCallback() {\\n    }\\n    \
*[Symbol.iterator]() {\\n      yield this._x;\\n      yield this._y;\\n      \
yield this._z;\\n      yield this._w;\\n    }\\n  }\\n  class Vector3 {\\n    \
/**\\n     * Constructs a new 3D vector.\\n     *\\n     * @param {number} \
[x=0] - The x value of this vector.\\n     * @param {number} [y=0] - The y \
value of this vector.\\n     * @param {number} [z=0] - The z value of this \
vector.\\n     */\\n    constructor(x2 = 0, y = 0, z = 0) {\\n      \
Vector3.prototype.isVector3 = true;\\n      this.x = x2;\\n      this.y = \
y;\\n      this.z = z;\\n    }\\n    /**\\n     * Sets the vector \
components.\\n     *\\n     * @param {number} x - The value of the x \
component.\\n     * @param {number} y - The value of the y component.\\n     \
* @param {number} z - The value of the z component.\\n     * @return \
{Vector3} A reference to this vector.\\n     */\\n    set(x2, y, z) {\\n      \
if (z === void 0) z = this.z;\\n      this.x = x2;\\n      this.y = y;\\n     \
 this.z = z;\\n      return this;\\n    }\\n    /**\\n     * Sets the vector \
components to the same value.\\n     *\\n     * @param {number} scalar - The \
value to set for all vector components.\\n     * @return {Vector3} A \
reference to this vector.\\n     */\\n    setScalar(scalar) {\\n      this.x \
= scalar;\\n      this.y = scalar;\\n      this.z = scalar;\\n      return \
this;\\n    }\\n    /**\\n     * Sets the vector\\'s x component to the given \
value\\n     *\\n     * @param {number} x - The value to set.\\n     * \
@return {Vector3} A reference to this vector.\\n     */\\n    setX(x2) {\\n   \
   this.x = x2;\\n      return this;\\n    }\\n    /**\\n     * Sets the \
vector\\'s y component to the given value\\n     *\\n     * @param {number} y \
- The value to set.\\n     * @return {Vector3} A reference to this vector.\\n \
    */\\n    setY(y) {\\n      this.y = y;\\n      return this;\\n    }\\n    \
/**\\n     * Sets the vector\\'s z component to the given value\\n     *\\n   \
  * @param {number} z - The value to set.\\n     * @return {Vector3} A \
reference to this vector.\\n     */\\n    setZ(z) {\\n      this.z = z;\\n    \
  return this;\\n    }\\n    /**\\n     * Allows to set a vector component \
with an index.\\n     *\\n     * @param {number} index - The component index. \
`0` equals to x, `1` equals to y, `2` equals to z.\\n     * @param {number} \
value - The value to set.\\n     * @return {Vector3} A reference to this \
vector.\\n     */\\n    setComponent(index, value) {\\n      switch (index) \
{\\n        case 0:\\n          this.x = value;\\n          break;\\n        \
case 1:\\n          this.y = value;\\n          break;\\n        case 2:\\n   \
       this.z = value;\\n          break;\\n        default:\\n          \
throw new Error(\"index is out of range: \" + index);\\n      }\\n      \
return this;\\n    }\\n    /**\\n     * Returns the value of the vector \
component which matches the given index.\\n     *\\n     * @param {number} \
index - The component index. `0` equals to x, `1` equals to y, `2` equals to \
z.\\n     * @return {number} A vector component value.\\n     */\\n    \
getComponent(index) {\\n      switch (index) {\\n        case 0:\\n          \
return this.x;\\n        case 1:\\n          return this.y;\\n        case \
2:\\n          return this.z;\\n        default:\\n          throw new \
Error(\"index is out of range: \" + index);\\n      }\\n    }\\n    /**\\n    \
 * Returns a new vector with copied values from this instance.\\n     *\\n    \
 * @return {Vector3} A clone of this instance.\\n     */\\n    clone() {\\n   \
   return new this.constructor(this.x, this.y, this.z);\\n    }\\n    /**\\n  \
   * Copies the values of the given vector to this instance.\\n     *\\n     \
* @param {Vector3} v - The vector to copy.\\n     * @return {Vector3} A \
reference to this vector.\\n     */\\n    copy(v) {\\n      this.x = v.x;\\n  \
    this.y = v.y;\\n      this.z = v.z;\\n      return this;\\n    }\\n    \
/**\\n     * Adds the given vector to this instance.\\n     *\\n     * @param \
{Vector3} v - The vector to add.\\n     * @return {Vector3} A reference to \
this vector.\\n     */\\n    add(v) {\\n      this.x += v.x;\\n      this.y \
+= v.y;\\n      this.z += v.z;\\n      return this;\\n    }\\n    /**\\n     \
* Adds the given scalar value to all components of this instance.\\n     *\\n \
    * @param {number} s - The scalar to add.\\n     * @return {Vector3} A \
reference to this vector.\\n     */\\n    addScalar(s) {\\n      this.x += \
s;\\n      this.y += s;\\n      this.z += s;\\n      return this;\\n    }\\n  \
  /**\\n     * Adds the given vectors and stores the result in this \
instance.\\n     *\\n     * @param {Vector3} a - The first vector.\\n     * \
@param {Vector3} b - The second vector.\\n     * @return {Vector3} A \
reference to this vector.\\n     */\\n    addVectors(a, b) {\\n      this.x = \
a.x + b.x;\\n      this.y = a.y + b.y;\\n      this.z = a.z + b.z;\\n      \
return this;\\n    }\\n    /**\\n     * Adds the given vector scaled by the \
given factor to this instance.\\n     *\\n     * @param {Vector3|Vector4} v - \
The vector.\\n     * @param {number} s - The factor that scales `v`.\\n     * \
@return {Vector3} A reference to this vector.\\n     */\\n    \
addScaledVector(v, s) {\\n      this.x += v.x * s;\\n      this.y += v.y * \
s;\\n      this.z += v.z * s;\\n      return this;\\n    }\\n    /**\\n     * \
Subtracts the given vector from this instance.\\n     *\\n     * @param \
{Vector3} v - The vector to subtract.\\n     * @return {Vector3} A reference \
to this vector.\\n     */\\n    sub(v) {\\n      this.x -= v.x;\\n      \
this.y -= v.y;\\n      this.z -= v.z;\\n      return this;\\n    }\\n    \
/**\\n     * Subtracts the given scalar value from all components of this \
instance.\\n     *\\n     * @param {number} s - The scalar to subtract.\\n    \
 * @return {Vector3} A reference to this vector.\\n     */\\n    subScalar(s) \
{\\n      this.x -= s;\\n      this.y -= s;\\n      this.z -= s;\\n      \
return this;\\n    }\\n    /**\\n     * Subtracts the given vectors and \
stores the result in this instance.\\n     *\\n     * @param {Vector3} a - \
The first vector.\\n     * @param {Vector3} b - The second vector.\\n     * \
@return {Vector3} A reference to this vector.\\n     */\\n    subVectors(a, \
b) {\\n      this.x = a.x - b.x;\\n      this.y = a.y - b.y;\\n      this.z = \
a.z - b.z;\\n      return this;\\n    }\\n    /**\\n     * Multiplies the \
given vector with this instance.\\n     *\\n     * @param {Vector3} v - The \
vector to multiply.\\n     * @return {Vector3} A reference to this vector.\\n \
    */\\n    multiply(v) {\\n      this.x *= v.x;\\n      this.y *= v.y;\\n   \
   this.z *= v.z;\\n      return this;\\n    }\\n    /**\\n     * Multiplies \
the given scalar value with all components of this instance.\\n     *\\n     \
* @param {number} scalar - The scalar to multiply.\\n     * @return {Vector3} \
A reference to this vector.\\n     */\\n    multiplyScalar(scalar) {\\n      \
this.x *= scalar;\\n      this.y *= scalar;\\n      this.z *= scalar;\\n      \
return this;\\n    }\\n    /**\\n     * Multiplies the given vectors and \
stores the result in this instance.\\n     *\\n     * @param {Vector3} a - \
The first vector.\\n     * @param {Vector3} b - The second vector.\\n     * \
@return {Vector3} A reference to this vector.\\n     */\\n    \
multiplyVectors(a, b) {\\n      this.x = a.x * b.x;\\n      this.y = a.y * \
b.y;\\n      this.z = a.z * b.z;\\n      return this;\\n    }\\n    /**\\n    \
 * Applies the given Euler rotation to this vector.\\n     *\\n     * @param \
{Euler} euler - The Euler angles.\\n     * @return {Vector3} A reference to \
this vector.\\n     */\\n    applyEuler(euler) {\\n      return \
this.applyQuaternion(_quaternion$4.setFromEuler(euler));\\n    }\\n    /**\\n \
    * Applies a rotation specified by an axis and an angle to this vector.\\n \
    *\\n     * @param {Vector3} axis - A normalized vector representing the \
rotation axis.\\n     * @param {number} angle - The angle in radians.\\n     \
* @return {Vector3} A reference to this vector.\\n     */\\n    \
applyAxisAngle(axis, angle) {\\n      return \
this.applyQuaternion(_quaternion$4.setFromAxisAngle(axis, angle));\\n    }\\n \
   /**\\n     * Multiplies this vector with the given 3x3 matrix.\\n     *\\n \
    * @param {Matrix3} m - The 3x3 matrix.\\n     * @return {Vector3} A \
reference to this vector.\\n     */\\n    applyMatrix3(m) {\\n      const x2 \
= this.x, y = this.y, z = this.z;\\n      const e = m.elements;\\n      \
this.x = e[0] * x2 + e[3] * y + e[6] * z;\\n      this.y = e[1] * x2 + e[4] * \
y + e[7] * z;\\n      this.z = e[2] * x2 + e[5] * y + e[8] * z;\\n      \
return this;\\n    }\\n    /**\\n     * Multiplies this vector by the given \
normal matrix and normalizes\\n     * the result.\\n     *\\n     * @param \
{Matrix3} m - The normal matrix.\\n     * @return {Vector3} A reference to \
this vector.\\n     */\\n    applyNormalMatrix(m) {\\n      return \
this.applyMatrix3(m).normalize();\\n    }\\n    /**\\n     * Multiplies this \
vector (with an implicit 1 in the 4th dimension) by m, and\\n     * divides \
by perspective.\\n     *\\n     * @param {Matrix4} m - The matrix to \
apply.\\n     * @return {Vector3} A reference to this vector.\\n     */\\n    \
applyMatrix4(m) {\\n      const x2 = this.x, y = this.y, z = this.z;\\n      \
const e = m.elements;\\n      const w = 1 / (e[3] * x2 + e[7] * y + e[11] * z \
+ e[15]);\\n      this.x = (e[0] * x2 + e[4] * y + e[8] * z + e[12]) * w;\\n  \
    this.y = (e[1] * x2 + e[5] * y + e[9] * z + e[13]) * w;\\n      this.z = \
(e[2] * x2 + e[6] * y + e[10] * z + e[14]) * w;\\n      return this;\\n    \
}\\n    /**\\n     * Applies the given Quaternion to this vector.\\n     *\\n \
    * @param {Quaternion} q - The Quaternion.\\n     * @return {Vector3} A \
reference to this vector.\\n     */\\n    applyQuaternion(q) {\\n      const \
vx = this.x, vy = this.y, vz = this.z;\\n      const qx = q.x, qy = q.y, qz = \
q.z, qw = q.w;\\n      const tx = 2 * (qy * vz - qz * vy);\\n      const ty = \
2 * (qz * vx - qx * vz);\\n      const tz = 2 * (qx * vy - qy * vx);\\n      \
this.x = vx + qw * tx + qy * tz - qz * ty;\\n      this.y = vy + qw * ty + qz \
* tx - qx * tz;\\n      this.z = vz + qw * tz + qx * ty - qy * tx;\\n      \
return this;\\n    }\\n    /**\\n     * Projects this vector from world space \
into the camera\\'s normalized\\n     * device coordinate (NDC) space.\\n     \
*\\n     * @param {Camera} camera - The camera.\\n     * @return {Vector3} A \
reference to this vector.\\n     */\\n    project(camera) {\\n      return \
this.applyMatrix4(camera.matrixWorldInverse).applyMatrix4(camera.projectionMa\
trix);\\n    }\\n    /**\\n     * Unprojects this vector from the camera\\'s \
normalized device coordinate (NDC)\\n     * space into world space.\\n     \
*\\n     * @param {Camera} camera - The camera.\\n     * @return {Vector3} A \
reference to this vector.\\n     */\\n    unproject(camera) {\\n      return \
this.applyMatrix4(camera.projectionMatrixInverse).applyMatrix4(camera.matrixW\
orld);\\n    }\\n    /**\\n     * Transforms the direction of this vector by \
a matrix (the upper left 3 x 3\\n     * subset of the given 4x4 matrix and \
then normalizes the result.\\n     *\\n     * @param {Matrix4} m - The \
matrix.\\n     * @return {Vector3} A reference to this vector.\\n     */\\n   \
 transformDirection(m) {\\n      const x2 = this.x, y = this.y, z = \
this.z;\\n      const e = m.elements;\\n      this.x = e[0] * x2 + e[4] * y + \
e[8] * z;\\n      this.y = e[1] * x2 + e[5] * y + e[9] * z;\\n      this.z = \
e[2] * x2 + e[6] * y + e[10] * z;\\n      return this.normalize();\\n    }\\n \
   /**\\n     * Divides this instance by the given vector.\\n     *\\n     * \
@param {Vector3} v - The vector to divide.\\n     * @return {Vector3} A \
reference to this vector.\\n     */\\n    divide(v) {\\n      this.x /= \
v.x;\\n      this.y /= v.y;\\n      this.z /= v.z;\\n      return this;\\n    \
}\\n    /**\\n     * Divides this vector by the given scalar.\\n     *\\n     \
* @param {number} scalar - The scalar to divide.\\n     * @return {Vector3} A \
reference to this vector.\\n     */\\n    divideScalar(scalar) {\\n      \
return this.multiplyScalar(1 / scalar);\\n    }\\n    /**\\n     * If this \
vector\\'s x, y or z value is greater than the given vector\\'s x, y or z\\n  \
   * value, replace that value with the corresponding min value.\\n     *\\n  \
   * @param {Vector3} v - The vector.\\n     * @return {Vector3} A reference \
to this vector.\\n     */\\n    min(v) {\\n      this.x = Math.min(this.x, \
v.x);\\n      this.y = Math.min(this.y, v.y);\\n      this.z = \
Math.min(this.z, v.z);\\n      return this;\\n    }\\n    /**\\n     * If \
this vector\\'s x, y or z value is less than the given vector\\'s x, y or \
z\\n     * value, replace that value with the corresponding max value.\\n     \
*\\n     * @param {Vector3} v - The vector.\\n     * @return {Vector3} A \
reference to this vector.\\n     */\\n    max(v) {\\n      this.x = \
Math.max(this.x, v.x);\\n      this.y = Math.max(this.y, v.y);\\n      this.z \
= Math.max(this.z, v.z);\\n      return this;\\n    }\\n    /**\\n     * If \
this vector\\'s x, y or z value is greater than the max vector\\'s x, y or \
z\\n     * value, it is replaced by the corresponding value.\\n     * If this \
vector\\'s x, y or z value is less than the min vector\\'s x, y or z \
value,\\n     * it is replaced by the corresponding value.\\n     *\\n     * \
@param {Vector3} min - The minimum x, y and z values.\\n     * @param \
{Vector3} max - The maximum x, y and z values in the desired range.\\n     * \
@return {Vector3} A reference to this vector.\\n     */\\n    clamp(min, \
max2) {\\n      this.x = clamp(this.x, min.x, max2.x);\\n      this.y = \
clamp(this.y, min.y, max2.y);\\n      this.z = clamp(this.z, min.z, \
max2.z);\\n      return this;\\n    }\\n    /**\\n     * If this vector\\'s \
x, y or z values are greater than the max value, they are\\n     * replaced \
by the max value.\\n     * If this vector\\'s x, y or z values are less than \
the min value, they are\\n     * replaced by the min value.\\n     *\\n     * \
@param {number} minVal - The minimum value the components will be clamped \
to.\\n     * @param {number} maxVal - The maximum value the components will \
be clamped to.\\n     * @return {Vector3} A reference to this vector.\\n     \
*/\\n    clampScalar(minVal, maxVal) {\\n      this.x = clamp(this.x, minVal, \
maxVal);\\n      this.y = clamp(this.y, minVal, maxVal);\\n      this.z = \
clamp(this.z, minVal, maxVal);\\n      return this;\\n    }\\n    /**\\n     \
* If this vector\\'s length is greater than the max value, it is replaced \
by\\n     * the max value.\\n     * If this vector\\'s length is less than \
the min value, it is replaced by the\\n     * min value.\\n     *\\n     * \
@param {number} min - The minimum value the vector length will be clamped \
to.\\n     * @param {number} max - The maximum value the vector length will \
be clamped to.\\n     * @return {Vector3} A reference to this vector.\\n     \
*/\\n    clampLength(min, max2) {\\n      const length = this.length();\\n    \
  return this.divideScalar(length || 1).multiplyScalar(clamp(length, min, \
max2));\\n    }\\n    /**\\n     * The components of this vector are rounded \
down to the nearest integer value.\\n     *\\n     * @return {Vector3} A \
reference to this vector.\\n     */\\n    floor() {\\n      this.x = \
Math.floor(this.x);\\n      this.y = Math.floor(this.y);\\n      this.z = \
Math.floor(this.z);\\n      return this;\\n    }\\n    /**\\n     * The \
components of this vector are rounded up to the nearest integer value.\\n     \
*\\n     * @return {Vector3} A reference to this vector.\\n     */\\n    \
ceil() {\\n      this.x = Math.ceil(this.x);\\n      this.y = \
Math.ceil(this.y);\\n      this.z = Math.ceil(this.z);\\n      return \
this;\\n    }\\n    /**\\n     * The components of this vector are rounded to \
the nearest integer value\\n     *\\n     * @return {Vector3} A reference to \
this vector.\\n     */\\n    round() {\\n      this.x = \
Math.round(this.x);\\n      this.y = Math.round(this.y);\\n      this.z = \
Math.round(this.z);\\n      return this;\\n    }\\n    /**\\n     * The \
components of this vector are rounded towards zero (up if negative,\\n     * \
down if positive) to an integer value.\\n     *\\n     * @return {Vector3} A \
reference to this vector.\\n     */\\n    roundToZero() {\\n      this.x = \
Math.trunc(this.x);\\n      this.y = Math.trunc(this.y);\\n      this.z = \
Math.trunc(this.z);\\n      return this;\\n    }\\n    /**\\n     * Inverts \
this vector - i.e. sets x = -x, y = -y and z = -z.\\n     *\\n     * @return \
{Vector3} A reference to this vector.\\n     */\\n    negate() {\\n      \
this.x = -this.x;\\n      this.y = -this.y;\\n      this.z = -this.z;\\n      \
return this;\\n    }\\n    /**\\n     * Calculates the dot product of the \
given vector with this instance.\\n     *\\n     * @param {Vector3} v - The \
vector to compute the dot product with.\\n     * @return {number} The result \
of the dot product.\\n     */\\n    dot(v) {\\n      return this.x * v.x + \
this.y * v.y + this.z * v.z;\\n    }\\n    // TODO lengthSquared?\\n    \
/**\\n     * Computes the square of the Euclidean length (straight-line \
length) from\\n     * (0, 0, 0) to (x, y, z). If you are comparing the \
lengths of vectors, you should\\n     * compare the length squared instead as \
it is slightly more efficient to calculate.\\n     *\\n     * @return \
{number} The square length of this vector.\\n     */\\n    lengthSq() {\\n    \
  return this.x * this.x + this.y * this.y + this.z * this.z;\\n    }\\n    \
/**\\n     * Computes the  Euclidean length (straight-line length) from (0, \
0, 0) to (x, y, z).\\n     *\\n     * @return {number} The length of this \
vector.\\n     */\\n    length() {\\n      return Math.sqrt(this.x * this.x + \
this.y * this.y + this.z * this.z);\\n    }\\n    /**\\n     * Computes the \
Manhattan length of this vector.\\n     *\\n     * @return {number} The \
length of this vector.\\n     */\\n    manhattanLength() {\\n      return \
Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);\\n    }\\n    /**\\n  \
   * Converts this vector to a unit vector - that is, sets it equal to a \
vector\\n     * with the same direction as this one, but with a vector length \
of `1`.\\n     *\\n     * @return {Vector3} A reference to this vector.\\n    \
 */\\n    normalize() {\\n      return this.divideScalar(this.length() || \
1);\\n    }\\n    /**\\n     * Sets this vector to a vector with the same \
direction as this one, but\\n     * with the specified length.\\n     *\\n    \
 * @param {number} length - The new length of this vector.\\n     * @return \
{Vector3} A reference to this vector.\\n     */\\n    setLength(length) {\\n  \
    return this.normalize().multiplyScalar(length);\\n    }\\n    /**\\n     \
* Linearly interpolates between the given vector and this instance, where\\n  \
   * alpha is the percent distance along the line - alpha = 0 will be this\\n \
    * vector, and alpha = 1 will be the given one.\\n     *\\n     * @param \
{Vector3} v - The vector to interpolate towards.\\n     * @param {number} \
alpha - The interpolation factor, typically in the closed interval `[0, \
1]`.\\n     * @return {Vector3} A reference to this vector.\\n     */\\n    \
lerp(v, alpha) {\\n      this.x += (v.x - this.x) * alpha;\\n      this.y += \
(v.y - this.y) * alpha;\\n      this.z += (v.z - this.z) * alpha;\\n      \
return this;\\n    }\\n    /**\\n     * Linearly interpolates between the \
given vectors, where alpha is the percent\\n     * distance along the line - \
alpha = 0 will be first vector, and alpha = 1 will\\n     * be the second \
one. The result is stored in this instance.\\n     *\\n     * @param \
{Vector3} v1 - The first vector.\\n     * @param {Vector3} v2 - The second \
vector.\\n     * @param {number} alpha - The interpolation factor, typically \
in the closed interval `[0, 1]`.\\n     * @return {Vector3} A reference to \
this vector.\\n     */\\n    lerpVectors(v1, v2, alpha) {\\n      this.x = \
v1.x + (v2.x - v1.x) * alpha;\\n      this.y = v1.y + (v2.y - v1.y) * \
alpha;\\n      this.z = v1.z + (v2.z - v1.z) * alpha;\\n      return this;\\n \
   }\\n    /**\\n     * Calculates the cross product of the given vector with \
this instance.\\n     *\\n     * @param {Vector3} v - The vector to compute \
the cross product with.\\n     * @return {Vector3} The result of the cross \
product.\\n     */\\n    cross(v) {\\n      return this.crossVectors(this, \
v);\\n    }\\n    /**\\n     * Calculates the cross product of the given \
vectors and stores the result\\n     * in this instance.\\n     *\\n     * \
@param {Vector3} a - The first vector.\\n     * @param {Vector3} b - The \
second vector.\\n     * @return {Vector3} A reference to this vector.\\n     \
*/\\n    crossVectors(a, b) {\\n      const ax = a.x, ay = a.y, az = a.z;\\n  \
    const bx = b.x, by = b.y, bz = b.z;\\n      this.x = ay * bz - az * \
by;\\n      this.y = az * bx - ax * bz;\\n      this.z = ax * by - ay * \
bx;\\n      return this;\\n    }\\n    /**\\n     * Projects this vector onto \
the given one.\\n     *\\n     * @param {Vector3} v - The vector to project \
to.\\n     * @return {Vector3} A reference to this vector.\\n     */\\n    \
projectOnVector(v) {\\n      const denominator = v.lengthSq();\\n      if \
(denominator === 0) return this.set(0, 0, 0);\\n      const scalar = \
v.dot(this) / denominator;\\n      return \
this.copy(v).multiplyScalar(scalar);\\n    }\\n    /**\\n     * Projects this \
vector onto a plane by subtracting this\\n     * vector projected onto the \
plane\\'s normal from this vector.\\n     *\\n     * @param {Vector3} \
planeNormal - The plane normal.\\n     * @return {Vector3} A reference to \
this vector.\\n     */\\n    projectOnPlane(planeNormal) {\\n      \
_vector$c.copy(this).projectOnVector(planeNormal);\\n      return \
this.sub(_vector$c);\\n    }\\n    /**\\n     * Reflects this vector off a \
plane orthogonal to the given normal vector.\\n     *\\n     * @param \
{Vector3} normal - The (normalized) normal vector.\\n     * @return {Vector3} \
A reference to this vector.\\n     */\\n    reflect(normal) {\\n      return \
this.sub(_vector$c.copy(normal).multiplyScalar(2 * this.dot(normal)));\\n    \
}\\n    /**\\n     * Returns the angle between the given vector and this \
instance in radians.\\n     *\\n     * @param {Vector3} v - The vector to \
compute the angle with.\\n     * @return {number} The angle in radians.\\n    \
 */\\n    angleTo(v) {\\n      const denominator = Math.sqrt(this.lengthSq() \
* v.lengthSq());\\n      if (denominator === 0) return Math.PI / 2;\\n      \
const theta = this.dot(v) / denominator;\\n      return \
Math.acos(clamp(theta, -1, 1));\\n    }\\n    /**\\n     * Computes the \
distance from the given vector to this instance.\\n     *\\n     * @param \
{Vector3} v - The vector to compute the distance to.\\n     * @return \
{number} The distance.\\n     */\\n    distanceTo(v) {\\n      return \
Math.sqrt(this.distanceToSquared(v));\\n    }\\n    /**\\n     * Computes the \
squared distance from the given vector to this instance.\\n     * If you are \
just comparing the distance with another distance, you should compare\\n     \
* the distance squared instead as it is slightly more efficient to \
calculate.\\n     *\\n     * @param {Vector3} v - The vector to compute the \
squared distance to.\\n     * @return {number} The squared distance.\\n     \
*/\\n    distanceToSquared(v) {\\n      const dx = this.x - v.x, dy = this.y \
- v.y, dz = this.z - v.z;\\n      return dx * dx + dy * dy + dz * dz;\\n    \
}\\n    /**\\n     * Computes the Manhattan distance from the given vector to \
this instance.\\n     *\\n     * @param {Vector3} v - The vector to compute \
the Manhattan distance to.\\n     * @return {number} The Manhattan \
distance.\\n     */\\n    manhattanDistanceTo(v) {\\n      return \
Math.abs(this.x - v.x) + Math.abs(this.y - v.y) + Math.abs(this.z - v.z);\\n  \
  }\\n    /**\\n     * Sets the vector components from the given spherical \
coordinates.\\n     *\\n     * @param {Spherical} s - The spherical \
coordinates.\\n     * @return {Vector3} A reference to this vector.\\n     \
*/\\n    setFromSpherical(s) {\\n      return \
this.setFromSphericalCoords(s.radius, s.phi, s.theta);\\n    }\\n    /**\\n   \
  * Sets the vector components from the given spherical coordinates.\\n     \
*\\n     * @param {number} radius - The radius.\\n     * @param {number} phi \
- The phi angle in radians.\\n     * @param {number} theta - The theta angle \
in radians.\\n     * @return {Vector3} A reference to this vector.\\n     \
*/\\n    setFromSphericalCoords(radius, phi, theta) {\\n      const \
sinPhiRadius = Math.sin(phi) * radius;\\n      this.x = sinPhiRadius * \
Math.sin(theta);\\n      this.y = Math.cos(phi) * radius;\\n      this.z = \
sinPhiRadius * Math.cos(theta);\\n      return this;\\n    }\\n    /**\\n     \
* Sets the vector components from the given cylindrical coordinates.\\n     \
*\\n     * @param {Cylindrical} c - The cylindrical coordinates.\\n     * \
@return {Vector3} A reference to this vector.\\n     */\\n    \
setFromCylindrical(c) {\\n      return \
this.setFromCylindricalCoords(c.radius, c.theta, c.y);\\n    }\\n    /**\\n   \
  * Sets the vector components from the given cylindrical coordinates.\\n     \
*\\n     * @param {number} radius - The radius.\\n     * @param {number} \
theta - The theta angle in radians.\\n     * @param {number} y - The y \
value.\\n     * @return {Vector3} A reference to this vector.\\n     */\\n    \
setFromCylindricalCoords(radius, theta, y) {\\n      this.x = radius * \
Math.sin(theta);\\n      this.y = y;\\n      this.z = radius * \
Math.cos(theta);\\n      return this;\\n    }\\n    /**\\n     * Sets the \
vector components to the position elements of the\\n     * given \
transformation matrix.\\n     *\\n     * @param {Matrix4} m - The 4x4 \
matrix.\\n     * @return {Vector3} A reference to this vector.\\n     */\\n   \
 setFromMatrixPosition(m) {\\n      const e = m.elements;\\n      this.x = \
e[12];\\n      this.y = e[13];\\n      this.z = e[14];\\n      return \
this;\\n    }\\n    /**\\n     * Sets the vector components to the scale \
elements of the\\n     * given transformation matrix.\\n     *\\n     * \
@param {Matrix4} m - The 4x4 matrix.\\n     * @return {Vector3} A reference \
to this vector.\\n     */\\n    setFromMatrixScale(m) {\\n      const sx = \
this.setFromMatrixColumn(m, 0).length();\\n      const sy = \
this.setFromMatrixColumn(m, 1).length();\\n      const sz = \
this.setFromMatrixColumn(m, 2).length();\\n      this.x = sx;\\n      this.y \
= sy;\\n      this.z = sz;\\n      return this;\\n    }\\n    /**\\n     * \
Sets the vector components from the specified matrix column.\\n     *\\n     \
* @param {Matrix4} m - The 4x4 matrix.\\n     * @param {number} index - The \
column index.\\n     * @return {Vector3} A reference to this vector.\\n     \
*/\\n    setFromMatrixColumn(m, index) {\\n      return \
this.fromArray(m.elements, index * 4);\\n    }\\n    /**\\n     * Sets the \
vector components from the specified matrix column.\\n     *\\n     * @param \
{Matrix3} m - The 3x3 matrix.\\n     * @param {number} index - The column \
index.\\n     * @return {Vector3} A reference to this vector.\\n     */\\n    \
setFromMatrix3Column(m, index) {\\n      return this.fromArray(m.elements, \
index * 3);\\n    }\\n    /**\\n     * Sets the vector components from the \
given Euler angles.\\n     *\\n     * @param {Euler} e - The Euler angles to \
set.\\n     * @return {Vector3} A reference to this vector.\\n     */\\n    \
setFromEuler(e) {\\n      this.x = e._x;\\n      this.y = e._y;\\n      \
this.z = e._z;\\n      return this;\\n    }\\n    /**\\n     * Sets the \
vector components from the RGB components of the\\n     * given color.\\n     \
*\\n     * @param {Color} c - The color to set.\\n     * @return {Vector3} A \
reference to this vector.\\n     */\\n    setFromColor(c) {\\n      this.x = \
c.r;\\n      this.y = c.g;\\n      this.z = c.b;\\n      return this;\\n    \
}\\n    /**\\n     * Returns `true` if this vector is equal with the given \
one.\\n     *\\n     * @param {Vector3} v - The vector to test for \
equality.\\n     * @return {boolean} Whether this vector is equal with the \
given one.\\n     */\\n    equals(v) {\\n      return v.x === this.x && v.y \
=== this.y && v.z === this.z;\\n    }\\n    /**\\n     * Sets this vector\\'s \
x value to be `array[ offset ]`, y value to be `array[ offset + 1 ]`\\n     * \
and z value to be `array[ offset + 2 ]`.\\n     *\\n     * @param \
{Array<number>} array - An array holding the vector component values.\\n     \
* @param {number} [offset=0] - The offset into the array.\\n     * @return \
{Vector3} A reference to this vector.\\n     */\\n    fromArray(array, offset \
= 0) {\\n      this.x = array[offset];\\n      this.y = array[offset + 1];\\n \
     this.z = array[offset + 2];\\n      return this;\\n    }\\n    /**\\n    \
 * Writes the components of this vector to the given array. If no array is \
provided,\\n     * the method returns a new instance.\\n     *\\n     * \
@param {Array<number>} [array=[]] - The target array holding the vector \
components.\\n     * @param {number} [offset=0] - Index of the first element \
in the array.\\n     * @return {Array<number>} The vector components.\\n     \
*/\\n    toArray(array = [], offset = 0) {\\n      array[offset] = this.x;\\n \
     array[offset + 1] = this.y;\\n      array[offset + 2] = this.z;\\n      \
return array;\\n    }\\n    /**\\n     * Sets the components of this vector \
from the given buffer attribute.\\n     *\\n     * @param {BufferAttribute} \
attribute - The buffer attribute holding vector data.\\n     * @param \
{number} index - The index into the attribute.\\n     * @return {Vector3} A \
reference to this vector.\\n     */\\n    fromBufferAttribute(attribute, \
index) {\\n      this.x = attribute.getX(index);\\n      this.y = \
attribute.getY(index);\\n      this.z = attribute.getZ(index);\\n      return \
this;\\n    }\\n    /**\\n     * Sets each component of this vector to a \
pseudo-random value between `0` and\\n     * `1`, excluding `1`.\\n     *\\n  \
   * @return {Vector3} A reference to this vector.\\n     */\\n    random() \
{\\n      this.x = Math.random();\\n      this.y = Math.random();\\n      \
this.z = Math.random();\\n      return this;\\n    }\\n    /**\\n     * Sets \
this vector to a uniformly random point on a unit sphere.\\n     *\\n     * \
@return {Vector3} A reference to this vector.\\n     */\\n    \
randomDirection() {\\n      const theta = Math.random() * Math.PI * 2;\\n     \
 const u = Math.random() * 2 - 1;\\n      const c = Math.sqrt(1 - u * u);\\n  \
    this.x = c * Math.cos(theta);\\n      this.y = u;\\n      this.z = c * \
Math.sin(theta);\\n      return this;\\n    }\\n    *[Symbol.iterator]() {\\n \
     yield this.x;\\n      yield this.y;\\n      yield this.z;\\n    }\\n  \
}\\n  const _vector$c = /* @__PURE__ */ new Vector3();\\n  const \
_quaternion$4 = /* @__PURE__ */ new Quaternion();\\n  class Matrix3 {\\n    \
/**\\n     * Constructs a new 3x3 matrix. The arguments are supposed to be\\n \
    * in row-major order. If no arguments are provided, the constructor\\n    \
 * initializes the matrix as an identity matrix.\\n     *\\n     * @param \
{number} [n11] - 1-1 matrix element.\\n     * @param {number} [n12] - 1-2 \
matrix element.\\n     * @param {number} [n13] - 1-3 matrix element.\\n     * \
@param {number} [n21] - 2-1 matrix element.\\n     * @param {number} [n22] - \
2-2 matrix element.\\n     * @param {number} [n23] - 2-3 matrix element.\\n   \
  * @param {number} [n31] - 3-1 matrix element.\\n     * @param {number} \
[n32] - 3-2 matrix element.\\n     * @param {number} [n33] - 3-3 matrix \
element.\\n     */\\n    constructor(n11, n12, n13, n21, n22, n23, n31, n32, \
n33) {\\n      Matrix3.prototype.isMatrix3 = true;\\n      this.elements = \
[\\n        1,\\n        0,\\n        0,\\n        0,\\n        1,\\n        \
0,\\n        0,\\n        0,\\n        1\\n      ];\\n      if (n11 !== void \
0) {\\n        this.set(n11, n12, n13, n21, n22, n23, n31, n32, n33);\\n      \
}\\n    }\\n    /**\\n     * Sets the elements of the matrix.The arguments \
are supposed to be\\n     * in row-major order.\\n     *\\n     * @param \
{number} [n11] - 1-1 matrix element.\\n     * @param {number} [n12] - 1-2 \
matrix element.\\n     * @param {number} [n13] - 1-3 matrix element.\\n     * \
@param {number} [n21] - 2-1 matrix element.\\n     * @param {number} [n22] - \
2-2 matrix element.\\n     * @param {number} [n23] - 2-3 matrix element.\\n   \
  * @param {number} [n31] - 3-1 matrix element.\\n     * @param {number} \
[n32] - 3-2 matrix element.\\n     * @param {number} [n33] - 3-3 matrix \
element.\\n     * @return {Matrix3} A reference to this matrix.\\n     */\\n  \
  set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {\\n      const te = \
this.elements;\\n      te[0] = n11;\\n      te[1] = n21;\\n      te[2] = \
n31;\\n      te[3] = n12;\\n      te[4] = n22;\\n      te[5] = n32;\\n      \
te[6] = n13;\\n      te[7] = n23;\\n      te[8] = n33;\\n      return \
this;\\n    }\\n    /**\\n     * Sets this matrix to the 3x3 identity \
matrix.\\n     *\\n     * @return {Matrix3} A reference to this matrix.\\n    \
 */\\n    identity() {\\n      this.set(\\n        1,\\n        0,\\n        \
0,\\n        0,\\n        1,\\n        0,\\n        0,\\n        0,\\n        \
1\\n      );\\n      return this;\\n    }\\n    /**\\n     * Copies the \
values of the given matrix to this instance.\\n     *\\n     * @param \
{Matrix3} m - The matrix to copy.\\n     * @return {Matrix3} A reference to \
this matrix.\\n     */\\n    copy(m) {\\n      const te = this.elements;\\n   \
   const me = m.elements;\\n      te[0] = me[0];\\n      te[1] = me[1];\\n    \
  te[2] = me[2];\\n      te[3] = me[3];\\n      te[4] = me[4];\\n      te[5] \
= me[5];\\n      te[6] = me[6];\\n      te[7] = me[7];\\n      te[8] = \
me[8];\\n      return this;\\n    }\\n    /**\\n     * Extracts the basis of \
this matrix into the three axis vectors provided.\\n     *\\n     * @param \
{Vector3} xAxis - The basis\\'s x axis.\\n     * @param {Vector3} yAxis - The \
basis\\'s y axis.\\n     * @param {Vector3} zAxis - The basis\\'s z axis.\\n  \
   * @return {Matrix3} A reference to this matrix.\\n     */\\n    \
extractBasis(xAxis, yAxis, zAxis) {\\n      xAxis.setFromMatrix3Column(this, \
0);\\n      yAxis.setFromMatrix3Column(this, 1);\\n      \
zAxis.setFromMatrix3Column(this, 2);\\n      return this;\\n    }\\n    \
/**\\n     * Set this matrix to the upper 3x3 matrix of the given 4x4 \
matrix.\\n     *\\n     * @param {Matrix4} m - The 4x4 matrix.\\n     * \
@return {Matrix3} A reference to this matrix.\\n     */\\n    \
setFromMatrix4(m) {\\n      const me = m.elements;\\n      this.set(\\n       \
 me[0],\\n        me[4],\\n        me[8],\\n        me[1],\\n        \
me[5],\\n        me[9],\\n        me[2],\\n        me[6],\\n        me[10]\\n \
     );\\n      return this;\\n    }\\n    /**\\n     * Post-multiplies this \
matrix by the given 3x3 matrix.\\n     *\\n     * @param {Matrix3} m - The \
matrix to multiply with.\\n     * @return {Matrix3} A reference to this \
matrix.\\n     */\\n    multiply(m) {\\n      return \
this.multiplyMatrices(this, m);\\n    }\\n    /**\\n     * Pre-multiplies \
this matrix by the given 3x3 matrix.\\n     *\\n     * @param {Matrix3} m - \
The matrix to multiply with.\\n     * @return {Matrix3} A reference to this \
matrix.\\n     */\\n    premultiply(m) {\\n      return \
this.multiplyMatrices(m, this);\\n    }\\n    /**\\n     * Multiples the \
given 3x3 matrices and stores the result\\n     * in this matrix.\\n     *\\n \
    * @param {Matrix3} a - The first matrix.\\n     * @param {Matrix3} b - \
The second matrix.\\n     * @return {Matrix3} A reference to this matrix.\\n  \
   */\\n    multiplyMatrices(a, b) {\\n      const ae = a.elements;\\n      \
const be = b.elements;\\n      const te = this.elements;\\n      const a11 = \
ae[0], a12 = ae[3], a13 = ae[6];\\n      const a21 = ae[1], a22 = ae[4], a23 \
= ae[7];\\n      const a31 = ae[2], a32 = ae[5], a33 = ae[8];\\n      const \
b11 = be[0], b12 = be[3], b13 = be[6];\\n      const b21 = be[1], b22 = \
be[4], b23 = be[7];\\n      const b31 = be[2], b32 = be[5], b33 = be[8];\\n   \
   te[0] = a11 * b11 + a12 * b21 + a13 * b31;\\n      te[3] = a11 * b12 + a12 \
* b22 + a13 * b32;\\n      te[6] = a11 * b13 + a12 * b23 + a13 * b33;\\n      \
te[1] = a21 * b11 + a22 * b21 + a23 * b31;\\n      te[4] = a21 * b12 + a22 * \
b22 + a23 * b32;\\n      te[7] = a21 * b13 + a22 * b23 + a23 * b33;\\n      \
te[2] = a31 * b11 + a32 * b21 + a33 * b31;\\n      te[5] = a31 * b12 + a32 * \
b22 + a33 * b32;\\n      te[8] = a31 * b13 + a32 * b23 + a33 * b33;\\n      \
return this;\\n    }\\n    /**\\n     * Multiplies every component of the \
matrix by the given scalar.\\n     *\\n     * @param {number} s - The \
scalar.\\n     * @return {Matrix3} A reference to this matrix.\\n     */\\n   \
 multiplyScalar(s) {\\n      const te = this.elements;\\n      te[0] *= s;\\n \
     te[3] *= s;\\n      te[6] *= s;\\n      te[1] *= s;\\n      te[4] *= \
s;\\n      te[7] *= s;\\n      te[2] *= s;\\n      te[5] *= s;\\n      te[8] \
*= s;\\n      return this;\\n    }\\n    /**\\n     * Computes and returns \
the determinant of this matrix.\\n     *\\n     * @return {number} The \
determinant.\\n     */\\n    determinant() {\\n      const te = \
this.elements;\\n      const a = te[0], b = te[1], c = te[2], d = te[3], e = \
te[4], f = te[5], g = te[6], h = te[7], i2 = te[8];\\n      return a * e * i2 \
- a * f * h - b * d * i2 + b * f * g + c * d * h - c * e * g;\\n    }\\n    \
/**\\n     * Inverts this matrix, using the [analytic method]{@link \
https://en.wikipedia.org/wiki/Invertible_matrix#Analytic_solution}.\\n     * \
You can not invert with a determinant of zero. If you attempt this, the \
method produces\\n     * a zero matrix instead.\\n     *\\n     * @return \
{Matrix3} A reference to this matrix.\\n     */\\n    invert() {\\n      \
const te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n12 = te[3], \
n22 = te[4], n32 = te[5], n13 = te[6], n23 = te[7], n33 = te[8], t11 = n33 * \
n22 - n32 * n23, t12 = n32 * n13 - n33 * n12, t13 = n23 * n12 - n22 * n13, \
det = n11 * t11 + n21 * t12 + n31 * t13;\\n      if (det === 0) return \
this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);\\n      const detInv = 1 / det;\\n      \
te[0] = t11 * detInv;\\n      te[1] = (n31 * n23 - n33 * n21) * detInv;\\n    \
  te[2] = (n32 * n21 - n31 * n22) * detInv;\\n      te[3] = t12 * detInv;\\n  \
    te[4] = (n33 * n11 - n31 * n13) * detInv;\\n      te[5] = (n31 * n12 - \
n32 * n11) * detInv;\\n      te[6] = t13 * detInv;\\n      te[7] = (n21 * n13 \
- n23 * n11) * detInv;\\n      te[8] = (n22 * n11 - n21 * n12) * detInv;\\n   \
   return this;\\n    }\\n    /**\\n     * Transposes this matrix in \
place.\\n     *\\n     * @return {Matrix3} A reference to this matrix.\\n     \
*/\\n    transpose() {\\n      let tmp;\\n      const m = this.elements;\\n   \
   tmp = m[1];\\n      m[1] = m[3];\\n      m[3] = tmp;\\n      tmp = \
m[2];\\n      m[2] = m[6];\\n      m[6] = tmp;\\n      tmp = m[5];\\n      \
m[5] = m[7];\\n      m[7] = tmp;\\n      return this;\\n    }\\n    /**\\n    \
 * Computes the normal matrix which is the inverse transpose of the upper\\n  \
   * left 3x3 portion of the given 4x4 matrix.\\n     *\\n     * @param \
{Matrix4} matrix4 - The 4x4 matrix.\\n     * @return {Matrix3} A reference to \
this matrix.\\n     */\\n    getNormalMatrix(matrix4) {\\n      return \
this.setFromMatrix4(matrix4).invert().transpose();\\n    }\\n    /**\\n     * \
Transposes this matrix into the supplied array, and returns itself \
unchanged.\\n     *\\n     * @param {Array<number>} r - An array to store the \
transposed matrix elements.\\n     * @return {Matrix3} A reference to this \
matrix.\\n     */\\n    transposeIntoArray(r) {\\n      const m = \
this.elements;\\n      r[0] = m[0];\\n      r[1] = m[3];\\n      r[2] = \
m[6];\\n      r[3] = m[1];\\n      r[4] = m[4];\\n      r[5] = m[7];\\n      \
r[6] = m[2];\\n      r[7] = m[5];\\n      r[8] = m[8];\\n      return \
this;\\n    }\\n    /**\\n     * Sets the UV transform matrix from offset, \
repeat, rotation, and center.\\n     *\\n     * @param {number} tx - Offset \
x.\\n     * @param {number} ty - Offset y.\\n     * @param {number} sx - \
Repeat x.\\n     * @param {number} sy - Repeat y.\\n     * @param {number} \
rotation - Rotation, in radians. Positive values rotate counterclockwise.\\n  \
   * @param {number} cx - Center x of rotation.\\n     * @param {number} cy - \
Center y of rotation\\n     * @return {Matrix3} A reference to this \
matrix.\\n     */\\n    setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {\\n \
     const c = Math.cos(rotation);\\n      const s = Math.sin(rotation);\\n   \
   this.set(\\n        sx * c,\\n        sx * s,\\n        -sx * (c * cx + s \
* cy) + cx + tx,\\n        -sy * s,\\n        sy * c,\\n        -sy * (-s * \
cx + c * cy) + cy + ty,\\n        0,\\n        0,\\n        1\\n      );\\n   \
   return this;\\n    }\\n    /**\\n     * Scales this matrix with the given \
scalar values.\\n     *\\n     * @param {number} sx - The amount to scale in \
the X axis.\\n     * @param {number} sy - The amount to scale in the Y \
axis.\\n     * @return {Matrix3} A reference to this matrix.\\n     */\\n    \
scale(sx, sy) {\\n      this.premultiply(_m3.makeScale(sx, sy));\\n      \
return this;\\n    }\\n    /**\\n     * Rotates this matrix by the given \
angle.\\n     *\\n     * @param {number} theta - The rotation in radians.\\n  \
   * @return {Matrix3} A reference to this matrix.\\n     */\\n    \
rotate(theta) {\\n      this.premultiply(_m3.makeRotation(-theta));\\n      \
return this;\\n    }\\n    /**\\n     * Translates this matrix by the given \
scalar values.\\n     *\\n     * @param {number} tx - The amount to translate \
in the X axis.\\n     * @param {number} ty - The amount to translate in the Y \
axis.\\n     * @return {Matrix3} A reference to this matrix.\\n     */\\n    \
translate(tx, ty) {\\n      this.premultiply(_m3.makeTranslation(tx, ty));\\n \
     return this;\\n    }\\n    // for 2D Transforms\\n    /**\\n     * Sets \
this matrix as a 2D translation transform.\\n     *\\n     * @param \
{number|Vector2} x - The amount to translate in the X axis or alternatively a \
translation vector.\\n     * @param {number} y - The amount to translate in \
the Y axis.\\n     * @return {Matrix3} A reference to this matrix.\\n     \
*/\\n    makeTranslation(x2, y) {\\n      if (x2.isVector2) {\\n        \
this.set(\\n          1,\\n          0,\\n          x2.x,\\n          0,\\n   \
       1,\\n          x2.y,\\n          0,\\n          0,\\n          1\\n    \
    );\\n      } else {\\n        this.set(\\n          1,\\n          0,\\n  \
        x2,\\n          0,\\n          1,\\n          y,\\n          0,\\n    \
      0,\\n          1\\n        );\\n      }\\n      return this;\\n    }\\n \
   /**\\n     * Sets this matrix as a 2D rotational transformation.\\n     \
*\\n     * @param {number} theta - The rotation in radians.\\n     * @return \
{Matrix3} A reference to this matrix.\\n     */\\n    makeRotation(theta) \
{\\n      const c = Math.cos(theta);\\n      const s = Math.sin(theta);\\n    \
  this.set(\\n        c,\\n        -s,\\n        0,\\n        s,\\n        \
c,\\n        0,\\n        0,\\n        0,\\n        1\\n      );\\n      \
return this;\\n    }\\n    /**\\n     * Sets this matrix as a 2D scale \
transform.\\n     *\\n     * @param {number} x - The amount to scale in the X \
axis.\\n     * @param {number} y - The amount to scale in the Y axis.\\n     \
* @return {Matrix3} A reference to this matrix.\\n     */\\n    makeScale(x2, \
y) {\\n      this.set(\\n        x2,\\n        0,\\n        0,\\n        \
0,\\n        y,\\n        0,\\n        0,\\n        0,\\n        1\\n      \
);\\n      return this;\\n    }\\n    /**\\n     * Returns `true` if this \
matrix is equal with the given one.\\n     *\\n     * @param {Matrix3} matrix \
- The matrix to test for equality.\\n     * @return {boolean} Whether this \
matrix is equal with the given one.\\n     */\\n    equals(matrix) {\\n      \
const te = this.elements;\\n      const me = matrix.elements;\\n      for \
(let i2 = 0; i2 < 9; i2++) {\\n        if (te[i2] !== me[i2]) return \
false;\\n      }\\n      return true;\\n    }\\n    /**\\n     * Sets the \
elements of the matrix from the given array.\\n     *\\n     * @param \
{Array<number>} array - The matrix elements in column-major order.\\n     * \
@param {number} [offset=0] - Index of the first element in the array.\\n     \
* @return {Matrix3} A reference to this matrix.\\n     */\\n    \
fromArray(array, offset = 0) {\\n      for (let i2 = 0; i2 < 9; i2++) {\\n    \
    this.elements[i2] = array[i2 + offset];\\n      }\\n      return this;\\n \
   }\\n    /**\\n     * Writes the elements of this matrix to the given \
array. If no array is provided,\\n     * the method returns a new \
instance.\\n     *\\n     * @param {Array<number>} [array=[]] - The target \
array holding the matrix elements in column-major order.\\n     * @param \
{number} [offset=0] - Index of the first element in the array.\\n     * \
@return {Array<number>} The matrix elements in column-major order.\\n     \
*/\\n    toArray(array = [], offset = 0) {\\n      const te = \
this.elements;\\n      array[offset] = te[0];\\n      array[offset + 1] = \
te[1];\\n      array[offset + 2] = te[2];\\n      array[offset + 3] = \
te[3];\\n      array[offset + 4] = te[4];\\n      array[offset + 5] = \
te[5];\\n      array[offset + 6] = te[6];\\n      array[offset + 7] = \
te[7];\\n      array[offset + 8] = te[8];\\n      return array;\\n    }\\n    \
/**\\n     * Returns a matrix with copied values from this instance.\\n     \
*\\n     * @return {Matrix3} A clone of this instance.\\n     */\\n    \
clone() {\\n      return new this.constructor().fromArray(this.elements);\\n  \
  }\\n  }\\n  const _m3 = /* @__PURE__ */ new Matrix3();\\n  const _cache = \
{};\\n  function warnOnce(message) {\\n    if (message in _cache) return;\\n  \
  _cache[message] = true;\\n    console.warn(message);\\n  }\\n  const \
LINEAR_REC709_TO_XYZ = /* @__PURE__ */ new Matrix3().set(\\n    0.4123908,\\n \
   0.3575843,\\n    0.1804808,\\n    0.212639,\\n    0.7151687,\\n    \
0.0721923,\\n    0.0193308,\\n    0.1191948,\\n    0.9505322\\n  );\\n  const \
XYZ_TO_LINEAR_REC709 = /* @__PURE__ */ new Matrix3().set(\\n    3.2409699,\\n \
   -1.5373832,\\n    -0.4986108,\\n    -0.9692436,\\n    1.8759675,\\n    \
0.0415551,\\n    0.0556301,\\n    -0.203977,\\n    1.0569715\\n  );\\n  \
function createColorManagement() {\\n    const ColorManagement2 = {\\n      \
enabled: true,\\n      workingColorSpace: LinearSRGBColorSpace,\\n      \
/**\\n       * Implementations of supported color spaces.\\n       *\\n       \
* Required:\\n       *\\t- primaries: chromaticity coordinates [ rx ry gx gy \
bx by ]\\n       *\\t- whitePoint: reference white [ x y ]\\n       *\\t- \
transfer: transfer function (pre-defined)\\n       *\\t- toXYZ: Matrix3 RGB \
to XYZ transform\\n       *\\t- fromXYZ: Matrix3 XYZ to RGB transform\\n      \
 *\\t- luminanceCoefficients: RGB luminance coefficients\\n       *\\n       \
* Optional:\\n       *  - outputColorSpaceConfig: { drawingBufferColorSpace: \
ColorSpace }\\n       *  - workingColorSpaceConfig: { unpackColorSpace: \
ColorSpace }\\n       *\\n       * Reference:\\n       * - \
https://www.russellcottrell.com/photo/matrixCalculator.htm\\n       */\\n     \
 spaces: {},\\n      convert: function(color, sourceColorSpace, \
targetColorSpace) {\\n        if (this.enabled === false || sourceColorSpace \
=== targetColorSpace || !sourceColorSpace || !targetColorSpace) {\\n          \
return color;\\n        }\\n        if \
(this.spaces[sourceColorSpace].transfer === SRGBTransfer) {\\n          \
color.r = SRGBToLinear(color.r);\\n          color.g = \
SRGBToLinear(color.g);\\n          color.b = SRGBToLinear(color.b);\\n        \
}\\n        if (this.spaces[sourceColorSpace].primaries !== \
this.spaces[targetColorSpace].primaries) {\\n          \
color.applyMatrix3(this.spaces[sourceColorSpace].toXYZ);\\n          \
color.applyMatrix3(this.spaces[targetColorSpace].fromXYZ);\\n        }\\n     \
   if (this.spaces[targetColorSpace].transfer === SRGBTransfer) {\\n          \
color.r = LinearToSRGB(color.r);\\n          color.g = \
LinearToSRGB(color.g);\\n          color.b = LinearToSRGB(color.b);\\n        \
}\\n        return color;\\n      },\\n      workingToColorSpace: \
function(color, targetColorSpace) {\\n        return this.convert(color, \
this.workingColorSpace, targetColorSpace);\\n      },\\n      \
colorSpaceToWorking: function(color, sourceColorSpace) {\\n        return \
this.convert(color, sourceColorSpace, this.workingColorSpace);\\n      },\\n  \
    getPrimaries: function(colorSpace) {\\n        return \
this.spaces[colorSpace].primaries;\\n      },\\n      getTransfer: \
function(colorSpace) {\\n        if (colorSpace === NoColorSpace) return \
LinearTransfer;\\n        return this.spaces[colorSpace].transfer;\\n      \
},\\n      getLuminanceCoefficients: function(target, colorSpace = \
this.workingColorSpace) {\\n        return \
target.fromArray(this.spaces[colorSpace].luminanceCoefficients);\\n      \
},\\n      define: function(colorSpaces) {\\n        \
Object.assign(this.spaces, colorSpaces);\\n      },\\n      // Internal \
APIs\\n      _getMatrix: function(targetMatrix, sourceColorSpace, \
targetColorSpace) {\\n        return \
targetMatrix.copy(this.spaces[sourceColorSpace].toXYZ).multiply(this.spaces[t\
argetColorSpace].fromXYZ);\\n      },\\n      _getDrawingBufferColorSpace: \
function(colorSpace) {\\n        return \
this.spaces[colorSpace].outputColorSpaceConfig.drawingBufferColorSpace;\\n    \
  },\\n      _getUnpackColorSpace: function(colorSpace = \
this.workingColorSpace) {\\n        return \
this.spaces[colorSpace].workingColorSpaceConfig.unpackColorSpace;\\n      \
},\\n      // Deprecated\\n      fromWorkingColorSpace: function(color, \
targetColorSpace) {\\n        warnOnce(\"THREE.ColorManagement: \
.fromWorkingColorSpace() has been renamed to .workingToColorSpace().\");\\n   \
     return ColorManagement2.workingToColorSpace(color, targetColorSpace);\\n \
     },\\n      toWorkingColorSpace: function(color, sourceColorSpace) {\\n   \
     warnOnce(\"THREE.ColorManagement: .toWorkingColorSpace() has been \
renamed to .colorSpaceToWorking().\");\\n        return \
ColorManagement2.colorSpaceToWorking(color, sourceColorSpace);\\n      }\\n   \
 };\\n    const REC709_PRIMARIES = [0.64, 0.33, 0.3, 0.6, 0.15, 0.06];\\n    \
const REC709_LUMINANCE_COEFFICIENTS = [0.2126, 0.7152, 0.0722];\\n    const \
D65 = [0.3127, 0.329];\\n    ColorManagement2.define({\\n      \
[LinearSRGBColorSpace]: {\\n        primaries: REC709_PRIMARIES,\\n        \
whitePoint: D65,\\n        transfer: LinearTransfer,\\n        toXYZ: \
LINEAR_REC709_TO_XYZ,\\n        fromXYZ: XYZ_TO_LINEAR_REC709,\\n        \
luminanceCoefficients: REC709_LUMINANCE_COEFFICIENTS,\\n        \
workingColorSpaceConfig: { unpackColorSpace: SRGBColorSpace },\\n        \
outputColorSpaceConfig: { drawingBufferColorSpace: SRGBColorSpace }\\n      \
},\\n      [SRGBColorSpace]: {\\n        primaries: REC709_PRIMARIES,\\n      \
  whitePoint: D65,\\n        transfer: SRGBTransfer,\\n        toXYZ: \
LINEAR_REC709_TO_XYZ,\\n        fromXYZ: XYZ_TO_LINEAR_REC709,\\n        \
luminanceCoefficients: REC709_LUMINANCE_COEFFICIENTS,\\n        \
outputColorSpaceConfig: { drawingBufferColorSpace: SRGBColorSpace }\\n      \
}\\n    });\\n    return ColorManagement2;\\n  }\\n  const ColorManagement = \
/* @__PURE__ */ createColorManagement();\\n  function SRGBToLinear(c) {\\n    \
return c < 0.04045 ? c * 0.0773993808 : Math.pow(c * 0.9478672986 + \
0.0521327014, 2.4);\\n  }\\n  function LinearToSRGB(c) {\\n    return c < \
31308e-7 ? c * 12.92 : 1.055 * Math.pow(c, 0.41666) - 0.055;\\n  }\\n  class \
Box3 {\\n    /**\\n     * Constructs a new bounding box.\\n     *\\n     * \
@param {Vector3} [min=(Infinity,Infinity,Infinity)] - A vector representing \
the lower boundary of the box.\\n     * @param {Vector3} \
[max=(-Infinity,-Infinity,-Infinity)] - A vector representing the upper \
boundary of the box.\\n     */\\n    constructor(min = new Vector3(Infinity, \
Infinity, Infinity), max2 = new Vector3(-Infinity, -Infinity, -Infinity)) \
{\\n      this.isBox3 = true;\\n      this.min = min;\\n      this.max = \
max2;\\n    }\\n    /**\\n     * Sets the lower and upper boundaries of this \
box.\\n     * Please note that this method only copies the values from the \
given objects.\\n     *\\n     * @param {Vector3} min - The lower boundary of \
the box.\\n     * @param {Vector3} max - The upper boundary of the box.\\n    \
 * @return {Box3} A reference to this bounding box.\\n     */\\n    set(min, \
max2) {\\n      this.min.copy(min);\\n      this.max.copy(max2);\\n      \
return this;\\n    }\\n    /**\\n     * Sets the upper and lower bounds of \
this box so it encloses the position data\\n     * in the given array.\\n     \
*\\n     * @param {Array<number>} array - An array holding 3D position \
data.\\n     * @return {Box3} A reference to this bounding box.\\n     */\\n  \
  setFromArray(array) {\\n      this.makeEmpty();\\n      for (let i2 = 0, il \
= array.length; i2 < il; i2 += 3) {\\n        \
this.expandByPoint(_vector$b.fromArray(array, i2));\\n      }\\n      return \
this;\\n    }\\n    /**\\n     * Sets the upper and lower bounds of this box \
so it encloses the position data\\n     * in the given buffer attribute.\\n   \
  *\\n     * @param {BufferAttribute} attribute - A buffer attribute holding \
3D position data.\\n     * @return {Box3} A reference to this bounding \
box.\\n     */\\n    setFromBufferAttribute(attribute) {\\n      \
this.makeEmpty();\\n      for (let i2 = 0, il = attribute.count; i2 < il; \
i2++) {\\n        this.expandByPoint(_vector$b.fromBufferAttribute(attribute, \
i2));\\n      }\\n      return this;\\n    }\\n    /**\\n     * Sets the \
upper and lower bounds of this box so it encloses the position data\\n     * \
in the given array.\\n     *\\n     * @param {Array<Vector3>} points - An \
array holding 3D position data as instances of {@link Vector3}.\\n     * \
@return {Box3} A reference to this bounding box.\\n     */\\n    \
setFromPoints(points) {\\n      this.makeEmpty();\\n      for (let i2 = 0, il \
= points.length; i2 < il; i2++) {\\n        \
this.expandByPoint(points[i2]);\\n      }\\n      return this;\\n    }\\n    \
/**\\n     * Centers this box on the given center vector and sets this \
box\\'s width, height and\\n     * depth to the given size values.\\n     \
*\\n     * @param {Vector3} center - The center of the box.\\n     * @param \
{Vector3} size - The x, y and z dimensions of the box.\\n     * @return \
{Box3} A reference to this bounding box.\\n     */\\n    \
setFromCenterAndSize(center, size) {\\n      const halfSize = \
_vector$b.copy(size).multiplyScalar(0.5);\\n      \
this.min.copy(center).sub(halfSize);\\n      \
this.max.copy(center).add(halfSize);\\n      return this;\\n    }\\n    \
/**\\n     * Computes the world-axis-aligned bounding box for the given 3D \
object\\n     * (including its children), accounting for the object\\'s, and \
children\\'s,\\n     * world transforms. The function may result in a larger \
box than strictly necessary.\\n     *\\n     * @param {Object3D} object - The \
3D object to compute the bounding box for.\\n     * @param {boolean} \
[precise=false] - If set to `true`, the method computes the smallest\\n     * \
world-axis-aligned bounding box at the expense of more computation.\\n     * \
@return {Box3} A reference to this bounding box.\\n     */\\n    \
setFromObject(object, precise = false) {\\n      this.makeEmpty();\\n      \
return this.expandByObject(object, precise);\\n    }\\n    /**\\n     * \
Returns a new box with copied values from this instance.\\n     *\\n     * \
@return {Box3} A clone of this instance.\\n     */\\n    clone() {\\n      \
return new this.constructor().copy(this);\\n    }\\n    /**\\n     * Copies \
the values of the given box to this instance.\\n     *\\n     * @param {Box3} \
box - The box to copy.\\n     * @return {Box3} A reference to this bounding \
box.\\n     */\\n    copy(box) {\\n      this.min.copy(box.min);\\n      \
this.max.copy(box.max);\\n      return this;\\n    }\\n    /**\\n     * Makes \
this box empty which means in encloses a zero space in 3D.\\n     *\\n     * \
@return {Box3} A reference to this bounding box.\\n     */\\n    makeEmpty() \
{\\n      this.min.x = this.min.y = this.min.z = Infinity;\\n      this.max.x \
= this.max.y = this.max.z = -Infinity;\\n      return this;\\n    }\\n    \
/**\\n     * Returns true if this box includes zero points within its \
bounds.\\n     * Note that a box with equal lower and upper bounds still \
includes one\\n     * point, the one both bounds share.\\n     *\\n     * \
@return {boolean} Whether this box is empty or not.\\n     */\\n    isEmpty() \
{\\n      return this.max.x < this.min.x || this.max.y < this.min.y || \
this.max.z < this.min.z;\\n    }\\n    /**\\n     * Returns the center point \
of this box.\\n     *\\n     * @param {Vector3} target - The target vector \
that is used to store the method\\'s result.\\n     * @return {Vector3} The \
center point.\\n     */\\n    getCenter(target) {\\n      return \
this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, \
this.max).multiplyScalar(0.5);\\n    }\\n    /**\\n     * Returns the \
dimensions of this box.\\n     *\\n     * @param {Vector3} target - The \
target vector that is used to store the method\\'s result.\\n     * @return \
{Vector3} The size.\\n     */\\n    getSize(target) {\\n      return \
this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, \
this.min);\\n    }\\n    /**\\n     * Expands the boundaries of this box to \
include the given point.\\n     *\\n     * @param {Vector3} point - The point \
that should be included by the bounding box.\\n     * @return {Box3} A \
reference to this bounding box.\\n     */\\n    expandByPoint(point) {\\n     \
 this.min.min(point);\\n      this.max.max(point);\\n      return this;\\n    \
}\\n    /**\\n     * Expands this box equilaterally by the given vector. The \
width of this\\n     * box will be expanded by the x component of the vector \
in both\\n     * directions. The height of this box will be expanded by the y \
component of\\n     * the vector in both directions. The depth of this box \
will be\\n     * expanded by the z component of the vector in both \
directions.\\n     *\\n     * @param {Vector3} vector - The vector that \
should expand the bounding box.\\n     * @return {Box3} A reference to this \
bounding box.\\n     */\\n    expandByVector(vector) {\\n      \
this.min.sub(vector);\\n      this.max.add(vector);\\n      return this;\\n   \
 }\\n    /**\\n     * Expands each dimension of the box by the given scalar. \
If negative, the\\n     * dimensions of the box will be contracted.\\n     \
*\\n     * @param {number} scalar - The scalar value that should expand the \
bounding box.\\n     * @return {Box3} A reference to this bounding box.\\n    \
 */\\n    expandByScalar(scalar) {\\n      this.min.addScalar(-scalar);\\n    \
  this.max.addScalar(scalar);\\n      return this;\\n    }\\n    /**\\n     * \
Expands the boundaries of this box to include the given 3D object and\\n     \
* its children, accounting for the object\\'s, and children\\'s, world\\n     \
* transforms. The function may result in a larger box than strictly\\n     * \
necessary (unless the precise parameter is set to true).\\n     *\\n     * \
@param {Object3D} object - The 3D object that should expand the bounding \
box.\\n     * @param {boolean} precise - If set to `true`, the method expands \
the bounding box\\n     * as little as necessary at the expense of more \
computation.\\n     * @return {Box3} A reference to this bounding box.\\n     \
*/\\n    expandByObject(object, precise = false) {\\n      \
object.updateWorldMatrix(false, false);\\n      const geometry = \
object.geometry;\\n      if (geometry !== void 0) {\\n        const \
positionAttribute = geometry.getAttribute(\"position\");\\n        if \
(precise === true && positionAttribute !== void 0 && object.isInstancedMesh \
!== true) {\\n          for (let i2 = 0, l = positionAttribute.count; i2 < l; \
i2++) {\\n            if (object.isMesh === true) {\\n              \
object.getVertexPosition(i2, _vector$b);\\n            } else {\\n            \
  _vector$b.fromBufferAttribute(positionAttribute, i2);\\n            }\\n    \
        _vector$b.applyMatrix4(object.matrixWorld);\\n            \
this.expandByPoint(_vector$b);\\n          }\\n        } else {\\n          \
if (object.boundingBox !== void 0) {\\n            if (object.boundingBox === \
null) {\\n              object.computeBoundingBox();\\n            }\\n       \
     _box$4.copy(object.boundingBox);\\n          } else {\\n            if \
(geometry.boundingBox === null) {\\n              \
geometry.computeBoundingBox();\\n            }\\n            \
_box$4.copy(geometry.boundingBox);\\n          }\\n          \
_box$4.applyMatrix4(object.matrixWorld);\\n          this.union(_box$4);\\n   \
     }\\n      }\\n      const children = object.children;\\n      for (let \
i2 = 0, l = children.length; i2 < l; i2++) {\\n        \
this.expandByObject(children[i2], precise);\\n      }\\n      return this;\\n \
   }\\n    /**\\n     * Returns `true` if the given point lies within or on \
the boundaries of this box.\\n     *\\n     * @param {Vector3} point - The \
point to test.\\n     * @return {boolean} Whether the bounding box contains \
the given point or not.\\n     */\\n    containsPoint(point) {\\n      return \
point.x >= this.min.x && point.x <= this.max.x && point.y >= this.min.y && \
point.y <= this.max.y && point.z >= this.min.z && point.z <= this.max.z;\\n   \
 }\\n    /**\\n     * Returns `true` if this bounding box includes the \
entirety of the given bounding box.\\n     * If this box and the given one \
are identical, this function also returns `true`.\\n     *\\n     * @param \
{Box3} box - The bounding box to test.\\n     * @return {boolean} Whether the \
bounding box contains the given bounding box or not.\\n     */\\n    \
containsBox(box) {\\n      return this.min.x <= box.min.x && box.max.x <= \
this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && \
this.min.z <= box.min.z && box.max.z <= this.max.z;\\n    }\\n    /**\\n     \
* Returns a point as a proportion of this box\\'s width, height and depth.\\n \
    *\\n     * @param {Vector3} point - A point in 3D space.\\n     * @param \
{Vector3} target - The target vector that is used to store the method\\'s \
result.\\n     * @return {Vector3} A point as a proportion of this box\\'s \
width, height and depth.\\n     */\\n    getParameter(point, target) {\\n     \
 return target.set(\\n        (point.x - this.min.x) / (this.max.x - \
this.min.x),\\n        (point.y - this.min.y) / (this.max.y - this.min.y),\\n \
       (point.z - this.min.z) / (this.max.z - this.min.z)\\n      );\\n    \
}\\n    /**\\n     * Returns `true` if the given bounding box intersects with \
this bounding box.\\n     *\\n     * @param {Box3} box - The bounding box to \
test.\\n     * @return {boolean} Whether the given bounding box intersects \
with this bounding box.\\n     */\\n    intersectsBox(box) {\\n      return \
box.max.x >= this.min.x && box.min.x <= this.max.x && box.max.y >= this.min.y \
&& box.min.y <= this.max.y && box.max.z >= this.min.z && box.min.z <= \
this.max.z;\\n    }\\n    /**\\n     * Returns `true` if the given bounding \
sphere intersects with this bounding box.\\n     *\\n     * @param {Sphere} \
sphere - The bounding sphere to test.\\n     * @return {boolean} Whether the \
given bounding sphere intersects with this bounding box.\\n     */\\n    \
intersectsSphere(sphere) {\\n      this.clampPoint(sphere.center, \
_vector$b);\\n      return _vector$b.distanceToSquared(sphere.center) <= \
sphere.radius * sphere.radius;\\n    }\\n    /**\\n     * Returns `true` if \
the given plane intersects with this bounding box.\\n     *\\n     * @param \
{Plane} plane - The plane to test.\\n     * @return {boolean} Whether the \
given plane intersects with this bounding box.\\n     */\\n    \
intersectsPlane(plane) {\\n      let min, max2;\\n      if (plane.normal.x > \
0) {\\n        min = plane.normal.x * this.min.x;\\n        max2 = \
plane.normal.x * this.max.x;\\n      } else {\\n        min = plane.normal.x \
* this.max.x;\\n        max2 = plane.normal.x * this.min.x;\\n      }\\n      \
if (plane.normal.y > 0) {\\n        min += plane.normal.y * this.min.y;\\n    \
    max2 += plane.normal.y * this.max.y;\\n      } else {\\n        min += \
plane.normal.y * this.max.y;\\n        max2 += plane.normal.y * \
this.min.y;\\n      }\\n      if (plane.normal.z > 0) {\\n        min += \
plane.normal.z * this.min.z;\\n        max2 += plane.normal.z * \
this.max.z;\\n      } else {\\n        min += plane.normal.z * this.max.z;\\n \
       max2 += plane.normal.z * this.min.z;\\n      }\\n      return min <= \
-plane.constant && max2 >= -plane.constant;\\n    }\\n    /**\\n     * \
Returns `true` if the given triangle intersects with this bounding box.\\n    \
 *\\n     * @param {Triangle} triangle - The triangle to test.\\n     * \
@return {boolean} Whether the given triangle intersects with this bounding \
box.\\n     */\\n    intersectsTriangle(triangle) {\\n      if \
(this.isEmpty()) {\\n        return false;\\n      }\\n      \
this.getCenter(_center);\\n      _extents.subVectors(this.max, _center);\\n   \
   _v0$2.subVectors(triangle.a, _center);\\n      \
_v1$7.subVectors(triangle.b, _center);\\n      _v2$4.subVectors(triangle.c, \
_center);\\n      _f0.subVectors(_v1$7, _v0$2);\\n      _f1.subVectors(_v2$4, \
_v1$7);\\n      _f2.subVectors(_v0$2, _v2$4);\\n      let axes = [\\n        \
0,\\n        -_f0.z,\\n        _f0.y,\\n        0,\\n        -_f1.z,\\n       \
 _f1.y,\\n        0,\\n        -_f2.z,\\n        _f2.y,\\n        _f0.z,\\n   \
     0,\\n        -_f0.x,\\n        _f1.z,\\n        0,\\n        -_f1.x,\\n  \
      _f2.z,\\n        0,\\n        -_f2.x,\\n        -_f0.y,\\n        \
_f0.x,\\n        0,\\n        -_f1.y,\\n        _f1.x,\\n        0,\\n        \
-_f2.y,\\n        _f2.x,\\n        0\\n      ];\\n      if (!satForAxes(axes, \
_v0$2, _v1$7, _v2$4, _extents)) {\\n        return false;\\n      }\\n      \
axes = [1, 0, 0, 0, 1, 0, 0, 0, 1];\\n      if (!satForAxes(axes, _v0$2, \
_v1$7, _v2$4, _extents)) {\\n        return false;\\n      }\\n      \
_triangleNormal.crossVectors(_f0, _f1);\\n      axes = [_triangleNormal.x, \
_triangleNormal.y, _triangleNormal.z];\\n      return satForAxes(axes, _v0$2, \
_v1$7, _v2$4, _extents);\\n    }\\n    /**\\n     * Clamps the given point \
within the bounds of this box.\\n     *\\n     * @param {Vector3} point - The \
point to clamp.\\n     * @param {Vector3} target - The target vector that is \
used to store the method\\'s result.\\n     * @return {Vector3} The clamped \
point.\\n     */\\n    clampPoint(point, target) {\\n      return \
target.copy(point).clamp(this.min, this.max);\\n    }\\n    /**\\n     * \
Returns the euclidean distance from any edge of this box to the specified \
point. If\\n     * the given point lies inside of this box, the distance will \
be `0`.\\n     *\\n     * @param {Vector3} point - The point to compute the \
distance to.\\n     * @return {number} The euclidean distance.\\n     */\\n   \
 distanceToPoint(point) {\\n      return this.clampPoint(point, \
_vector$b).distanceTo(point);\\n    }\\n    /**\\n     * Returns a bounding \
sphere that encloses this bounding box.\\n     *\\n     * @param {Sphere} \
target - The target sphere that is used to store the method\\'s result.\\n    \
 * @return {Sphere} The bounding sphere that encloses this bounding box.\\n   \
  */\\n    getBoundingSphere(target) {\\n      if (this.isEmpty()) {\\n       \
 target.makeEmpty();\\n      } else {\\n        \
this.getCenter(target.center);\\n        target.radius = \
this.getSize(_vector$b).length() * 0.5;\\n      }\\n      return target;\\n   \
 }\\n    /**\\n     * Computes the intersection of this bounding box and the \
given one, setting the upper\\n     * bound of this box to the lesser of the \
two boxes\\' upper bounds and the\\n     * lower bound of this box to the \
greater of the two boxes\\' lower bounds. If\\n     * there\\'s no overlap, \
makes this box empty.\\n     *\\n     * @param {Box3} box - The bounding box \
to intersect with.\\n     * @return {Box3} A reference to this bounding \
box.\\n     */\\n    intersect(box) {\\n      this.min.max(box.min);\\n      \
this.max.min(box.max);\\n      if (this.isEmpty()) this.makeEmpty();\\n      \
return this;\\n    }\\n    /**\\n     * Computes the union of this box and \
another and the given one, setting the upper\\n     * bound of this box to \
the greater of the two boxes\\' upper bounds and the\\n     * lower bound of \
this box to the lesser of the two boxes\\' lower bounds.\\n     *\\n     * \
@param {Box3} box - The bounding box that will be unioned with this \
instance.\\n     * @return {Box3} A reference to this bounding box.\\n     \
*/\\n    union(box) {\\n      this.min.min(box.min);\\n      \
this.max.max(box.max);\\n      return this;\\n    }\\n    /**\\n     * \
Transforms this bounding box by the given 4x4 transformation matrix.\\n     \
*\\n     * @param {Matrix4} matrix - The transformation matrix.\\n     * \
@return {Box3} A reference to this bounding box.\\n     */\\n    \
applyMatrix4(matrix) {\\n      if (this.isEmpty()) return this;\\n      \
_points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix);\\n   \
   _points[1].set(this.min.x, this.min.y, \
this.max.z).applyMatrix4(matrix);\\n      _points[2].set(this.min.x, \
this.max.y, this.min.z).applyMatrix4(matrix);\\n      \
_points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix);\\n   \
   _points[4].set(this.max.x, this.min.y, \
this.min.z).applyMatrix4(matrix);\\n      _points[5].set(this.max.x, \
this.min.y, this.max.z).applyMatrix4(matrix);\\n      \
_points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix);\\n   \
   _points[7].set(this.max.x, this.max.y, \
this.max.z).applyMatrix4(matrix);\\n      this.setFromPoints(_points);\\n     \
 return this;\\n    }\\n    /**\\n     * Adds the given offset to both the \
upper and lower bounds of this bounding box,\\n     * effectively moving it \
in 3D space.\\n     *\\n     * @param {Vector3} offset - The offset that \
should be used to translate the bounding box.\\n     * @return {Box3} A \
reference to this bounding box.\\n     */\\n    translate(offset) {\\n      \
this.min.add(offset);\\n      this.max.add(offset);\\n      return this;\\n   \
 }\\n    /**\\n     * Returns `true` if this bounding box is equal with the \
given one.\\n     *\\n     * @param {Box3} box - The box to test for \
equality.\\n     * @return {boolean} Whether this bounding box is equal with \
the given one.\\n     */\\n    equals(box) {\\n      return \
box.min.equals(this.min) && box.max.equals(this.max);\\n    }\\n    /**\\n    \
 * Returns a serialized structure of the bounding box.\\n     *\\n     * \
@return {Object} Serialized structure with fields representing the object \
state.\\n     */\\n    toJSON() {\\n      return {\\n        min: \
this.min.toArray(),\\n        max: this.max.toArray()\\n      };\\n    }\\n   \
 /**\\n     * Returns a serialized structure of the bounding box.\\n     *\\n \
    * @param {Object} json - The serialized json to set the box from.\\n     \
* @return {Box3} A reference to this bounding box.\\n     */\\n    \
fromJSON(json) {\\n      this.min.fromArray(json.min);\\n      \
this.max.fromArray(json.max);\\n      return this;\\n    }\\n  }\\n  const \
_points = [\\n    /* @__PURE__ */ new Vector3(),\\n    /* @__PURE__ */ new \
Vector3(),\\n    /* @__PURE__ */ new Vector3(),\\n    /* @__PURE__ */ new \
Vector3(),\\n    /* @__PURE__ */ new Vector3(),\\n    /* @__PURE__ */ new \
Vector3(),\\n    /* @__PURE__ */ new Vector3(),\\n    /* @__PURE__ */ new \
Vector3()\\n  ];\\n  const _vector$b = /* @__PURE__ */ new Vector3();\\n  \
const _box$4 = /* @__PURE__ */ new Box3();\\n  const _v0$2 = /* @__PURE__ */ \
new Vector3();\\n  const _v1$7 = /* @__PURE__ */ new Vector3();\\n  const \
_v2$4 = /* @__PURE__ */ new Vector3();\\n  const _f0 = /* @__PURE__ */ new \
Vector3();\\n  const _f1 = /* @__PURE__ */ new Vector3();\\n  const _f2 = /* \
@__PURE__ */ new Vector3();\\n  const _center = /* @__PURE__ */ new \
Vector3();\\n  const _extents = /* @__PURE__ */ new Vector3();\\n  const \
_triangleNormal = /* @__PURE__ */ new Vector3();\\n  const _testAxis = /* \
@__PURE__ */ new Vector3();\\n  function satForAxes(axes, v0, v1, v2, \
extents) {\\n    for (let i2 = 0, j = axes.length - 3; i2 <= j; i2 += 3) {\\n \
     _testAxis.fromArray(axes, i2);\\n      const r = extents.x * \
Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * \
Math.abs(_testAxis.z);\\n      const p0 = v0.dot(_testAxis);\\n      const p1 \
= v1.dot(_testAxis);\\n      const p2 = v2.dot(_testAxis);\\n      if \
(Math.max(-Math.max(p0, p1, p2), Math.min(p0, p1, p2)) > r) {\\n        \
return false;\\n      }\\n    }\\n    return true;\\n  }\\n  const \
_colorKeywords = {\\n    \"aliceblue\": 15792383,\\n    \"antiquewhite\": \
16444375,\\n    \"aqua\": 65535,\\n    \"aquamarine\": 8388564,\\n    \
\"azure\": 15794175,\\n    \"beige\": 16119260,\\n    \"bisque\": \
16770244,\\n    \"black\": 0,\\n    \"blanchedalmond\": 16772045,\\n    \
\"blue\": 255,\\n    \"blueviolet\": 9055202,\\n    \"brown\": 10824234,\\n   \
 \"burlywood\": 14596231,\\n    \"cadetblue\": 6266528,\\n    \"chartreuse\": \
8388352,\\n    \"chocolate\": 13789470,\\n    \"coral\": 16744272,\\n    \
\"cornflowerblue\": 6591981,\\n    \"cornsilk\": 16775388,\\n    \"crimson\": \
14423100,\\n    \"cyan\": 65535,\\n    \"darkblue\": 139,\\n    \"darkcyan\": \
35723,\\n    \"darkgoldenrod\": 12092939,\\n    \"darkgray\": 11119017,\\n    \
\"darkgreen\": 25600,\\n    \"darkgrey\": 11119017,\\n    \"darkkhaki\": \
12433259,\\n    \"darkmagenta\": 9109643,\\n    \"darkolivegreen\": \
5597999,\\n    \"darkorange\": 16747520,\\n    \"darkorchid\": 10040012,\\n   \
 \"darkred\": 9109504,\\n    \"darksalmon\": 15308410,\\n    \
\"darkseagreen\": 9419919,\\n    \"darkslateblue\": 4734347,\\n    \
\"darkslategray\": 3100495,\\n    \"darkslategrey\": 3100495,\\n    \
\"darkturquoise\": 52945,\\n    \"darkviolet\": 9699539,\\n    \"deeppink\": \
16716947,\\n    \"deepskyblue\": 49151,\\n    \"dimgray\": 6908265,\\n    \
\"dimgrey\": 6908265,\\n    \"dodgerblue\": 2003199,\\n    \"firebrick\": \
11674146,\\n    \"floralwhite\": 16775920,\\n    \"forestgreen\": 2263842,\\n \
   \"fuchsia\": 16711935,\\n    \"gainsboro\": 14474460,\\n    \
\"ghostwhite\": 16316671,\\n    \"gold\": 16766720,\\n    \"goldenrod\": \
14329120,\\n    \"gray\": 8421504,\\n    \"green\": 32768,\\n    \
\"greenyellow\": 11403055,\\n    \"grey\": 8421504,\\n    \"honeydew\": \
15794160,\\n    \"hotpink\": 16738740,\\n    \"indianred\": 13458524,\\n    \
\"indigo\": 4915330,\\n    \"ivory\": 16777200,\\n    \"khaki\": 15787660,\\n \
   \"lavender\": 15132410,\\n    \"lavenderblush\": 16773365,\\n    \
\"lawngreen\": 8190976,\\n    \"lemonchiffon\": 16775885,\\n    \
\"lightblue\": 11393254,\\n    \"lightcoral\": 15761536,\\n    \"lightcyan\": \
14745599,\\n    \"lightgoldenrodyellow\": 16448210,\\n    \"lightgray\": \
13882323,\\n    \"lightgreen\": 9498256,\\n    \"lightgrey\": 13882323,\\n    \
\"lightpink\": 16758465,\\n    \"lightsalmon\": 16752762,\\n    \
\"lightseagreen\": 2142890,\\n    \"lightskyblue\": 8900346,\\n    \
\"lightslategray\": 7833753,\\n    \"lightslategrey\": 7833753,\\n    \
\"lightsteelblue\": 11584734,\\n    \"lightyellow\": 16777184,\\n    \
\"lime\": 65280,\\n    \"limegreen\": 3329330,\\n    \"linen\": 16445670,\\n  \
  \"magenta\": 16711935,\\n    \"maroon\": 8388608,\\n    \
\"mediumaquamarine\": 6737322,\\n    \"mediumblue\": 205,\\n    \
\"mediumorchid\": 12211667,\\n    \"mediumpurple\": 9662683,\\n    \
\"mediumseagreen\": 3978097,\\n    \"mediumslateblue\": 8087790,\\n    \
\"mediumspringgreen\": 64154,\\n    \"mediumturquoise\": 4772300,\\n    \
\"mediumvioletred\": 13047173,\\n    \"midnightblue\": 1644912,\\n    \
\"mintcream\": 16121850,\\n    \"mistyrose\": 16770273,\\n    \"moccasin\": \
16770229,\\n    \"navajowhite\": 16768685,\\n    \"navy\": 128,\\n    \
\"oldlace\": 16643558,\\n    \"olive\": 8421376,\\n    \"olivedrab\": \
7048739,\\n    \"orange\": 16753920,\\n    \"orangered\": 16729344,\\n    \
\"orchid\": 14315734,\\n    \"palegoldenrod\": 15657130,\\n    \"palegreen\": \
10025880,\\n    \"paleturquoise\": 11529966,\\n    \"palevioletred\": \
14381203,\\n    \"papayawhip\": 16773077,\\n    \"peachpuff\": 16767673,\\n   \
 \"peru\": 13468991,\\n    \"pink\": 16761035,\\n    \"plum\": 14524637,\\n   \
 \"powderblue\": 11591910,\\n    \"purple\": 8388736,\\n    \
\"rebeccapurple\": 6697881,\\n    \"red\": 16711680,\\n    \"rosybrown\": \
12357519,\\n    \"royalblue\": 4286945,\\n    \"saddlebrown\": 9127187,\\n    \
\"salmon\": 16416882,\\n    \"sandybrown\": 16032864,\\n    \"seagreen\": \
3050327,\\n    \"seashell\": 16774638,\\n    \"sienna\": 10506797,\\n    \
\"silver\": 12632256,\\n    \"skyblue\": 8900331,\\n    \"slateblue\": \
6970061,\\n    \"slategray\": 7372944,\\n    \"slategrey\": 7372944,\\n    \
\"snow\": 16775930,\\n    \"springgreen\": 65407,\\n    \"steelblue\": \
4620980,\\n    \"tan\": 13808780,\\n    \"teal\": 32896,\\n    \"thistle\": \
14204888,\\n    \"tomato\": 16737095,\\n    \"turquoise\": 4251856,\\n    \
\"violet\": 15631086,\\n    \"wheat\": 16113331,\\n    \"white\": \
16777215,\\n    \"whitesmoke\": 16119285,\\n    \"yellow\": 16776960,\\n    \
\"yellowgreen\": 10145074\\n  };\\n  const _hslA = { h: 0, s: 0, l: 0 };\\n  \
const _hslB = { h: 0, s: 0, l: 0 };\\n  function hue2rgb(p, q, t) {\\n    if \
(t < 0) t += 1;\\n    if (t > 1) t -= 1;\\n    if (t < 1 / 6) return p + (q - \
p) * 6 * t;\\n    if (t < 1 / 2) return q;\\n    if (t < 2 / 3) return p + (q \
- p) * 6 * (2 / 3 - t);\\n    return p;\\n  }\\n  class Color {\\n    /**\\n  \
   * Constructs a new color.\\n     *\\n     * Note that standard method of \
specifying color in three.js is with a hexadecimal triplet,\\n     * and that \
method is used throughout the rest of the documentation.\\n     *\\n     * \
@param {(number|string|Color)} [r] - The red component of the color. If `g` \
and `b` are\\n     * not provided, it can be hexadecimal triplet, a CSS-style \
string or another `Color` instance.\\n     * @param {number} [g] - The green \
component.\\n     * @param {number} [b] - The blue component.\\n     */\\n    \
constructor(r, g, b) {\\n      this.isColor = true;\\n      this.r = 1;\\n    \
  this.g = 1;\\n      this.b = 1;\\n      return this.set(r, g, b);\\n    \
}\\n    /**\\n     * Sets the colors\\'s components from the given values.\\n \
    *\\n     * @param {(number|string|Color)} [r] - The red component of the \
color. If `g` and `b` are\\n     * not provided, it can be hexadecimal \
triplet, a CSS-style string or another `Color` instance.\\n     * @param \
{number} [g] - The green component.\\n     * @param {number} [b] - The blue \
component.\\n     * @return {Color} A reference to this color.\\n     */\\n   \
 set(r, g, b) {\\n      if (g === void 0 && b === void 0) {\\n        const \
value = r;\\n        if (value && value.isColor) {\\n          \
this.copy(value);\\n        } else if (typeof value === \"number\") {\\n      \
    this.setHex(value);\\n        } else if (typeof value === \"string\") \
{\\n          this.setStyle(value);\\n        }\\n      } else {\\n        \
this.setRGB(r, g, b);\\n      }\\n      return this;\\n    }\\n    /**\\n     \
* Sets the colors\\'s components to the given scalar value.\\n     *\\n     * \
@param {number} scalar - The scalar value.\\n     * @return {Color} A \
reference to this color.\\n     */\\n    setScalar(scalar) {\\n      this.r = \
scalar;\\n      this.g = scalar;\\n      this.b = scalar;\\n      return \
this;\\n    }\\n    /**\\n     * Sets this color from a hexadecimal value.\\n \
    *\\n     * @param {number} hex - The hexadecimal value.\\n     * @param \
{string} [colorSpace=SRGBColorSpace] - The color space.\\n     * @return \
{Color} A reference to this color.\\n     */\\n    setHex(hex, colorSpace = \
SRGBColorSpace) {\\n      hex = Math.floor(hex);\\n      this.r = (hex >> 16 \
& 255) / 255;\\n      this.g = (hex >> 8 & 255) / 255;\\n      this.b = (hex \
& 255) / 255;\\n      ColorManagement.colorSpaceToWorking(this, \
colorSpace);\\n      return this;\\n    }\\n    /**\\n     * Sets this color \
from RGB values.\\n     *\\n     * @param {number} r - Red channel value \
between `0.0` and `1.0`.\\n     * @param {number} g - Green channel value \
between `0.0` and `1.0`.\\n     * @param {number} b - Blue channel value \
between `0.0` and `1.0`.\\n     * @param {string} \
[colorSpace=ColorManagement.workingColorSpace] - The color space.\\n     * \
@return {Color} A reference to this color.\\n     */\\n    setRGB(r, g, b, \
colorSpace = ColorManagement.workingColorSpace) {\\n      this.r = r;\\n      \
this.g = g;\\n      this.b = b;\\n      \
ColorManagement.colorSpaceToWorking(this, colorSpace);\\n      return \
this;\\n    }\\n    /**\\n     * Sets this color from RGB values.\\n     *\\n \
    * @param {number} h - Hue value between `0.0` and `1.0`.\\n     * @param \
{number} s - Saturation value between `0.0` and `1.0`.\\n     * @param \
{number} l - Lightness value between `0.0` and `1.0`.\\n     * @param \
{string} [colorSpace=ColorManagement.workingColorSpace] - The color space.\\n \
    * @return {Color} A reference to this color.\\n     */\\n    setHSL(h, s, \
l, colorSpace = ColorManagement.workingColorSpace) {\\n      h = \
euclideanModulo(h, 1);\\n      s = clamp(s, 0, 1);\\n      l = clamp(l, 0, \
1);\\n      if (s === 0) {\\n        this.r = this.g = this.b = l;\\n      } \
else {\\n        const p = l <= 0.5 ? l * (1 + s) : l + s - l * s;\\n        \
const q = 2 * l - p;\\n        this.r = hue2rgb(q, p, h + 1 / 3);\\n        \
this.g = hue2rgb(q, p, h);\\n        this.b = hue2rgb(q, p, h - 1 / 3);\\n    \
  }\\n      ColorManagement.colorSpaceToWorking(this, colorSpace);\\n      \
return this;\\n    }\\n    /**\\n     * Sets this color from a CSS-style \
string. For example, `rgb(250, 0,0)`,\\n     * `rgb(100%, 0%, 0%)`, `hsl(0, \
100%, 50%)`, `#ff0000`, `#f00`, or `red` ( or\\n     * any [X11 color \
name]{@link https://en.wikipedia.org/wiki/X11_color_names#Color_name_chart} \
-\\n     * all 140 color names are supported).\\n     *\\n     * @param \
{string} style - Color as a CSS-style string.\\n     * @param {string} \
[colorSpace=SRGBColorSpace] - The color space.\\n     * @return {Color} A \
reference to this color.\\n     */\\n    setStyle(style, colorSpace = \
SRGBColorSpace) {\\n      function handleAlpha(string) {\\n        if (string \
=== void 0) return;\\n        if (parseFloat(string) < 1) {\\n          \
console.warn(\"THREE.Color: Alpha component of \" + style + \" will be \
ignored.\");\\n        }\\n      }\\n      let m;\\n      if (m = \
/^(\\\\w+)\\\\(([^\\\\)]*)\\\\)/.exec(style)) {\\n        let color;\\n       \
 const name = m[1];\\n        const components = m[2];\\n        switch \
(name) {\\n          case \"rgb\":\\n          case \"rgba\":\\n            \
if (color = \
/^\\\\s*(\\\\d+)\\\\s*,\\\\s*(\\\\d+)\\\\s*,\\\\s*(\\\\d+)\\\\s*(?:,\\\\s*(\\\
\\d*\\\\.?\\\\d+)\\\\s*)?$/.exec(components)) {\\n              \
handleAlpha(color[4]);\\n              return this.setRGB(\\n                \
Math.min(255, parseInt(color[1], 10)) / 255,\\n                Math.min(255, \
parseInt(color[2], 10)) / 255,\\n                Math.min(255, \
parseInt(color[3], 10)) / 255,\\n                colorSpace\\n              \
);\\n            }\\n            if (color = \
/^\\\\s*(\\\\d+)\\\\%\\\\s*,\\\\s*(\\\\d+)\\\\%\\\\s*,\\\\s*(\\\\d+)\\\\%\\\\\
s*(?:,\\\\s*(\\\\d*\\\\.?\\\\d+)\\\\s*)?$/.exec(components)) {\\n             \
 handleAlpha(color[4]);\\n              return this.setRGB(\\n                \
Math.min(100, parseInt(color[1], 10)) / 100,\\n                Math.min(100, \
parseInt(color[2], 10)) / 100,\\n                Math.min(100, \
parseInt(color[3], 10)) / 100,\\n                colorSpace\\n              \
);\\n            }\\n            break;\\n          case \"hsl\":\\n          \
case \"hsla\":\\n            if (color = \
/^\\\\s*(\\\\d*\\\\.?\\\\d+)\\\\s*,\\\\s*(\\\\d*\\\\.?\\\\d+)\\\\%\\\\s*,\\\\\
s*(\\\\d*\\\\.?\\\\d+)\\\\%\\\\s*(?:,\\\\s*(\\\\d*\\\\.?\\\\d+)\\\\s*)?$/.exe\
c(components)) {\\n              handleAlpha(color[4]);\\n              \
return this.setHSL(\\n                parseFloat(color[1]) / 360,\\n          \
      parseFloat(color[2]) / 100,\\n                parseFloat(color[3]) / \
100,\\n                colorSpace\\n              );\\n            }\\n       \
     break;\\n          default:\\n            console.warn(\"THREE.Color: \
Unknown color model \" + style);\\n        }\\n      } else if (m = \
/^\\\\#([A-Fa-f\\\\d]+)$/.exec(style)) {\\n        const hex = m[1];\\n       \
 const size = hex.length;\\n        if (size === 3) {\\n          return \
this.setRGB(\\n            parseInt(hex.charAt(0), 16) / 15,\\n            \
parseInt(hex.charAt(1), 16) / 15,\\n            parseInt(hex.charAt(2), 16) / \
15,\\n            colorSpace\\n          );\\n        } else if (size === 6) \
{\\n          return this.setHex(parseInt(hex, 16), colorSpace);\\n        } \
else {\\n          console.warn(\"THREE.Color: Invalid hex color \" + \
style);\\n        }\\n      } else if (style && style.length > 0) {\\n        \
return this.setColorName(style, colorSpace);\\n      }\\n      return \
this;\\n    }\\n    /**\\n     * Sets this color from a color name. Faster \
than {@link Color#setStyle} if\\n     * you don\\'t need the other CSS-style \
formats.\\n     *\\n     * For convenience, the list of names is exposed in \
`Color.NAMES` as a hash.\\n     * ```js\\n     * Color.NAMES.aliceblue // \
returns 0xF0F8FF\\n     * ```\\n     *\\n     * @param {string} style - The \
color name.\\n     * @param {string} [colorSpace=SRGBColorSpace] - The color \
space.\\n     * @return {Color} A reference to this color.\\n     */\\n    \
setColorName(style, colorSpace = SRGBColorSpace) {\\n      const hex = \
_colorKeywords[style.toLowerCase()];\\n      if (hex !== void 0) {\\n        \
this.setHex(hex, colorSpace);\\n      } else {\\n        \
console.warn(\"THREE.Color: Unknown color \" + style);\\n      }\\n      \
return this;\\n    }\\n    /**\\n     * Returns a new color with copied \
values from this instance.\\n     *\\n     * @return {Color} A clone of this \
instance.\\n     */\\n    clone() {\\n      return new \
this.constructor(this.r, this.g, this.b);\\n    }\\n    /**\\n     * Copies \
the values of the given color to this instance.\\n     *\\n     * @param \
{Color} color - The color to copy.\\n     * @return {Color} A reference to \
this color.\\n     */\\n    copy(color) {\\n      this.r = color.r;\\n      \
this.g = color.g;\\n      this.b = color.b;\\n      return this;\\n    }\\n   \
 /**\\n     * Copies the given color into this color, and then converts this \
color from\\n     * `SRGBColorSpace` to `LinearSRGBColorSpace`.\\n     *\\n   \
  * @param {Color} color - The color to copy/convert.\\n     * @return \
{Color} A reference to this color.\\n     */\\n    copySRGBToLinear(color) \
{\\n      this.r = SRGBToLinear(color.r);\\n      this.g = \
SRGBToLinear(color.g);\\n      this.b = SRGBToLinear(color.b);\\n      return \
this;\\n    }\\n    /**\\n     * Copies the given color into this color, and \
then converts this color from\\n     * `LinearSRGBColorSpace` to \
`SRGBColorSpace`.\\n     *\\n     * @param {Color} color - The color to \
copy/convert.\\n     * @return {Color} A reference to this color.\\n     \
*/\\n    copyLinearToSRGB(color) {\\n      this.r = LinearToSRGB(color.r);\\n \
     this.g = LinearToSRGB(color.g);\\n      this.b = \
LinearToSRGB(color.b);\\n      return this;\\n    }\\n    /**\\n     * \
Converts this color from `SRGBColorSpace` to `LinearSRGBColorSpace`.\\n     \
*\\n     * @return {Color} A reference to this color.\\n     */\\n    \
convertSRGBToLinear() {\\n      this.copySRGBToLinear(this);\\n      return \
this;\\n    }\\n    /**\\n     * Converts this color from \
`LinearSRGBColorSpace` to `SRGBColorSpace`.\\n     *\\n     * @return {Color} \
A reference to this color.\\n     */\\n    convertLinearToSRGB() {\\n      \
this.copyLinearToSRGB(this);\\n      return this;\\n    }\\n    /**\\n     * \
Returns the hexadecimal value of this color.\\n     *\\n     * @param \
{string} [colorSpace=SRGBColorSpace] - The color space.\\n     * @return \
{number} The hexadecimal value.\\n     */\\n    getHex(colorSpace = \
SRGBColorSpace) {\\n      \
ColorManagement.workingToColorSpace(_color.copy(this), colorSpace);\\n      \
return Math.round(clamp(_color.r * 255, 0, 255)) * 65536 + \
Math.round(clamp(_color.g * 255, 0, 255)) * 256 + Math.round(clamp(_color.b * \
255, 0, 255));\\n    }\\n    /**\\n     * Returns the hexadecimal value of \
this color as a string (for example, \\'FFFFFF\\').\\n     *\\n     * @param \
{string} [colorSpace=SRGBColorSpace] - The color space.\\n     * @return \
{string} The hexadecimal value as a string.\\n     */\\n    \
getHexString(colorSpace = SRGBColorSpace) {\\n      return (\"000000\" + \
this.getHex(colorSpace).toString(16)).slice(-6);\\n    }\\n    /**\\n     * \
Converts the colors RGB values into the HSL format and stores them into \
the\\n     * given target object.\\n     *\\n     * @param \
{{h:number,s:number,l:number}} target - The target object that is used to \
store the method\\'s result.\\n     * @param {string} \
[colorSpace=ColorManagement.workingColorSpace] - The color space.\\n     * \
@return {{h:number,s:number,l:number}} The HSL representation of this \
color.\\n     */\\n    getHSL(target, colorSpace = \
ColorManagement.workingColorSpace) {\\n      \
ColorManagement.workingToColorSpace(_color.copy(this), colorSpace);\\n      \
const r = _color.r, g = _color.g, b = _color.b;\\n      const max2 = \
Math.max(r, g, b);\\n      const min = Math.min(r, g, b);\\n      let hue, \
saturation;\\n      const lightness = (min + max2) / 2;\\n      if (min === \
max2) {\\n        hue = 0;\\n        saturation = 0;\\n      } else {\\n      \
  const delta = max2 - min;\\n        saturation = lightness <= 0.5 ? delta / \
(max2 + min) : delta / (2 - max2 - min);\\n        switch (max2) {\\n         \
 case r:\\n            hue = (g - b) / delta + (g < b ? 6 : 0);\\n            \
break;\\n          case g:\\n            hue = (b - r) / delta + 2;\\n        \
    break;\\n          case b:\\n            hue = (r - g) / delta + 4;\\n    \
        break;\\n        }\\n        hue /= 6;\\n      }\\n      target.h = \
hue;\\n      target.s = saturation;\\n      target.l = lightness;\\n      \
return target;\\n    }\\n    /**\\n     * Returns the RGB values of this \
color and stores them into the given target object.\\n     *\\n     * @param \
{Color} target - The target color that is used to store the method\\'s \
result.\\n     * @param {string} \
[colorSpace=ColorManagement.workingColorSpace] - The color space.\\n     * \
@return {Color} The RGB representation of this color.\\n     */\\n    \
getRGB(target, colorSpace = ColorManagement.workingColorSpace) {\\n      \
ColorManagement.workingToColorSpace(_color.copy(this), colorSpace);\\n      \
target.r = _color.r;\\n      target.g = _color.g;\\n      target.b = \
_color.b;\\n      return target;\\n    }\\n    /**\\n     * Returns the value \
of this color as a CSS style string. Example: `rgb(255,0,0)`.\\n     *\\n     \
* @param {string} [colorSpace=SRGBColorSpace] - The color space.\\n     * \
@return {string} The CSS representation of this color.\\n     */\\n    \
getStyle(colorSpace = SRGBColorSpace) {\\n      \
ColorManagement.workingToColorSpace(_color.copy(this), colorSpace);\\n      \
const r = _color.r, g = _color.g, b = _color.b;\\n      if (colorSpace !== \
SRGBColorSpace) {\\n        return `color(${colorSpace} ${r.toFixed(3)} \
${g.toFixed(3)} ${b.toFixed(3)})`;\\n      }\\n      return \
`rgb(${Math.round(r * 255)},${Math.round(g * 255)},${Math.round(b * \
255)})`;\\n    }\\n    /**\\n     * Adds the given HSL values to this \
color\\'s values.\\n     * Internally, this converts the color\\'s RGB values \
to HSL, adds HSL\\n     * and then converts the color back to RGB.\\n     \
*\\n     * @param {number} h - Hue value between `0.0` and `1.0`.\\n     * \
@param {number} s - Saturation value between `0.0` and `1.0`.\\n     * @param \
{number} l - Lightness value between `0.0` and `1.0`.\\n     * @return \
{Color} A reference to this color.\\n     */\\n    offsetHSL(h, s, l) {\\n    \
  this.getHSL(_hslA);\\n      return this.setHSL(_hslA.h + h, _hslA.s + s, \
_hslA.l + l);\\n    }\\n    /**\\n     * Adds the RGB values of the given \
color to the RGB values of this color.\\n     *\\n     * @param {Color} color \
- The color to add.\\n     * @return {Color} A reference to this color.\\n    \
 */\\n    add(color) {\\n      this.r += color.r;\\n      this.g += \
color.g;\\n      this.b += color.b;\\n      return this;\\n    }\\n    /**\\n \
    * Adds the RGB values of the given colors and stores the result in this \
instance.\\n     *\\n     * @param {Color} color1 - The first color.\\n     * \
@param {Color} color2 - The second color.\\n     * @return {Color} A \
reference to this color.\\n     */\\n    addColors(color1, color2) {\\n      \
this.r = color1.r + color2.r;\\n      this.g = color1.g + color2.g;\\n      \
this.b = color1.b + color2.b;\\n      return this;\\n    }\\n    /**\\n     * \
Adds the given scalar value to the RGB values of this color.\\n     *\\n     \
* @param {number} s - The scalar to add.\\n     * @return {Color} A reference \
to this color.\\n     */\\n    addScalar(s) {\\n      this.r += s;\\n      \
this.g += s;\\n      this.b += s;\\n      return this;\\n    }\\n    /**\\n   \
  * Subtracts the RGB values of the given color from the RGB values of this \
color.\\n     *\\n     * @param {Color} color - The color to subtract.\\n     \
* @return {Color} A reference to this color.\\n     */\\n    sub(color) {\\n  \
    this.r = Math.max(0, this.r - color.r);\\n      this.g = Math.max(0, \
this.g - color.g);\\n      this.b = Math.max(0, this.b - color.b);\\n      \
return this;\\n    }\\n    /**\\n     * Multiplies the RGB values of the \
given color with the RGB values of this color.\\n     *\\n     * @param \
{Color} color - The color to multiply.\\n     * @return {Color} A reference \
to this color.\\n     */\\n    multiply(color) {\\n      this.r *= \
color.r;\\n      this.g *= color.g;\\n      this.b *= color.b;\\n      return \
this;\\n    }\\n    /**\\n     * Multiplies the given scalar value with the \
RGB values of this color.\\n     *\\n     * @param {number} s - The scalar to \
multiply.\\n     * @return {Color} A reference to this color.\\n     */\\n    \
multiplyScalar(s) {\\n      this.r *= s;\\n      this.g *= s;\\n      this.b \
*= s;\\n      return this;\\n    }\\n    /**\\n     * Linearly interpolates \
this color\\'s RGB values toward the RGB values of the\\n     * given color. \
The alpha argument can be thought of as the ratio between\\n     * the two \
colors, where `0.0` is this color and `1.0` is the first argument.\\n     \
*\\n     * @param {Color} color - The color to converge on.\\n     * @param \
{number} alpha - The interpolation factor in the closed interval `[0,1]`.\\n  \
   * @return {Color} A reference to this color.\\n     */\\n    lerp(color, \
alpha) {\\n      this.r += (color.r - this.r) * alpha;\\n      this.g += \
(color.g - this.g) * alpha;\\n      this.b += (color.b - this.b) * alpha;\\n  \
    return this;\\n    }\\n    /**\\n     * Linearly interpolates between the \
given colors and stores the result in this instance.\\n     * The alpha \
argument can be thought of as the ratio between the two colors, where \
`0.0`\\n     * is the first and `1.0` is the second color.\\n     *\\n     * \
@param {Color} color1 - The first color.\\n     * @param {Color} color2 - The \
second color.\\n     * @param {number} alpha - The interpolation factor in \
the closed interval `[0,1]`.\\n     * @return {Color} A reference to this \
color.\\n     */\\n    lerpColors(color1, color2, alpha) {\\n      this.r = \
color1.r + (color2.r - color1.r) * alpha;\\n      this.g = color1.g + \
(color2.g - color1.g) * alpha;\\n      this.b = color1.b + (color2.b - \
color1.b) * alpha;\\n      return this;\\n    }\\n    /**\\n     * Linearly \
interpolates this color\\'s HSL values toward the HSL values of the\\n     * \
given color. It differs from {@link Color#lerp} by not interpolating \
straight\\n     * from one color to the other, but instead going through all \
the hues in between\\n     * those two colors. The alpha argument can be \
thought of as the ratio between\\n     * the two colors, where 0.0 is this \
color and 1.0 is the first argument.\\n     *\\n     * @param {Color} color - \
The color to converge on.\\n     * @param {number} alpha - The interpolation \
factor in the closed interval `[0,1]`.\\n     * @return {Color} A reference \
to this color.\\n     */\\n    lerpHSL(color, alpha) {\\n      \
this.getHSL(_hslA);\\n      color.getHSL(_hslB);\\n      const h = \
lerp(_hslA.h, _hslB.h, alpha);\\n      const s = lerp(_hslA.s, _hslB.s, \
alpha);\\n      const l = lerp(_hslA.l, _hslB.l, alpha);\\n      \
this.setHSL(h, s, l);\\n      return this;\\n    }\\n    /**\\n     * Sets \
the color\\'s RGB components from the given 3D vector.\\n     *\\n     * \
@param {Vector3} v - The vector to set.\\n     * @return {Color} A reference \
to this color.\\n     */\\n    setFromVector3(v) {\\n      this.r = v.x;\\n   \
   this.g = v.y;\\n      this.b = v.z;\\n      return this;\\n    }\\n    \
/**\\n     * Transforms this color with the given 3x3 matrix.\\n     *\\n     \
* @param {Matrix3} m - The matrix.\\n     * @return {Color} A reference to \
this color.\\n     */\\n    applyMatrix3(m) {\\n      const r = this.r, g = \
this.g, b = this.b;\\n      const e = m.elements;\\n      this.r = e[0] * r + \
e[3] * g + e[6] * b;\\n      this.g = e[1] * r + e[4] * g + e[7] * b;\\n      \
this.b = e[2] * r + e[5] * g + e[8] * b;\\n      return this;\\n    }\\n    \
/**\\n     * Returns `true` if this color is equal with the given one.\\n     \
*\\n     * @param {Color} c - The color to test for equality.\\n     * \
@return {boolean} Whether this bounding color is equal with the given one.\\n \
    */\\n    equals(c) {\\n      return c.r === this.r && c.g === this.g && \
c.b === this.b;\\n    }\\n    /**\\n     * Sets this color\\'s RGB components \
from the given array.\\n     *\\n     * @param {Array<number>} array - An \
array holding the RGB values.\\n     * @param {number} [offset=0] - The \
offset into the array.\\n     * @return {Color} A reference to this color.\\n \
    */\\n    fromArray(array, offset = 0) {\\n      this.r = \
array[offset];\\n      this.g = array[offset + 1];\\n      this.b = \
array[offset + 2];\\n      return this;\\n    }\\n    /**\\n     * Writes the \
RGB components of this color to the given array. If no array is provided,\\n  \
   * the method returns a new instance.\\n     *\\n     * @param \
{Array<number>} [array=[]] - The target array holding the color \
components.\\n     * @param {number} [offset=0] - Index of the first element \
in the array.\\n     * @return {Array<number>} The color components.\\n     \
*/\\n    toArray(array = [], offset = 0) {\\n      array[offset] = this.r;\\n \
     array[offset + 1] = this.g;\\n      array[offset + 2] = this.b;\\n      \
return array;\\n    }\\n    /**\\n     * Sets the components of this color \
from the given buffer attribute.\\n     *\\n     * @param {BufferAttribute} \
attribute - The buffer attribute holding color data.\\n     * @param {number} \
index - The index into the attribute.\\n     * @return {Color} A reference to \
this color.\\n     */\\n    fromBufferAttribute(attribute, index) {\\n      \
this.r = attribute.getX(index);\\n      this.g = attribute.getY(index);\\n    \
  this.b = attribute.getZ(index);\\n      return this;\\n    }\\n    /**\\n   \
  * This methods defines the serialization result of this class. Returns the \
color\\n     * as a hexadecimal value.\\n     *\\n     * @return {number} The \
hexadecimal value.\\n     */\\n    toJSON() {\\n      return \
this.getHex();\\n    }\\n    *[Symbol.iterator]() {\\n      yield this.r;\\n  \
    yield this.g;\\n      yield this.b;\\n    }\\n  }\\n  const _color = /* \
@__PURE__ */ new Color();\\n  Color.NAMES = _colorKeywords;\\n  if (typeof \
__THREE_DEVTOOLS__ !== \"undefined\") {\\n    \
__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent(\"register\", { detail: {\\n \
     revision: REVISION\\n    } }));\\n  }\\n  if (typeof window !== \
\"undefined\") {\\n    if (window.__THREE__) {\\n      \
console.warn(\"WARNING: Multiple instances of Three.js being imported.\");\\n \
   } else {\\n      window.__THREE__ = REVISION;\\n    }\\n  }\\n  const \
LN_SCALE_MIN = -12;\\n  const LN_SCALE_MAX = 9;\\n  const LN_SCALE_ZERO = \
-30;\\n  const SCALE_ZERO = Math.exp(LN_SCALE_ZERO);\\n  const \
SPLAT_TEX_WIDTH_BITS = 11;\\n  const SPLAT_TEX_HEIGHT_BITS = 11;\\n  const \
SPLAT_TEX_WIDTH = 1 << SPLAT_TEX_WIDTH_BITS;\\n  const SPLAT_TEX_HEIGHT = 1 \
<< SPLAT_TEX_HEIGHT_BITS;\\n  const SPLAT_TEX_MIN_HEIGHT = 1;\\n  function \
unindentLines(s) {\\n    var _a2;\\n    let seenNonEmpty = false;\\n    const \
lines = s.split(\"\\\\n\").map((line) => {\\n      const trimmedLine = \
line.trimEnd();\\n      if (seenNonEmpty) {\\n        return trimmedLine;\\n  \
    }\\n      if (trimmedLine.length > 0) {\\n        seenNonEmpty = true;\\n \
       return trimmedLine;\\n      }\\n      return null;\\n    \
}).filter((line) => line != null);\\n    while (lines.length > 0 && \
lines[lines.length - 1].length === 0) {\\n      lines.pop();\\n    }\\n    if \
(lines.length === 0) {\\n      return [];\\n    }\\n    const indent = (_a2 = \
lines[0].match(/^\\\\s*/)) == null ? void 0 : _a2[0];\\n    if (!indent) {\\n \
     return lines;\\n    }\\n    const regex = new RegExp(`^${indent}`);\\n   \
 return lines.map((line) => line.replace(regex, \"\"));\\n  }\\n  function \
unindent(s) {\\n    return unindentLines(s).join(\"\\\\n\");\\n  }\\n  const \
f32buffer = new Float32Array(1);\\n  const u32buffer = new \
Uint32Array(f32buffer.buffer);\\n  const supportsFloat16Array = \
\"Float16Array\" in globalThis;\\n  const f16buffer = supportsFloat16Array ? \
new globalThis[\"Float16Array\"](1) : null;\\n  const u16buffer = new \
Uint16Array(f16buffer == null ? void 0 : f16buffer.buffer);\\n  function \
normalize(vec) {\\n    const norm = Math.sqrt(vec.reduce((acc, v) => acc + v \
* v, 0));\\n    return vec.map((v) => v / norm);\\n  }\\n  const toHalf = \
supportsFloat16Array ? toHalfNative : toHalfJS;\\n  const fromHalf = \
supportsFloat16Array ? fromHalfNative : fromHalfJS;\\n  function \
toHalfNative(f) {\\n    f16buffer[0] = f;\\n    return u16buffer[0];\\n  }\\n \
 function toHalfJS(f) {\\n    f32buffer[0] = f;\\n    const bits2 = \
u32buffer[0];\\n    const sign = bits2 >> 31 & 1;\\n    const exp = bits2 >> \
23 & 255;\\n    const frac = bits2 & 8388607;\\n    const halfSign = sign << \
15;\\n    if (exp === 255) {\\n      if (frac !== 0) {\\n        return \
halfSign | 32767;\\n      }\\n      return halfSign | 31744;\\n    }\\n    \
const newExp = exp - 127 + 15;\\n    if (newExp >= 31) {\\n      return \
halfSign | 31744;\\n    }\\n    if (newExp <= 0) {\\n      if (newExp < -10) \
{\\n        return halfSign;\\n      }\\n      const subFrac = (frac | \
8388608) >> 1 - newExp + 13;\\n      return halfSign | subFrac;\\n    }\\n    \
const halfFrac = frac >> 13;\\n    return halfSign | newExp << 10 | \
halfFrac;\\n  }\\n  function fromHalfNative(u) {\\n    u16buffer[0] = u;\\n   \
 return f16buffer[0];\\n  }\\n  function fromHalfJS(h) {\\n    const sign = h \
>> 15 & 1;\\n    const exp = h >> 10 & 31;\\n    const frac = h & 1023;\\n    \
let f32bits;\\n    if (exp === 0) {\\n      if (frac === 0) {\\n        \
f32bits = sign << 31;\\n      } else {\\n        let mant = frac;\\n        \
let e = -14;\\n        while ((mant & 1024) === 0) {\\n          mant <<= \
1;\\n          e--;\\n        }\\n        mant &= 1023;\\n        const \
newExp = e + 127;\\n        const newFrac = mant << 13;\\n        f32bits = \
sign << 31 | newExp << 23 | newFrac;\\n      }\\n    } else if (exp === 31) \
{\\n      if (frac === 0) {\\n        f32bits = sign << 31 | 2139095040;\\n   \
   } else {\\n        f32bits = sign << 31 | 2143289344;\\n      }\\n    } \
else {\\n      const newExp = exp - 15 + 127;\\n      const newFrac = frac << \
13;\\n      f32bits = sign << 31 | newExp << 23 | newFrac;\\n    }\\n    \
u32buffer[0] = f32bits;\\n    return f32buffer[0];\\n  }\\n  function \
floatToUint8(v) {\\n    return Math.max(0, Math.min(255, Math.round(v * \
255)));\\n  }\\n  function getArrayBuffers(ctx) {\\n    const buffers = \
[];\\n    const seen = /* @__PURE__ */ new Set();\\n    function \
traverse(obj) {\\n      if (obj && typeof obj === \"object\" && \
!seen.has(obj)) {\\n        seen.add(obj);\\n        if (obj instanceof \
ArrayBuffer) {\\n          buffers.push(obj);\\n        } else if \
(ArrayBuffer.isView(obj)) {\\n          buffers.push(obj.buffer);\\n        } \
else if (Array.isArray(obj)) {\\n          obj.forEach(traverse);\\n        } \
else {\\n          Object.values(obj).forEach(traverse);\\n        }\\n      \
}\\n    }\\n    traverse(ctx);\\n    return buffers;\\n  }\\n  function \
setPackedSplat(packedSplats, index, x2, y, z, scaleX, scaleY, scaleZ, quatX, \
quatY, quatZ, quatW, opacity, r, g, b, encoding) {\\n    const rgbMin = \
(encoding == null ? void 0 : encoding.rgbMin) ?? 0;\\n    const rgbMax = \
(encoding == null ? void 0 : encoding.rgbMax) ?? 1;\\n    const rgbRange = \
rgbMax - rgbMin;\\n    const uR = floatToUint8((r - rgbMin) / rgbRange);\\n   \
 const uG = floatToUint8((g - rgbMin) / rgbRange);\\n    const uB = \
floatToUint8((b - rgbMin) / rgbRange);\\n    const uA = \
floatToUint8(opacity);\\n    const uQuat = encodeQuatOctXy88R8(\\n      \
tempQuaternion.set(quatX, quatY, quatZ, quatW)\\n    );\\n    const uQuatX = \
uQuat & 255;\\n    const uQuatY = uQuat >>> 8 & 255;\\n    const uQuatZ = \
uQuat >>> 16 & 255;\\n    const lnScaleMin = (encoding == null ? void 0 : \
encoding.lnScaleMin) ?? LN_SCALE_MIN;\\n    const lnScaleMax = (encoding == \
null ? void 0 : encoding.lnScaleMax) ?? LN_SCALE_MAX;\\n    const \
lnScaleScale = 254 / (lnScaleMax - lnScaleMin);\\n    const uScaleX = scaleX \
< SCALE_ZERO ? 0 : Math.min(\\n      255,\\n      Math.max(\\n        1,\\n   \
     Math.round((Math.log(scaleX) - lnScaleMin) * lnScaleScale) + 1\\n      \
)\\n    );\\n    const uScaleY = scaleY < SCALE_ZERO ? 0 : Math.min(\\n      \
255,\\n      Math.max(\\n        1,\\n        Math.round((Math.log(scaleY) - \
lnScaleMin) * lnScaleScale) + 1\\n      )\\n    );\\n    const uScaleZ = \
scaleZ < SCALE_ZERO ? 0 : Math.min(\\n      255,\\n      Math.max(\\n        \
1,\\n        Math.round((Math.log(scaleZ) - lnScaleMin) * lnScaleScale) + \
1\\n      )\\n    );\\n    const uCenterX = toHalf(x2);\\n    const uCenterY \
= toHalf(y);\\n    const uCenterZ = toHalf(z);\\n    const i4 = index * 4;\\n \
   packedSplats[i4] = uR | uG << 8 | uB << 16 | uA << 24;\\n    \
packedSplats[i4 + 1] = uCenterX | uCenterY << 16;\\n    packedSplats[i4 + 2] \
= uCenterZ | uQuatX << 16 | uQuatY << 24;\\n    packedSplats[i4 + 3] = \
uScaleX | uScaleY << 8 | uScaleZ << 16 | uQuatZ << 24;\\n  }\\n  function \
setPackedSplatCenter(packedSplats, index, x2, y, z) {\\n    const uCenterX = \
toHalf(x2);\\n    const uCenterY = toHalf(y);\\n    const uCenterZ = \
toHalf(z);\\n    const i4 = index * 4;\\n    packedSplats[i4 + 1] = uCenterX \
| uCenterY << 16;\\n    packedSplats[i4 + 2] = uCenterZ | packedSplats[i4 + \
2] & 4294901760;\\n  }\\n  function setPackedSplatScales(packedSplats, index, \
scaleX, scaleY, scaleZ, encoding) {\\n    const lnScaleMin = (encoding == \
null ? void 0 : encoding.lnScaleMin) ?? LN_SCALE_MIN;\\n    const lnScaleMax \
= (encoding == null ? void 0 : encoding.lnScaleMax) ?? LN_SCALE_MAX;\\n    \
const lnScaleScale = 254 / (lnScaleMax - lnScaleMin);\\n    const uScaleX = \
scaleX < SCALE_ZERO ? 0 : Math.min(\\n      255,\\n      Math.max(\\n        \
1,\\n        Math.round((Math.log(scaleX) - lnScaleMin) * lnScaleScale) + \
1\\n      )\\n    );\\n    const uScaleY = scaleY < SCALE_ZERO ? 0 : \
Math.min(\\n      255,\\n      Math.max(\\n        1,\\n        \
Math.round((Math.log(scaleY) - lnScaleMin) * lnScaleScale) + 1\\n      )\\n   \
 );\\n    const uScaleZ = scaleZ < SCALE_ZERO ? 0 : Math.min(\\n      255,\\n \
     Math.max(\\n        1,\\n        Math.round((Math.log(scaleZ) - \
lnScaleMin) * lnScaleScale) + 1\\n      )\\n    );\\n    const i4 = index * \
4;\\n    packedSplats[i4 + 3] = uScaleX | uScaleY << 8 | uScaleZ << 16 | \
packedSplats[i4 + 3] & 4278190080;\\n  }\\n  const tempQuaternion = new \
Quaternion();\\n  function setPackedSplatQuat(packedSplats, index, quatX, \
quatY, quatZ, quatW) {\\n    const uQuat = encodeQuatOctXy88R8(\\n      \
tempQuaternion.set(quatX, quatY, quatZ, quatW)\\n    );\\n    const uQuatX = \
uQuat & 255;\\n    const uQuatY = uQuat >>> 8 & 255;\\n    const uQuatZ = \
uQuat >>> 16 & 255;\\n    const i4 = index * 4;\\n    packedSplats[i4 + 2] = \
packedSplats[i4 + 2] & 65535 | uQuatX << 16 | uQuatY << 24;\\n    \
packedSplats[i4 + 3] = packedSplats[i4 + 3] & 16777215 | uQuatZ << 24;\\n  \
}\\n  function setPackedSplatRgba(packedSplats, index, r, g, b, a, encoding) \
{\\n    const rgbMin = (encoding == null ? void 0 : encoding.rgbMin) ?? 0;\\n \
   const rgbMax = (encoding == null ? void 0 : encoding.rgbMax) ?? 1;\\n    \
const rgbRange = rgbMax - rgbMin;\\n    const uR = floatToUint8((r - rgbMin) \
/ rgbRange);\\n    const uG = floatToUint8((g - rgbMin) / rgbRange);\\n    \
const uB = floatToUint8((b - rgbMin) / rgbRange);\\n    const uA = \
floatToUint8(a);\\n    const i4 = index * 4;\\n    packedSplats[i4] = uR | uG \
<< 8 | uB << 16 | uA << 24;\\n  }\\n  function \
setPackedSplatRgb(packedSplats, index, r, g, b, encoding) {\\n    const \
rgbMin = (encoding == null ? void 0 : encoding.rgbMin) ?? 0;\\n    const \
rgbMax = (encoding == null ? void 0 : encoding.rgbMax) ?? 1;\\n    const \
rgbRange = rgbMax - rgbMin;\\n    const uR = floatToUint8((r - rgbMin) / \
rgbRange);\\n    const uG = floatToUint8((g - rgbMin) / rgbRange);\\n    \
const uB = floatToUint8((b - rgbMin) / rgbRange);\\n    const i4 = index * \
4;\\n    packedSplats[i4] = uR | uG << 8 | uB << 16 | packedSplats[i4] & \
4278190080;\\n  }\\n  function setPackedSplatOpacity(packedSplats, index, \
opacity) {\\n    const uA = floatToUint8(opacity);\\n    const i4 = index * \
4;\\n    packedSplats[i4] = packedSplats[i4] & 16777215 | uA << 24;\\n  }\\n  \
new Vector3();\\n  new Vector3();\\n  new Color();\\n  function \
getTextureSize(numSplats) {\\n    const width = SPLAT_TEX_WIDTH;\\n    const \
height = Math.max(\\n      SPLAT_TEX_MIN_HEIGHT,\\n      \
Math.min(SPLAT_TEX_HEIGHT, Math.ceil(numSplats / width))\\n    );\\n    const \
depth = Math.ceil(numSplats / (width * height));\\n    const maxSplats = \
width * height * depth;\\n    return { width, height, depth, maxSplats };\\n  \
}\\n  function computeMaxSplats(numSplats) {\\n    const width = \
SPLAT_TEX_WIDTH;\\n    const height = Math.max(\\n      \
SPLAT_TEX_MIN_HEIGHT,\\n      Math.min(SPLAT_TEX_HEIGHT, Math.ceil(numSplats \
/ width))\\n    );\\n    const depth = Math.ceil(numSplats / (width * \
height));\\n    return width * height * depth;\\n  }\\n  unindent(`\\n  \
precision highp float;\\n\\n  in vec3 position;\\n\\n  void main() {\\n    \
gl_Position = vec4(position.xy, 0.0, 1.0);\\n  }\\n`);\\n  const \
tempNormalizedQuaternion = new Quaternion();\\n  const tempAxis = new \
Vector3();\\n  function encodeQuatOctXy88R8(q) {\\n    const qnorm = \
tempNormalizedQuaternion.copy(q).normalize();\\n    if (qnorm.w < 0) {\\n     \
 qnorm.set(-qnorm.x, -qnorm.y, -qnorm.z, -qnorm.w);\\n    }\\n    const theta \
= 2 * Math.acos(qnorm.w);\\n    const xyz_norm = Math.sqrt(\\n      qnorm.x * \
qnorm.x + qnorm.y * qnorm.y + qnorm.z * qnorm.z\\n    );\\n    const axis = \
xyz_norm < 1e-6 ? tempAxis.set(1, 0, 0) : tempAxis.set(qnorm.x, qnorm.y, \
qnorm.z).divideScalar(xyz_norm);\\n    const sum = Math.abs(axis.x) + \
Math.abs(axis.y) + Math.abs(axis.z);\\n    let p_x = axis.x / sum;\\n    let \
p_y = axis.y / sum;\\n    if (axis.z < 0) {\\n      const tmp = p_x;\\n      \
p_x = (1 - Math.abs(p_y)) * (p_x >= 0 ? 1 : -1);\\n      p_y = (1 - \
Math.abs(tmp)) * (p_y >= 0 ? 1 : -1);\\n    }\\n    const u_f = p_x * 0.5 + \
0.5;\\n    const v_f = p_y * 0.5 + 0.5;\\n    const quantU = Math.round(u_f * \
255);\\n    const quantV = Math.round(v_f * 255);\\n    const angleInt = \
Math.round(theta * (255 / Math.PI));\\n    return angleInt << 16 | quantV << \
8 | quantU;\\n  }\\n  function packSint8Bytes(b0, b1, b22, b3) {\\n    const \
clampedB0 = Math.max(-127, Math.min(127, b0 * 127));\\n    const clampedB1 = \
Math.max(-127, Math.min(127, b1 * 127));\\n    const clampedB2 = \
Math.max(-127, Math.min(127, b22 * 127));\\n    const clampedB3 = \
Math.max(-127, Math.min(127, b3 * 127));\\n    return clampedB0 & 255 | \
(clampedB1 & 255) << 8 | (clampedB2 & 255) << 16 | (clampedB3 & 255) << \
24;\\n  }\\n  function encodeSh1Rgb(sh1Array, index, sh1Rgb, encoding) {\\n   \
 const sh1Min = (encoding == null ? void 0 : encoding.sh1Min) ?? -1;\\n    \
const sh1Max = (encoding == null ? void 0 : encoding.sh1Max) ?? 1;\\n    \
const sh1Mid = 0.5 * (sh1Min + sh1Max);\\n    const sh1Scale = 126 / (sh1Max \
- sh1Min);\\n    const base = index * 2;\\n    for (let i2 = 0; i2 < 9; ++i2) \
{\\n      const s = (sh1Rgb[i2] - sh1Mid) * sh1Scale;\\n      const value = \
Math.round(Math.max(-63, Math.min(63, s))) & 127;\\n      const bitStart = i2 \
* 7;\\n      const bitEnd = bitStart + 7;\\n      const wordStart = \
Math.floor(bitStart / 32);\\n      const bitOffset = bitStart - wordStart * \
32;\\n      const firstWord = value << bitOffset & 4294967295;\\n      \
sh1Array[base + wordStart] |= firstWord;\\n      if (bitEnd > wordStart * 32 \
+ 32) {\\n        const secondWord = value >>> 32 - bitOffset & \
4294967295;\\n        sh1Array[base + wordStart + 1] |= secondWord;\\n      \
}\\n    }\\n  }\\n  function encodeSh2Rgb(sh2Array, index, sh2Rgb, encoding) \
{\\n    const sh2Min = (encoding == null ? void 0 : encoding.sh2Min) ?? \
-1;\\n    const sh2Max = (encoding == null ? void 0 : encoding.sh2Max) ?? \
1;\\n    const sh2Mid = 0.5 * (sh2Min + sh2Max);\\n    const sh2Scale = 2 / \
(sh2Max - sh2Min);\\n    sh2Array[index * 4 + 0] = packSint8Bytes(\\n      \
(sh2Rgb[0] - sh2Mid) * sh2Scale,\\n      (sh2Rgb[1] - sh2Mid) * sh2Scale,\\n  \
    (sh2Rgb[2] - sh2Mid) * sh2Scale,\\n      (sh2Rgb[3] - sh2Mid) * \
sh2Scale\\n    );\\n    sh2Array[index * 4 + 1] = packSint8Bytes(\\n      \
(sh2Rgb[4] - sh2Mid) * sh2Scale,\\n      (sh2Rgb[5] - sh2Mid) * sh2Scale,\\n  \
    (sh2Rgb[6] - sh2Mid) * sh2Scale,\\n      (sh2Rgb[7] - sh2Mid) * \
sh2Scale\\n    );\\n    sh2Array[index * 4 + 2] = packSint8Bytes(\\n      \
(sh2Rgb[8] - sh2Mid) * sh2Scale,\\n      (sh2Rgb[9] - sh2Mid) * sh2Scale,\\n  \
    (sh2Rgb[10] - sh2Mid) * sh2Scale,\\n      (sh2Rgb[11] - sh2Mid) * \
sh2Scale\\n    );\\n    sh2Array[index * 4 + 3] = packSint8Bytes(\\n      \
(sh2Rgb[12] - sh2Mid) * sh2Scale,\\n      (sh2Rgb[13] - sh2Mid) * \
sh2Scale,\\n      (sh2Rgb[14] - sh2Mid) * sh2Scale,\\n      0\\n    );\\n  \
}\\n  function encodeSh3Rgb(sh3Array, index, sh3Rgb, encoding) {\\n    const \
sh3Min = (encoding == null ? void 0 : encoding.sh3Min) ?? -1;\\n    const \
sh3Max = (encoding == null ? void 0 : encoding.sh3Max) ?? 1;\\n    const \
sh3Mid = 0.5 * (sh3Min + sh3Max);\\n    const sh3Scale = 62 / (sh3Max - \
sh3Min);\\n    const base = index * 4;\\n    for (let i2 = 0; i2 < 21; ++i2) \
{\\n      const s = (sh3Rgb[i2] - sh3Mid) * sh3Scale;\\n      const value = \
Math.round(Math.max(-31, Math.min(31, s))) & 63;\\n      const bitStart = i2 \
* 6;\\n      const bitEnd = bitStart + 6;\\n      const wordStart = \
Math.floor(bitStart / 32);\\n      const bitOffset = bitStart - wordStart * \
32;\\n      const firstWord = value << bitOffset & 4294967295;\\n      \
sh3Array[base + wordStart] |= firstWord;\\n      if (bitEnd > wordStart * 32 \
+ 32) {\\n        const secondWord = value >>> 32 - bitOffset & \
4294967295;\\n        sh3Array[base + wordStart + 1] |= secondWord;\\n      \
}\\n    }\\n  }\\n  function decompressPartialGzip(fileBytes, numBytes) {\\n  \
  const chunks = [];\\n    let totalBytes = 0;\\n    let result = null;\\n    \
const gunzip = new Gunzip((data, final) => {\\n      chunks.push(data);\\n    \
  totalBytes += data.length;\\n      if (final || totalBytes >= numBytes) \
{\\n        const allBytes = new Uint8Array(totalBytes);\\n        let \
offset2 = 0;\\n        for (const chunk of chunks) {\\n          \
allBytes.set(chunk, offset2);\\n          offset2 += chunk.length;\\n        \
}\\n        result = allBytes.slice(0, numBytes);\\n      }\\n    });\\n    \
const CHUNK_SIZE = 1024;\\n    let offset = 0;\\n    while (result == null && \
offset < fileBytes.length) {\\n      const chunk = fileBytes.slice(offset, \
offset + CHUNK_SIZE);\\n      gunzip.push(chunk, false);\\n      offset += \
CHUNK_SIZE;\\n    }\\n    if (result == null) {\\n      gunzip.push(new \
Uint8Array(), true);\\n      if (result == null) {\\n        throw new \
Error(\"Failed to decompress partial gzip\");\\n      }\\n    }\\n    return \
result;\\n  }\\n  class GunzipReader {\\n    constructor({\\n      \
fileBytes,\\n      chunkBytes = 64 * 1024\\n    }) {\\n      this.fileBytes = \
fileBytes;\\n      this.chunkBytes = chunkBytes;\\n      this.chunks = [];\\n \
     this.totalBytes = 0;\\n      const ds = new \
DecompressionStream(\"gzip\");\\n      const decompressionStream = new \
Blob([fileBytes]).stream().pipeThrough(ds);\\n      this.reader = \
decompressionStream.getReader();\\n    }\\n    async read(numBytes) {\\n      \
while (this.totalBytes < numBytes) {\\n        const { value: chunk, done: \
readerDone } = await this.reader.read();\\n        if (readerDone) {\\n       \
   break;\\n        }\\n        this.chunks.push(chunk);\\n        \
this.totalBytes += chunk.length;\\n      }\\n      if (this.totalBytes < \
numBytes) {\\n        throw new Error(\\n          `Unexpected EOF: needed \
${numBytes}, got ${this.totalBytes}`\\n        );\\n      }\\n      const \
allBytes = new Uint8Array(this.totalBytes);\\n      let outOffset = 0;\\n     \
 for (const chunk of this.chunks) {\\n        allBytes.set(chunk, \
outOffset);\\n        outOffset += chunk.length;\\n      }\\n      const \
result = allBytes.subarray(0, numBytes);\\n      this.chunks = \
[allBytes.subarray(numBytes)];\\n      this.totalBytes -= numBytes;\\n      \
return result;\\n    }\\n  }\\n  function decodeAntiSplat(fileBytes, \
initNumSplats, splatCallback) {\\n    const numSplats = \
Math.floor(fileBytes.length / 32);\\n    if (numSplats * 32 !== \
fileBytes.length) {\\n      throw new Error(\"Invalid .splat file size\");\\n \
   }\\n    initNumSplats(numSplats);\\n    const f32 = new \
Float32Array(fileBytes.buffer);\\n    for (let i2 = 0; i2 < numSplats; ++i2) \
{\\n      const i322 = i2 * 32;\\n      const i8 = i2 * 8;\\n      const x2 = \
f32[i8 + 0];\\n      const y = f32[i8 + 1];\\n      const z = f32[i8 + 2];\\n \
     const scaleX = f32[i8 + 3];\\n      const scaleY = f32[i8 + 4];\\n      \
const scaleZ = f32[i8 + 5];\\n      const r = fileBytes[i322 + 24] / 255;\\n  \
    const g = fileBytes[i322 + 25] / 255;\\n      const b = fileBytes[i322 + \
26] / 255;\\n      const opacity = fileBytes[i322 + 27] / 255;\\n      const \
quatW = (fileBytes[i322 + 28] - 128) / 128;\\n      const quatX = \
(fileBytes[i322 + 29] - 128) / 128;\\n      const quatY = (fileBytes[i322 + \
30] - 128) / 128;\\n      const quatZ = (fileBytes[i322 + 31] - 128) / \
128;\\n      splatCallback(\\n        i2,\\n        x2,\\n        y,\\n       \
 z,\\n        scaleX,\\n        scaleY,\\n        scaleZ,\\n        quatX,\\n \
       quatY,\\n        quatZ,\\n        quatW,\\n        opacity,\\n        \
r,\\n        g,\\n        b\\n      );\\n    }\\n  }\\n  function \
unpackAntiSplat(fileBytes, splatEncoding) {\\n    let numSplats = 0;\\n    \
let maxSplats = 0;\\n    let packedArray = new Uint32Array(0);\\n    \
decodeAntiSplat(\\n      fileBytes,\\n      (cbNumSplats) => {\\n        \
numSplats = cbNumSplats;\\n        maxSplats = \
computeMaxSplats(numSplats);\\n        packedArray = new \
Uint32Array(maxSplats * 4);\\n      },\\n      (index, x2, y, z, scaleX, \
scaleY, scaleZ, quatX, quatY, quatZ, quatW, opacity, r, g, b) => {\\n        \
setPackedSplat(\\n          packedArray,\\n          index,\\n          \
x2,\\n          y,\\n          z,\\n          scaleX,\\n          scaleY,\\n  \
        scaleZ,\\n          quatX,\\n          quatY,\\n          quatZ,\\n   \
       quatW,\\n          opacity,\\n          r,\\n          g,\\n          \
b,\\n          splatEncoding\\n        );\\n      }\\n    );\\n    return { \
packedArray, numSplats };\\n  }\\n  const KSPLAT_COMPRESSION = {\\n    0: \
{\\n      bytesPerCenter: 12,\\n      bytesPerScale: 12,\\n      \
bytesPerRotation: 16,\\n      bytesPerColor: 4,\\n      \
bytesPerSphericalHarmonicsComponent: 4,\\n      scaleOffsetBytes: 12,\\n      \
rotationOffsetBytes: 24,\\n      colorOffsetBytes: 40,\\n      \
sphericalHarmonicsOffsetBytes: 44,\\n      scaleRange: 1\\n    },\\n    1: \
{\\n      bytesPerCenter: 6,\\n      bytesPerScale: 6,\\n      \
bytesPerRotation: 8,\\n      bytesPerColor: 4,\\n      \
bytesPerSphericalHarmonicsComponent: 2,\\n      scaleOffsetBytes: 6,\\n      \
rotationOffsetBytes: 12,\\n      colorOffsetBytes: 20,\\n      \
sphericalHarmonicsOffsetBytes: 24,\\n      scaleRange: 32767\\n    },\\n    \
2: {\\n      bytesPerCenter: 6,\\n      bytesPerScale: 6,\\n      \
bytesPerRotation: 8,\\n      bytesPerColor: 4,\\n      \
bytesPerSphericalHarmonicsComponent: 1,\\n      scaleOffsetBytes: 6,\\n      \
rotationOffsetBytes: 12,\\n      colorOffsetBytes: 20,\\n      \
sphericalHarmonicsOffsetBytes: 24,\\n      scaleRange: 32767\\n    }\\n  \
};\\n  const KSPLAT_SH_DEGREE_TO_COMPONENTS = {\\n    0: 0,\\n    1: 9,\\n    \
2: 24,\\n    3: 45\\n  };\\n  function decodeKsplat(fileBytes, initNumSplats, \
splatCallback, shCallback) {\\n    var _a2;\\n    const HEADER_BYTES = \
4096;\\n    const SECTION_BYTES = 1024;\\n    let headerOffset = 0;\\n    \
const header = new DataView(fileBytes.buffer, headerOffset, HEADER_BYTES);\\n \
   headerOffset += HEADER_BYTES;\\n    const versionMajor = \
header.getUint8(0);\\n    const versionMinor = header.getUint8(1);\\n    if \
(versionMajor !== 0 || versionMinor < 1) {\\n      throw new Error(\\n        \
`Unsupported .ksplat version: ${versionMajor}.${versionMinor}`\\n      );\\n  \
  }\\n    const maxSectionCount = header.getUint32(4, true);\\n    \
header.getUint32(16, true);\\n    const compressionLevel = \
header.getUint16(20, true);\\n    if (compressionLevel < 0 || \
compressionLevel > 2) {\\n      throw new Error(`Invalid .ksplat compression \
level: ${compressionLevel}`);\\n    }\\n    const minSphericalHarmonicsCoeff \
= header.getFloat32(36, true) || -1.5;\\n    const maxSphericalHarmonicsCoeff \
= header.getFloat32(40, true) || 1.5;\\n    let sectionBase = HEADER_BYTES + \
maxSectionCount * SECTION_BYTES;\\n    for (let section = 0; section < \
maxSectionCount; ++section) {\\n      let getSh = function(splatOffset, \
component) {\\n        if (compressionLevel === 0) {\\n          return \
data.getFloat32(\\n            splatOffset + sphericalHarmonicsOffsetBytes + \
component * 4,\\n            true\\n          );\\n        }\\n        if \
(compressionLevel === 1) {\\n          return fromHalf(\\n            \
data.getUint16(\\n              splatOffset + sphericalHarmonicsOffsetBytes + \
component * 2,\\n              true\\n            )\\n          );\\n        \
}\\n        const t = data.getUint8(splatOffset + \
sphericalHarmonicsOffsetBytes + component) / 255;\\n        return \
minSphericalHarmonicsCoeff + t * (maxSphericalHarmonicsCoeff - \
minSphericalHarmonicsCoeff);\\n      };\\n      const section2 = new \
DataView(fileBytes.buffer, headerOffset, SECTION_BYTES);\\n      headerOffset \
+= SECTION_BYTES;\\n      const sectionSplatCount = section2.getUint32(0, \
true);\\n      const sectionMaxSplatCount = section2.getUint32(4, true);\\n   \
   const bucketSize = section2.getUint32(8, true);\\n      const bucketCount \
= section2.getUint32(12, true);\\n      const bucketBlockSize = \
section2.getFloat32(16, true);\\n      const bucketStorageSizeBytes = \
section2.getUint16(20, true);\\n      const compressionScaleRange = \
(section2.getUint32(24, true) || ((_a2 = \
KSPLAT_COMPRESSION[compressionLevel]) == null ? void 0 : _a2.scaleRange)) ?? \
1;\\n      const fullBucketCount = section2.getUint32(32, true);\\n      \
const fullBucketSplats = fullBucketCount * bucketSize;\\n      const \
partiallyFilledBucketCount = section2.getUint32(36, true);\\n      const \
bucketsMetaDataSizeBytes = partiallyFilledBucketCount * 4;\\n      const \
bucketsStorageSizeBytes = bucketStorageSizeBytes * bucketCount + \
bucketsMetaDataSizeBytes;\\n      const sphericalHarmonicsDegree = \
section2.getUint16(40, true);\\n      const shComponents = \
KSPLAT_SH_DEGREE_TO_COMPONENTS[sphericalHarmonicsDegree];\\n      const {\\n  \
      bytesPerCenter,\\n        bytesPerScale,\\n        bytesPerRotation,\\n \
       bytesPerColor,\\n        bytesPerSphericalHarmonicsComponent,\\n       \
 scaleOffsetBytes,\\n        rotationOffsetBytes,\\n        \
colorOffsetBytes,\\n        sphericalHarmonicsOffsetBytes\\n      } = \
KSPLAT_COMPRESSION[compressionLevel];\\n      const bytesPerSplat = \
bytesPerCenter + bytesPerScale + bytesPerRotation + bytesPerColor + \
shComponents * bytesPerSphericalHarmonicsComponent;\\n      const \
splatDataStorageSizeBytes = bytesPerSplat * sectionMaxSplatCount;\\n      \
const storageSizeBytes = splatDataStorageSizeBytes + \
bucketsStorageSizeBytes;\\n      const sh1Index = [0, 3, 6, 1, 4, 7, 2, 5, \
8];\\n      const sh2Index = [\\n        9,\\n        14,\\n        19,\\n    \
    10,\\n        15,\\n        20,\\n        11,\\n        16,\\n        \
21,\\n        12,\\n        17,\\n        22,\\n        13,\\n        18,\\n  \
      23\\n      ];\\n      const sh3Index = [\\n        24,\\n        31,\\n \
       38,\\n        25,\\n        32,\\n        39,\\n        26,\\n        \
33,\\n        40,\\n        27,\\n        34,\\n        41,\\n        28,\\n  \
      35,\\n        42,\\n        29,\\n        36,\\n        43,\\n        \
30,\\n        37,\\n        44\\n      ];\\n      const sh1 = \
sphericalHarmonicsDegree >= 1 ? new Float32Array(3 * 3) : void 0;\\n      \
const sh2 = sphericalHarmonicsDegree >= 2 ? new Float32Array(5 * 3) : void \
0;\\n      const sh3 = sphericalHarmonicsDegree >= 3 ? new Float32Array(7 * \
3) : void 0;\\n      const compressionScaleFactor = bucketBlockSize / 2 / \
compressionScaleRange;\\n      const bucketsBase = sectionBase + \
bucketsMetaDataSizeBytes;\\n      const dataBase = sectionBase + \
bucketsStorageSizeBytes;\\n      const data = new DataView(\\n        \
fileBytes.buffer,\\n        dataBase,\\n        splatDataStorageSizeBytes\\n  \
    );\\n      const bucketArray = new Float32Array(\\n        \
fileBytes.buffer,\\n        bucketsBase,\\n        bucketCount * 3\\n      \
);\\n      const partiallyFilledBucketLengths = new Uint32Array(\\n        \
fileBytes.buffer,\\n        sectionBase,\\n        \
partiallyFilledBucketCount\\n      );\\n      let partialBucketIndex = \
fullBucketCount;\\n      let partialBucketBase = fullBucketSplats;\\n      \
for (let i2 = 0; i2 < sectionSplatCount; ++i2) {\\n        const splatOffset \
= i2 * bytesPerSplat;\\n        let bucketIndex;\\n        if (i2 < \
fullBucketSplats) {\\n          bucketIndex = Math.floor(i2 / bucketSize);\\n \
       } else {\\n          const bucketLength = \
partiallyFilledBucketLengths[partialBucketIndex - fullBucketCount];\\n        \
  if (i2 >= partialBucketBase + bucketLength) {\\n            \
partialBucketIndex += 1;\\n            partialBucketBase += bucketLength;\\n  \
        }\\n          bucketIndex = partialBucketIndex;\\n        }\\n        \
const x2 = compressionLevel === 0 ? data.getFloat32(splatOffset + 0, true) : \
(data.getUint16(splatOffset + 0, true) - compressionScaleRange) * \
compressionScaleFactor + bucketArray[3 * bucketIndex + 0];\\n        const y \
= compressionLevel === 0 ? data.getFloat32(splatOffset + 4, true) : \
(data.getUint16(splatOffset + 2, true) - compressionScaleRange) * \
compressionScaleFactor + bucketArray[3 * bucketIndex + 1];\\n        const z \
= compressionLevel === 0 ? data.getFloat32(splatOffset + 8, true) : \
(data.getUint16(splatOffset + 4, true) - compressionScaleRange) * \
compressionScaleFactor + bucketArray[3 * bucketIndex + 2];\\n        const \
scaleX = compressionLevel === 0 ? data.getFloat32(splatOffset + \
scaleOffsetBytes + 0, true) : fromHalf(data.getUint16(splatOffset + \
scaleOffsetBytes + 0, true));\\n        const scaleY = compressionLevel === 0 \
? data.getFloat32(splatOffset + scaleOffsetBytes + 4, true) : \
fromHalf(data.getUint16(splatOffset + scaleOffsetBytes + 2, true));\\n        \
const scaleZ = compressionLevel === 0 ? data.getFloat32(splatOffset + \
scaleOffsetBytes + 8, true) : fromHalf(data.getUint16(splatOffset + \
scaleOffsetBytes + 4, true));\\n        const quatW = compressionLevel === 0 \
? data.getFloat32(splatOffset + rotationOffsetBytes + 0, true) : fromHalf(\\n \
         data.getUint16(splatOffset + rotationOffsetBytes + 0, true)\\n       \
 );\\n        const quatX = compressionLevel === 0 ? \
data.getFloat32(splatOffset + rotationOffsetBytes + 4, true) : fromHalf(\\n   \
       data.getUint16(splatOffset + rotationOffsetBytes + 2, true)\\n        \
);\\n        const quatY = compressionLevel === 0 ? \
data.getFloat32(splatOffset + rotationOffsetBytes + 8, true) : fromHalf(\\n   \
       data.getUint16(splatOffset + rotationOffsetBytes + 4, true)\\n        \
);\\n        const quatZ = compressionLevel === 0 ? \
data.getFloat32(splatOffset + rotationOffsetBytes + 12, true) : fromHalf(\\n  \
        data.getUint16(splatOffset + rotationOffsetBytes + 6, true)\\n        \
);\\n        const r = data.getUint8(splatOffset + colorOffsetBytes + 0) / \
255;\\n        const g = data.getUint8(splatOffset + colorOffsetBytes + 1) / \
255;\\n        const b = data.getUint8(splatOffset + colorOffsetBytes + 2) / \
255;\\n        const opacity = data.getUint8(splatOffset + colorOffsetBytes + \
3) / 255;\\n        splatCallback(\\n          i2,\\n          x2,\\n         \
 y,\\n          z,\\n          scaleX,\\n          scaleY,\\n          \
scaleZ,\\n          quatX,\\n          quatY,\\n          quatZ,\\n          \
quatW,\\n          opacity,\\n          r,\\n          g,\\n          b\\n    \
    );\\n        if (sphericalHarmonicsDegree >= 1 && sh1) {\\n          for \
(const [i22, key] of sh1Index.entries()) {\\n            sh1[i22] = \
getSh(splatOffset, key);\\n          }\\n          if (sh2) {\\n            \
for (const [i22, key] of sh2Index.entries()) {\\n              sh2[i22] = \
getSh(splatOffset, key);\\n            }\\n          }\\n          if (sh3) \
{\\n            for (const [i22, key] of sh3Index.entries()) {\\n             \
 sh3[i22] = getSh(splatOffset, key);\\n            }\\n          }\\n         \
 shCallback == null ? void 0 : shCallback(i2, sh1, sh2, sh3);\\n        }\\n  \
    }\\n      sectionBase += storageSizeBytes;\\n    }\\n  }\\n  function \
unpackKsplat(fileBytes, splatEncoding) {\\n    var _a2;\\n    const \
HEADER_BYTES = 4096;\\n    const SECTION_BYTES = 1024;\\n    let headerOffset \
= 0;\\n    const header = new DataView(fileBytes.buffer, headerOffset, \
HEADER_BYTES);\\n    headerOffset += HEADER_BYTES;\\n    const versionMajor = \
header.getUint8(0);\\n    const versionMinor = header.getUint8(1);\\n    if \
(versionMajor !== 0 || versionMinor < 1) {\\n      throw new Error(\\n        \
`Unsupported .ksplat version: ${versionMajor}.${versionMinor}`\\n      );\\n  \
  }\\n    const maxSectionCount = header.getUint32(4, true);\\n    const \
splatCount = header.getUint32(16, true);\\n    const compressionLevel = \
header.getUint16(20, true);\\n    if (compressionLevel < 0 || \
compressionLevel > 2) {\\n      throw new Error(`Invalid .ksplat compression \
level: ${compressionLevel}`);\\n    }\\n    const minSphericalHarmonicsCoeff \
= header.getFloat32(36, true) || -1.5;\\n    const maxSphericalHarmonicsCoeff \
= header.getFloat32(40, true) || 1.5;\\n    const numSplats = splatCount;\\n  \
  const maxSplats = computeMaxSplats(numSplats);\\n    const packedArray = \
new Uint32Array(maxSplats * 4);\\n    const extra = {};\\n    let sectionBase \
= HEADER_BYTES + maxSectionCount * SECTION_BYTES;\\n    for (let section = 0; \
section < maxSectionCount; ++section) {\\n      let getSh = \
function(splatOffset, component) {\\n        if (compressionLevel === 0) {\\n \
         return data.getFloat32(\\n            splatOffset + \
sphericalHarmonicsOffsetBytes + component * 4,\\n            true\\n          \
);\\n        }\\n        if (compressionLevel === 1) {\\n          return \
fromHalf(\\n            data.getUint16(\\n              splatOffset + \
sphericalHarmonicsOffsetBytes + component * 2,\\n              true\\n        \
    )\\n          );\\n        }\\n        const t = \
data.getUint8(splatOffset + sphericalHarmonicsOffsetBytes + component) / \
255;\\n        return minSphericalHarmonicsCoeff + t * \
(maxSphericalHarmonicsCoeff - minSphericalHarmonicsCoeff);\\n      };\\n      \
const section2 = new DataView(fileBytes.buffer, headerOffset, \
SECTION_BYTES);\\n      headerOffset += SECTION_BYTES;\\n      const \
sectionSplatCount = section2.getUint32(0, true);\\n      const \
sectionMaxSplatCount = section2.getUint32(4, true);\\n      const bucketSize \
= section2.getUint32(8, true);\\n      const bucketCount = \
section2.getUint32(12, true);\\n      const bucketBlockSize = \
section2.getFloat32(16, true);\\n      const bucketStorageSizeBytes = \
section2.getUint16(20, true);\\n      const compressionScaleRange = \
(section2.getUint32(24, true) || ((_a2 = \
KSPLAT_COMPRESSION[compressionLevel]) == null ? void 0 : _a2.scaleRange)) ?? \
1;\\n      const fullBucketCount = section2.getUint32(32, true);\\n      \
const fullBucketSplats = fullBucketCount * bucketSize;\\n      const \
partiallyFilledBucketCount = section2.getUint32(36, true);\\n      const \
bucketsMetaDataSizeBytes = partiallyFilledBucketCount * 4;\\n      const \
bucketsStorageSizeBytes = bucketStorageSizeBytes * bucketCount + \
bucketsMetaDataSizeBytes;\\n      const sphericalHarmonicsDegree = \
section2.getUint16(40, true);\\n      const shComponents = \
KSPLAT_SH_DEGREE_TO_COMPONENTS[sphericalHarmonicsDegree];\\n      const {\\n  \
      bytesPerCenter,\\n        bytesPerScale,\\n        bytesPerRotation,\\n \
       bytesPerColor,\\n        bytesPerSphericalHarmonicsComponent,\\n       \
 scaleOffsetBytes,\\n        rotationOffsetBytes,\\n        \
colorOffsetBytes,\\n        sphericalHarmonicsOffsetBytes\\n      } = \
KSPLAT_COMPRESSION[compressionLevel];\\n      const bytesPerSplat = \
bytesPerCenter + bytesPerScale + bytesPerRotation + bytesPerColor + \
shComponents * bytesPerSphericalHarmonicsComponent;\\n      const \
splatDataStorageSizeBytes = bytesPerSplat * sectionMaxSplatCount;\\n      \
const storageSizeBytes = splatDataStorageSizeBytes + \
bucketsStorageSizeBytes;\\n      const sh1Index = [0, 3, 6, 1, 4, 7, 2, 5, \
8];\\n      const sh2Index = [\\n        9,\\n        14,\\n        19,\\n    \
    10,\\n        15,\\n        20,\\n        11,\\n        16,\\n        \
21,\\n        12,\\n        17,\\n        22,\\n        13,\\n        18,\\n  \
      23\\n      ];\\n      const sh3Index = [\\n        24,\\n        31,\\n \
       38,\\n        25,\\n        32,\\n        39,\\n        26,\\n        \
33,\\n        40,\\n        27,\\n        34,\\n        41,\\n        28,\\n  \
      35,\\n        42,\\n        29,\\n        36,\\n        43,\\n        \
30,\\n        37,\\n        44\\n      ];\\n      const sh1 = \
sphericalHarmonicsDegree >= 1 ? new Float32Array(3 * 3) : void 0;\\n      \
const sh2 = sphericalHarmonicsDegree >= 2 ? new Float32Array(5 * 3) : void \
0;\\n      const sh3 = sphericalHarmonicsDegree >= 3 ? new Float32Array(7 * \
3) : void 0;\\n      const compressionScaleFactor = bucketBlockSize / 2 / \
compressionScaleRange;\\n      const bucketsBase = sectionBase + \
bucketsMetaDataSizeBytes;\\n      const dataBase = sectionBase + \
bucketsStorageSizeBytes;\\n      const data = new DataView(\\n        \
fileBytes.buffer,\\n        dataBase,\\n        splatDataStorageSizeBytes\\n  \
    );\\n      const bucketArray = new Float32Array(\\n        \
fileBytes.buffer,\\n        bucketsBase,\\n        bucketCount * 3\\n      \
);\\n      const partiallyFilledBucketLengths = new Uint32Array(\\n        \
fileBytes.buffer,\\n        sectionBase,\\n        \
partiallyFilledBucketCount\\n      );\\n      let partialBucketIndex = \
fullBucketCount;\\n      let partialBucketBase = fullBucketSplats;\\n      \
for (let i2 = 0; i2 < sectionSplatCount; ++i2) {\\n        const splatOffset \
= i2 * bytesPerSplat;\\n        let bucketIndex;\\n        if (i2 < \
fullBucketSplats) {\\n          bucketIndex = Math.floor(i2 / bucketSize);\\n \
       } else {\\n          const bucketLength = \
partiallyFilledBucketLengths[partialBucketIndex - fullBucketCount];\\n        \
  if (i2 >= partialBucketBase + bucketLength) {\\n            \
partialBucketIndex += 1;\\n            partialBucketBase += bucketLength;\\n  \
        }\\n          bucketIndex = partialBucketIndex;\\n        }\\n        \
const x2 = compressionLevel === 0 ? data.getFloat32(splatOffset + 0, true) : \
(data.getUint16(splatOffset + 0, true) - compressionScaleRange) * \
compressionScaleFactor + bucketArray[3 * bucketIndex + 0];\\n        const y \
= compressionLevel === 0 ? data.getFloat32(splatOffset + 4, true) : \
(data.getUint16(splatOffset + 2, true) - compressionScaleRange) * \
compressionScaleFactor + bucketArray[3 * bucketIndex + 1];\\n        const z \
= compressionLevel === 0 ? data.getFloat32(splatOffset + 8, true) : \
(data.getUint16(splatOffset + 4, true) - compressionScaleRange) * \
compressionScaleFactor + bucketArray[3 * bucketIndex + 2];\\n        const \
scaleX = compressionLevel === 0 ? data.getFloat32(splatOffset + \
scaleOffsetBytes + 0, true) : fromHalf(data.getUint16(splatOffset + \
scaleOffsetBytes + 0, true));\\n        const scaleY = compressionLevel === 0 \
? data.getFloat32(splatOffset + scaleOffsetBytes + 4, true) : \
fromHalf(data.getUint16(splatOffset + scaleOffsetBytes + 2, true));\\n        \
const scaleZ = compressionLevel === 0 ? data.getFloat32(splatOffset + \
scaleOffsetBytes + 8, true) : fromHalf(data.getUint16(splatOffset + \
scaleOffsetBytes + 4, true));\\n        const quatW = compressionLevel === 0 \
? data.getFloat32(splatOffset + rotationOffsetBytes + 0, true) : fromHalf(\\n \
         data.getUint16(splatOffset + rotationOffsetBytes + 0, true)\\n       \
 );\\n        const quatX = compressionLevel === 0 ? \
data.getFloat32(splatOffset + rotationOffsetBytes + 4, true) : fromHalf(\\n   \
       data.getUint16(splatOffset + rotationOffsetBytes + 2, true)\\n        \
);\\n        const quatY = compressionLevel === 0 ? \
data.getFloat32(splatOffset + rotationOffsetBytes + 8, true) : fromHalf(\\n   \
       data.getUint16(splatOffset + rotationOffsetBytes + 4, true)\\n        \
);\\n        const quatZ = compressionLevel === 0 ? \
data.getFloat32(splatOffset + rotationOffsetBytes + 12, true) : fromHalf(\\n  \
        data.getUint16(splatOffset + rotationOffsetBytes + 6, true)\\n        \
);\\n        const r = data.getUint8(splatOffset + colorOffsetBytes + 0) / \
255;\\n        const g = data.getUint8(splatOffset + colorOffsetBytes + 1) / \
255;\\n        const b = data.getUint8(splatOffset + colorOffsetBytes + 2) / \
255;\\n        const opacity = data.getUint8(splatOffset + colorOffsetBytes + \
3) / 255;\\n        setPackedSplat(\\n          packedArray,\\n          \
i2,\\n          x2,\\n          y,\\n          z,\\n          scaleX,\\n      \
    scaleY,\\n          scaleZ,\\n          quatX,\\n          quatY,\\n      \
    quatZ,\\n          quatW,\\n          opacity,\\n          r,\\n          \
g,\\n          b,\\n          splatEncoding\\n        );\\n        if \
(sphericalHarmonicsDegree >= 1) {\\n          if (sh1) {\\n            if \
(!extra.sh1) {\\n              extra.sh1 = new Uint32Array(numSplats * 2);\\n \
           }\\n            for (const [i22, key] of sh1Index.entries()) {\\n  \
            sh1[i22] = getSh(splatOffset, key);\\n            }\\n            \
encodeSh1Rgb(extra.sh1, i2, sh1, splatEncoding);\\n          }\\n          if \
(sh2) {\\n            if (!extra.sh2) {\\n              extra.sh2 = new \
Uint32Array(numSplats * 4);\\n            }\\n            for (const [i22, \
key] of sh2Index.entries()) {\\n              sh2[i22] = getSh(splatOffset, \
key);\\n            }\\n            encodeSh2Rgb(extra.sh2, i2, sh2, \
splatEncoding);\\n          }\\n          if (sh3) {\\n            if \
(!extra.sh3) {\\n              extra.sh3 = new Uint32Array(numSplats * 4);\\n \
           }\\n            for (const [i22, key] of sh3Index.entries()) {\\n  \
            sh3[i22] = getSh(splatOffset, key);\\n            }\\n            \
encodeSh3Rgb(extra.sh3, i2, sh3, splatEncoding);\\n          }\\n        }\\n \
     }\\n      sectionBase += storageSizeBytes;\\n    }\\n    return { \
packedArray, numSplats, extra };\\n  }\\n  const PLY_PROPERTY_TYPES = [\\n    \
\"char\",\\n    \"uchar\",\\n    \"short\",\\n    \"ushort\",\\n    \
\"int\",\\n    \"uint\",\\n    \"float\",\\n    \"double\"\\n  ];\\n  const \
_PlyReader = class _PlyReader {\\n    // Create a PlyReader from a \
Uint8Array/ArrayBuffer, no parsing done yet\\n    constructor({ fileBytes }) \
{\\n      this.header = \"\";\\n      this.littleEndian = true;\\n      \
this.elements = {};\\n      this.comments = [];\\n      this.data = null;\\n  \
    this.numSplats = 0;\\n      this.fileBytes = fileBytes instanceof \
ArrayBuffer ? new Uint8Array(fileBytes) : fileBytes;\\n    }\\n    // \
Identify and parse the PLY text header (assumed to be <64KB in size).\\n    \
// this.elements will contain all the elements in the file, typically\\n    \
// \"vertex\" contains the Gsplat data.\\n    async parseHeader() {\\n      \
const bufferStream = new ReadableStream({\\n        start: (controller) => \
{\\n          controller.enqueue(this.fileBytes.slice(0, 65536));\\n          \
controller.close();\\n        }\\n      });\\n      const decoder = \
bufferStream.pipeThrough(new TextDecoderStream()).getReader();\\n      \
this.header = \"\";\\n      const headerTerminator = \"end_header\\\\n\";\\n  \
    while (true) {\\n        const { value, done } = await decoder.read();\\n \
       if (done) {\\n          throw new Error(\"Failed to read header\");\\n \
       }\\n        this.header += value;\\n        const endHeader = \
this.header.indexOf(headerTerminator);\\n        if (endHeader >= 0) {\\n     \
     this.header = this.header.slice(0, endHeader + \
headerTerminator.length);\\n          break;\\n        }\\n      }\\n      \
const headerLen = new TextEncoder().encode(this.header).length;\\n      \
this.data = new DataView(this.fileBytes.buffer, headerLen);\\n      \
this.elements = {};\\n      let curElement = null;\\n      this.comments = \
[];\\n      this.header.trim().split(\"\\\\n\").forEach((line, lineIndex) => \
{\\n        const trimmedLine = line.trim();\\n        if (lineIndex === 0) \
{\\n          if (trimmedLine !== \"ply\") {\\n            throw new \
Error(\"Invalid PLY header\");\\n          }\\n          return;\\n        \
}\\n        if (trimmedLine.length === 0) {\\n          return;\\n        \
}\\n        const fields = trimmedLine.split(\" \");\\n        switch \
(fields[0]) {\\n          case \"format\":\\n            if (fields[1] === \
\"binary_little_endian\") {\\n              this.littleEndian = true;\\n      \
      } else if (fields[1] === \"binary_big_endian\") {\\n              \
this.littleEndian = false;\\n            } else {\\n              throw new \
Error(`Unsupported PLY format: ${fields[1]}`);\\n            }\\n            \
if (fields[2] !== \"1.0\") {\\n              throw new Error(`Unsupported PLY \
version: ${fields[2]}`);\\n            }\\n            break;\\n          \
case \"end_header\":\\n            break;\\n          case \"comment\":\\n    \
        this.comments.push(trimmedLine.slice(\"comment \".length));\\n        \
    break;\\n          case \"element\": {\\n            const name = \
fields[1];\\n            curElement = {\\n              name,\\n              \
count: Number.parseInt(fields[2]),\\n              properties: {}\\n          \
  };\\n            this.elements[name] = curElement;\\n            break;\\n  \
        }\\n          case \"property\":\\n            if (curElement == \
null) {\\n              throw new Error(\"Property must be inside an \
element\");\\n            }\\n            if (fields[1] === \"list\") {\\n    \
          curElement.properties[fields[4]] = {\\n                isList: \
true,\\n                type: fields[3],\\n                countType: \
fields[2]\\n              };\\n            } else {\\n              \
curElement.properties[fields[2]] = {\\n                isList: false,\\n      \
          type: fields[1]\\n              };\\n            }\\n            \
break;\\n        }\\n      });\\n      if (this.elements.vertex) {\\n        \
this.numSplats = this.elements.vertex.count;\\n      }\\n    }\\n    \
parseData(elementCallback) {\\n      let offset = 0;\\n      const data = \
this.data;\\n      if (data == null) {\\n        throw new Error(\"No data to \
parse\");\\n      }\\n      for (const elementName in this.elements) {\\n     \
   const element = this.elements[elementName];\\n        const { count, \
properties } = element;\\n        const item = \
createEmptyItem(properties);\\n        const parseFn = \
createParseFn(properties, this.littleEndian);\\n        const callback = \
elementCallback(element) ?? (() => {\\n        });\\n        for (let index = \
0; index < count; index++) {\\n          offset = parseFn(data, offset, \
item);\\n          callback(index, item);\\n        }\\n      }\\n    }\\n    \
// Parse all the Gsplat data in the PLY file in go, invoking the given\\n    \
// callbacks for each Gsplat.\\n    parseSplats(splatCallback, shCallback) \
{\\n      if (this.elements.vertex == null) {\\n        throw new Error(\"No \
vertex element found\");\\n      }\\n      let isSuperSplat = false;\\n      \
const ssChunks = [];\\n      let numSh = 0;\\n      let sh1Props = [];\\n     \
 let sh2Props = [];\\n      let sh3Props = [];\\n      let sh1 = void 0;\\n   \
   let sh2 = void 0;\\n      let sh3 = void 0;\\n      function prepareSh() \
{\\n        const num_f_rest = NUM_SH_TO_NUM_F_REST[numSh];\\n        \
sh1Props = new Array(3).fill(null).flatMap((_, k) => [0, 1, 2].map((_2, d) => \
k + d * num_f_rest / 3));\\n        sh2Props = new \
Array(5).fill(null).flatMap(\\n          (_, k) => [0, 1, 2].map((_2, d) => 3 \
+ k + d * num_f_rest / 3)\\n        );\\n        sh3Props = new \
Array(7).fill(null).flatMap(\\n          (_, k) => [0, 1, 2].map((_2, d) => 8 \
+ k + d * num_f_rest / 3)\\n        );\\n        sh1 = numSh >= 1 ? new \
Float32Array(3 * 3) : void 0;\\n        sh2 = numSh >= 2 ? new Float32Array(5 \
* 3) : void 0;\\n        sh3 = numSh >= 3 ? new Float32Array(7 * 3) : void \
0;\\n      }\\n      function ssShCallback(index, item) {\\n        if (!sh1) \
{\\n          throw new Error(\"Missing sh1\");\\n        }\\n        const \
sh = item.f_rest;\\n        for (let i2 = 0; i2 < sh1Props.length; i2++) {\\n \
         sh1[i2] = sh[sh1Props[i2]] * 8 / 255 - 4;\\n        }\\n        if \
(sh2) {\\n          for (let i2 = 0; i2 < sh2Props.length; i2++) {\\n         \
   sh2[i2] = sh[sh2Props[i2]] * 8 / 255 - 4;\\n          }\\n        }\\n     \
   if (sh3) {\\n          for (let i2 = 0; i2 < sh3Props.length; i2++) {\\n   \
         sh3[i2] = sh[sh3Props[i2]] * 8 / 255 - 4;\\n          }\\n        \
}\\n        shCallback == null ? void 0 : shCallback(index, sh1, sh2, \
sh3);\\n      }\\n      function initSuperSplat(element) {\\n        const \
{\\n          min_x,\\n          min_y,\\n          min_z,\\n          \
max_x,\\n          max_y,\\n          max_z,\\n          min_scale_x,\\n      \
    min_scale_y,\\n          min_scale_z,\\n          max_scale_x,\\n         \
 max_scale_y,\\n          max_scale_z\\n        } = element.properties;\\n    \
    if (!min_x || !min_y || !min_z || !max_x || !max_y || !max_z || \
!min_scale_x || !min_scale_y || !min_scale_z || !max_scale_x || !max_scale_y \
|| !max_scale_z) {\\n          throw new Error(\"Missing PLY chunk \
properties\");\\n        }\\n        isSuperSplat = true;\\n        return \
(index, item) => {\\n          const {\\n            min_x: min_x2,\\n        \
    min_y: min_y2,\\n            min_z: min_z2,\\n            max_x: \
max_x2,\\n            max_y: max_y2,\\n            max_z: max_z2,\\n          \
  min_scale_x: min_scale_x2,\\n            min_scale_y: min_scale_y2,\\n      \
      min_scale_z: min_scale_z2,\\n            max_scale_x: max_scale_x2,\\n  \
          max_scale_y: max_scale_y2,\\n            max_scale_z: \
max_scale_z2,\\n            min_r,\\n            min_g,\\n            \
min_b,\\n            max_r,\\n            max_g,\\n            max_b\\n       \
   } = item;\\n          ssChunks.push({\\n            min_x: min_x2,\\n      \
      min_y: min_y2,\\n            min_z: min_z2,\\n            max_x: \
max_x2,\\n            max_y: max_y2,\\n            max_z: max_z2,\\n          \
  min_scale_x: min_scale_x2,\\n            min_scale_y: min_scale_y2,\\n      \
      min_scale_z: min_scale_z2,\\n            max_scale_x: max_scale_x2,\\n  \
          max_scale_y: max_scale_y2,\\n            max_scale_z: \
max_scale_z2,\\n            min_r,\\n            min_g,\\n            \
min_b,\\n            max_r,\\n            max_g,\\n            max_b\\n       \
   });\\n        };\\n      }\\n      function decodeSuperSplat(element) {\\n \
       if (shCallback && element.name === \"sh\") {\\n          numSh = \
getNumSh(element.properties);\\n          prepareSh();\\n          return \
ssShCallback;\\n        }\\n        if (element.name !== \"vertex\") {\\n     \
     return null;\\n        }\\n        const { packed_position, \
packed_rotation, packed_scale, packed_color } = element.properties;\\n        \
if (!packed_position || !packed_rotation || !packed_scale || !packed_color) \
{\\n          throw new Error(\\n            \"Missing PLY properties: \
packed_position, packed_rotation, packed_scale, packed_color\"\\n          \
);\\n        }\\n        const SQRT2 = Math.sqrt(2);\\n        return (index, \
item) => {\\n          const chunk = ssChunks[index >>> 8];\\n          if \
(chunk == null) {\\n            throw new Error(\"Missing PLY chunk\");\\n    \
      }\\n          const {\\n            min_x,\\n            min_y,\\n      \
      min_z,\\n            max_x,\\n            max_y,\\n            \
max_z,\\n            min_scale_x,\\n            min_scale_y,\\n            \
min_scale_z,\\n            max_scale_x,\\n            max_scale_y,\\n         \
   max_scale_z,\\n            min_r,\\n            min_g,\\n            \
min_b,\\n            max_r,\\n            max_g,\\n            max_b\\n       \
   } = chunk;\\n          const { packed_position: packed_position2, \
packed_rotation: packed_rotation2, packed_scale: packed_scale2, packed_color: \
packed_color2 } = item;\\n          const x2 = (packed_position2 >>> 21 & \
2047) / 2047 * (max_x - min_x) + min_x;\\n          const y = \
(packed_position2 >>> 11 & 1023) / 1023 * (max_y - min_y) + min_y;\\n         \
 const z = (packed_position2 & 2047) / 2047 * (max_z - min_z) + min_z;\\n     \
     const r0 = ((packed_rotation2 >>> 20 & 1023) / 1023 - 0.5) * SQRT2;\\n   \
       const r1 = ((packed_rotation2 >>> 10 & 1023) / 1023 - 0.5) * SQRT2;\\n \
         const r2 = ((packed_rotation2 & 1023) / 1023 - 0.5) * SQRT2;\\n      \
    const rr = Math.sqrt(Math.max(0, 1 - r0 * r0 - r1 * r1 - r2 * r2));\\n    \
      const rOrder = packed_rotation2 >>> 30;\\n          const quatX = \
rOrder === 0 ? r0 : rOrder === 1 ? rr : r1;\\n          const quatY = rOrder \
<= 1 ? r1 : rOrder === 2 ? rr : r2;\\n          const quatZ = rOrder <= 2 ? \
r2 : rr;\\n          const quatW = rOrder === 0 ? rr : r0;\\n          const \
scaleX = Math.exp(\\n            (packed_scale2 >>> 21 & 2047) / 2047 * \
(max_scale_x - min_scale_x) + min_scale_x\\n          );\\n          const \
scaleY = Math.exp(\\n            (packed_scale2 >>> 11 & 1023) / 1023 * \
(max_scale_y - min_scale_y) + min_scale_y\\n          );\\n          const \
scaleZ = Math.exp(\\n            (packed_scale2 & 2047) / 2047 * (max_scale_z \
- min_scale_z) + min_scale_z\\n          );\\n          const r = \
(packed_color2 >>> 24 & 255) / 255 * ((max_r ?? 1) - (min_r ?? 0)) + (min_r \
?? 0);\\n          const g = (packed_color2 >>> 16 & 255) / 255 * ((max_g ?? \
1) - (min_g ?? 0)) + (min_g ?? 0);\\n          const b = (packed_color2 >>> 8 \
& 255) / 255 * ((max_b ?? 1) - (min_b ?? 0)) + (min_b ?? 0);\\n          \
const opacity = (packed_color2 & 255) / 255;\\n          splatCallback(\\n    \
        index,\\n            x2,\\n            y,\\n            z,\\n         \
   scaleX,\\n            scaleY,\\n            scaleZ,\\n            \
quatX,\\n            quatY,\\n            quatZ,\\n            quatW,\\n      \
      opacity,\\n            r,\\n            g,\\n            b\\n          \
);\\n        };\\n      }\\n      const elementCallback = (element) => {\\n   \
     if (element.name === \"chunk\") {\\n          return \
initSuperSplat(element);\\n        }\\n        if (isSuperSplat) {\\n         \
 return decodeSuperSplat(element);\\n        }\\n        if (element.name !== \
\"vertex\") {\\n          return null;\\n        }\\n        const {\\n       \
   x: x2,\\n          y,\\n          z,\\n          scale_0,\\n          \
scale_1,\\n          scale_2,\\n          rot_0,\\n          rot_1,\\n        \
  rot_2,\\n          rot_3,\\n          opacity,\\n          f_dc_0,\\n       \
   f_dc_1,\\n          f_dc_2,\\n          red,\\n          green,\\n         \
 blue,\\n          alpha\\n        } = element.properties;\\n        if (!x2 \
|| !y || !z) {\\n          throw new Error(\"Missing PLY properties: x, y, \
z\");\\n        }\\n        const hasScales = scale_0 && scale_1 && \
scale_2;\\n        const hasRots = rot_0 && rot_1 && rot_2 && rot_3;\\n       \
 const alphaDiv = alpha != null ? FIELD_SCALE[alpha.type] : 1;\\n        \
const redDiv = red != null ? FIELD_SCALE[red.type] : 1;\\n        const \
greenDiv = green != null ? FIELD_SCALE[green.type] : 1;\\n        const \
blueDiv = blue != null ? FIELD_SCALE[blue.type] : 1;\\n        numSh = \
getNumSh(element.properties);\\n        prepareSh();\\n        return (index, \
item) => {\\n          const scaleX = hasScales ? Math.exp(item.scale_0) : \
_PlyReader.defaultPointScale;\\n          const scaleY = hasScales ? \
Math.exp(item.scale_1) : _PlyReader.defaultPointScale;\\n          const \
scaleZ = hasScales ? Math.exp(item.scale_2) : \
_PlyReader.defaultPointScale;\\n          const quatX = hasRots ? item.rot_1 \
: 0;\\n          const quatY = hasRots ? item.rot_2 : 0;\\n          const \
quatZ = hasRots ? item.rot_3 : 0;\\n          const quatW = hasRots ? \
item.rot_0 : 1;\\n          const op = opacity != null ? 1 / (1 + \
Math.exp(-item.opacity)) : alpha != null ? item.alpha / alphaDiv : 1;\\n      \
    const r = f_dc_0 != null ? item.f_dc_0 * SH_C0$1 + 0.5 : red != null ? \
item.red / redDiv : 1;\\n          const g = f_dc_1 != null ? item.f_dc_1 * \
SH_C0$1 + 0.5 : green != null ? item.green / greenDiv : 1;\\n          const \
b = f_dc_2 != null ? item.f_dc_2 * SH_C0$1 + 0.5 : blue != null ? item.blue / \
blueDiv : 1;\\n          splatCallback(\\n            index,\\n            \
item.x,\\n            item.y,\\n            item.z,\\n            scaleX,\\n  \
          scaleY,\\n            scaleZ,\\n            quatX,\\n            \
quatY,\\n            quatZ,\\n            quatW,\\n            op,\\n         \
   r,\\n            g,\\n            b\\n          );\\n          if \
(shCallback && sh1) {\\n            const sh = item.f_rest;\\n            if \
(sh1) {\\n              for (let i2 = 0; i2 < sh1Props.length; i2++) {\\n     \
           sh1[i2] = sh[sh1Props[i2]];\\n              }\\n            }\\n   \
         if (sh2) {\\n              for (let i2 = 0; i2 < sh2Props.length; \
i2++) {\\n                sh2[i2] = sh[sh2Props[i2]];\\n              }\\n    \
        }\\n            if (sh3) {\\n              for (let i2 = 0; i2 < \
sh3Props.length; i2++) {\\n                sh3[i2] = sh[sh3Props[i2]];\\n     \
         }\\n            }\\n            shCallback(index, sh1, sh2, sh3);\\n \
         }\\n        };\\n      };\\n      \
this.parseData(elementCallback);\\n    }\\n    // Inject RGBA values into \
original PLY file, which can be used to modify\\n    // the color/opacity of \
the Gsplats and write out the modified PLY file.\\n    injectRgba(rgba) {\\n  \
    let offset = 0;\\n      const data = this.data;\\n      if (data == null) \
{\\n        throw new Error(\"No parsed data\");\\n      }\\n      if \
(rgba.length !== this.numSplats * 4) {\\n        throw new Error(\"Invalid \
RGBA array length\");\\n      }\\n      for (const elementName in \
this.elements) {\\n        const element = this.elements[elementName];\\n     \
   const { count, properties } = element;\\n        const parsers = [];\\n    \
    let rgbaOffset = 0;\\n        const isVertex = elementName === \
\"vertex\";\\n        if (isVertex) {\\n          for (const name of \
[\"opacity\", \"f_dc_0\", \"f_dc_1\", \"f_dc_2\"]) {\\n            if \
(!properties[name] || properties[name].type !== \"float\") {\\n              \
throw new Error(`Can\\'t injectRgba due to property: ${name}`);\\n            \
}\\n          }\\n        }\\n        for (const [propertyName, property] of \
Object.entries(properties)) {\\n          if (!property.isList) {\\n          \
  if (isVertex) {\\n              if (propertyName === \"f_dc_0\" || \
propertyName === \"f_dc_1\" || propertyName === \"f_dc_2\") {\\n              \
  const component = Number.parseInt(\\n                  \
propertyName.slice(\"f_dc_\".length)\\n                );\\n                \
parsers.push(() => {\\n                  const value = (rgba[rgbaOffset + \
component] / 255 - 0.5) / SH_C0$1;\\n                  \
SET_FIELD[property.type](\\n                    data,\\n                    \
offset,\\n                    this.littleEndian,\\n                    \
value\\n                  );\\n                });\\n              } else if \
(propertyName === \"opacity\") {\\n                parsers.push(() => {\\n    \
              const value = Math.max(\\n                    -100,\\n          \
          Math.min(\\n                      100,\\n                      \
-Math.log(1 / (rgba[rgbaOffset + 3] / 255) - 1)\\n                    )\\n    \
              );\\n                  SET_FIELD[property.type](\\n             \
       data,\\n                    offset,\\n                    \
this.littleEndian,\\n                    value\\n                  );\\n      \
          });\\n              }\\n            }\\n            parsers.push(() \
=> {\\n              offset += FIELD_BYTES[property.type];\\n            \
});\\n          } else {\\n            parsers.push(() => {\\n              \
const length = PARSE_FIELD[property.countType](\\n                data,\\n    \
            offset,\\n                this.littleEndian\\n              );\\n \
             offset += FIELD_BYTES[property.countType];\\n              \
offset += length * FIELD_BYTES[property.type];\\n            });\\n          \
}\\n        }\\n        for (let index = 0; index < count; index++) {\\n      \
    for (const parser of parsers) {\\n            parser();\\n          }\\n  \
        if (isVertex) {\\n            rgbaOffset += 4;\\n          }\\n       \
 }\\n      }\\n    }\\n  };\\n  _PlyReader.defaultPointScale = 1e-3;\\n  let \
PlyReader = _PlyReader;\\n  const SH_C0$1 = 0.28209479177387814;\\n  const \
PARSE_FIELD = {\\n    char: (data, offset, littleEndian) => {\\n      return \
data.getInt8(offset);\\n    },\\n    uchar: (data, offset, littleEndian) => \
{\\n      return data.getUint8(offset);\\n    },\\n    short: (data, offset, \
littleEndian) => {\\n      return data.getInt16(offset, littleEndian);\\n    \
},\\n    ushort: (data, offset, littleEndian) => {\\n      return \
data.getUint16(offset, littleEndian);\\n    },\\n    int: (data, offset, \
littleEndian) => {\\n      return data.getInt32(offset, littleEndian);\\n    \
},\\n    uint: (data, offset, littleEndian) => {\\n      return \
data.getUint32(offset, littleEndian);\\n    },\\n    float: (data, offset, \
littleEndian) => {\\n      return data.getFloat32(offset, littleEndian);\\n   \
 },\\n    double: (data, offset, littleEndian) => {\\n      return \
data.getFloat64(offset, littleEndian);\\n    }\\n  };\\n  const SET_FIELD = \
{\\n    char: (data, offset, littleEndian, value) => {\\n      \
data.setInt8(offset, value);\\n    },\\n    uchar: (data, offset, \
littleEndian, value) => {\\n      data.setUint8(offset, value);\\n    },\\n   \
 short: (data, offset, littleEndian, value) => {\\n      \
data.setInt16(offset, value, littleEndian);\\n    },\\n    ushort: (data, \
offset, littleEndian, value) => {\\n      data.setUint16(offset, value, \
littleEndian);\\n    },\\n    int: (data, offset, littleEndian, value) => \
{\\n      data.setInt32(offset, value, littleEndian);\\n    },\\n    uint: \
(data, offset, littleEndian, value) => {\\n      data.setUint32(offset, \
value, littleEndian);\\n    },\\n    float: (data, offset, littleEndian, \
value) => {\\n      data.setFloat32(offset, value, littleEndian);\\n    },\\n \
   double: (data, offset, littleEndian, value) => {\\n      \
data.setFloat64(offset, value, littleEndian);\\n    }\\n  };\\n  const \
FIELD_BYTES = {\\n    char: 1,\\n    uchar: 1,\\n    short: 2,\\n    ushort: \
2,\\n    int: 4,\\n    uint: 4,\\n    float: 4,\\n    double: 8\\n  };\\n  \
const FIELD_SCALE = {\\n    char: 127,\\n    uchar: 255,\\n    short: \
32767,\\n    ushort: 65535,\\n    int: 2147483647,\\n    uint: 4294967295,\\n \
   float: 1,\\n    double: 1\\n  };\\n  const NUM_F_REST_TO_NUM_SH = {\\n    \
0: 0,\\n    9: 1,\\n    24: 2,\\n    45: 3\\n  };\\n  const \
NUM_SH_TO_NUM_F_REST = {\\n    0: 0,\\n    1: 9,\\n    2: 24,\\n    3: 45\\n  \
};\\n  const F_REST_REGEX = /^f_rest_([0-9]{1,2})$/;\\n  function \
createEmptyItem(properties) {\\n    const item = {};\\n    for (const \
[propertyName, property] of Object.entries(properties)) {\\n      if \
(F_REST_REGEX.test(propertyName)) {\\n        item.f_rest = new \
Array(getNumSh(properties));\\n      } else {\\n        item[propertyName] = \
property.isList ? [] : 0;\\n      }\\n    }\\n    return item;\\n  }\\n  \
function createParseFn(properties, littleEndian) {\\n    if \
(safeToCompile(properties)) {\\n      return \
createCompiledParserFn(properties, littleEndian);\\n    }\\n    return \
createDynamicParserFn(properties, littleEndian);\\n  }\\n  const \
UNSAFE_EVAL_ALLOWED = (() => {\\n    try {\\n      new Function(\"return \
42;\");\\n    } catch (e) {\\n      return false;\\n    }\\n    return \
true;\\n  })();\\n  const PROPERTY_NAME_REGEX = /^[a-zA-Z0-9_]+$/;\\n  \
function safeToCompile(properties) {\\n    if (!UNSAFE_EVAL_ALLOWED) {\\n     \
 return false;\\n    }\\n    for (const [propertyName, property] of \
Object.entries(properties)) {\\n      if \
(!PROPERTY_NAME_REGEX.test(propertyName)) {\\n        return false;\\n      \
}\\n      if (property.isList && \
!PLY_PROPERTY_TYPES.includes(property.countType)) {\\n        return \
false;\\n      }\\n      if (!PLY_PROPERTY_TYPES.includes(property.type)) \
{\\n        return false;\\n      }\\n    }\\n    return true;\\n  }\\n  \
function createCompiledParserFn(properties, littleEndian) {\\n    const \
parserSrc = [\"let list;\"];\\n    for (const [propertyName, property] of \
Object.entries(properties)) {\\n      const fRestMatch = \
propertyName.match(F_REST_REGEX);\\n      if (fRestMatch) {\\n        const \
fRestIndex = +fRestMatch[1];\\n        parserSrc.push(\\n          /*js*/\\n  \
        `\\n        item.f_rest[${fRestIndex}] = \
PARSE_FIELD[\\'${property.type}\\'](data, offset, ${littleEndian});\\n        \
offset += ${FIELD_BYTES[property.type]};\\n      `\\n        );\\n      } \
else if (!property.isList) {\\n        parserSrc.push(\\n          /*js*/\\n  \
        `\\n        item[\\'${propertyName}\\'] = \
PARSE_FIELD[\\'${property.type}\\'](data, offset, ${littleEndian});\\n        \
offset += ${FIELD_BYTES[property.type]};\\n      `\\n        );\\n      } \
else {\\n        parserSrc.push(\\n          /*js*/\\n          `\\n        \
list = item[\\'${propertyName}\\'];\\n        list.length = \
PARSE_FIELD[\\'${property.countType}\\'](data, offset, ${littleEndian});\\n   \
     offset += ${FIELD_BYTES[property.countType]};\\n        for (let i = 0; \
i < list.length; i++) {\\n          list[i] = \
PARSE_FIELD[\\'${property.type}\\'](data, offset, ${littleEndian});\\n        \
  offset += ${FIELD_BYTES[property.type]};\\n        }\\n      `\\n        \
);\\n      }\\n    }\\n    parserSrc.push(\"return offset;\");\\n    const fn \
= new Function(\\n      \"data\",\\n      \"offset\",\\n      \"item\",\\n    \
  \"PARSE_FIELD\",\\n      parserSrc.join(\"\\\\n\")\\n    );\\n    return \
(data, offset, item) => fn(data, offset, item, PARSE_FIELD);\\n  }\\n  \
function createDynamicParserFn(properties, littleEndian) {\\n    const \
parsers = [];\\n    for (const [propertyName, property] of \
Object.entries(properties)) {\\n      const fRestMatch = \
propertyName.match(F_REST_REGEX);\\n      if (fRestMatch) {\\n        const \
fRestIndex = +fRestMatch[1];\\n        parsers.push(\\n          (data, \
offset, item) => {\\n            item.f_rest[fRestIndex] = \
PARSE_FIELD[property.type](\\n              data,\\n              offset,\\n  \
            littleEndian\\n            );\\n            return offset + \
FIELD_BYTES[property.type];\\n          }\\n        );\\n      } else if \
(!property.isList) {\\n        parsers.push(\\n          (data, offset, item) \
=> {\\n            item[propertyName] = PARSE_FIELD[property.type](\\n        \
      data,\\n              offset,\\n              littleEndian\\n           \
 );\\n            return offset + FIELD_BYTES[property.type];\\n          \
}\\n        );\\n      } else {\\n        parsers.push(\\n          (data, \
offset, item) => {\\n            const list = item[propertyName];\\n          \
  list.length = PARSE_FIELD[property.countType](\\n              data,\\n     \
         offset,\\n              littleEndian\\n            );\\n            \
let currentOffset = offset + FIELD_BYTES[property.countType];\\n            \
for (let i2 = 0; i2 < list.length; i2++) {\\n              list[i2] = \
PARSE_FIELD[property.type](\\n                data,\\n                \
currentOffset,\\n                littleEndian\\n              );\\n           \
   currentOffset += FIELD_BYTES[property.type];\\n            }\\n            \
return currentOffset;\\n          }\\n        );\\n      }\\n    }\\n    \
return (data, offset, item) => {\\n      let currentOffset = offset;\\n      \
for (let parserIndex = 0; parserIndex < parsers.length; parserIndex++) {\\n   \
     currentOffset = parsers[parserIndex](data, currentOffset, item);\\n      \
}\\n      return currentOffset;\\n    };\\n  }\\n  function \
getNumSh(properties) {\\n    let num_f_rest = 0;\\n    while \
(properties[`f_rest_${num_f_rest}`]) {\\n      num_f_rest += 1;\\n    }\\n    \
const numSh = NUM_F_REST_TO_NUM_SH[num_f_rest];\\n    if (numSh == null) {\\n \
     throw new Error(`Unsupported number of SH coefficients: \
${num_f_rest}`);\\n    }\\n    return numSh;\\n  }\\n  var SplatFileType = /* \
@__PURE__ */ ((SplatFileType2) => {\\n    SplatFileType2[\"PLY\"] = \
\"ply\";\\n    SplatFileType2[\"SPZ\"] = \"spz\";\\n    \
SplatFileType2[\"SPLAT\"] = \"splat\";\\n    SplatFileType2[\"KSPLAT\"] = \
\"ksplat\";\\n    SplatFileType2[\"PCSOGS\"] = \"pcsogs\";\\n    \
SplatFileType2[\"PCSOGSZIP\"] = \"pcsogszip\";\\n    return \
SplatFileType2;\\n  })(SplatFileType || {});\\n  function \
getSplatFileType(fileBytes) {\\n    const view = new \
DataView(fileBytes.buffer);\\n    if ((view.getUint32(0, true) & 16777215) \
=== 7957616) {\\n      return \"ply\";\\n    }\\n    if ((view.getUint32(0, \
true) & 16777215) === 559903) {\\n      const header = \
decompressPartialGzip(fileBytes, 4);\\n      const gView = new \
DataView(header.buffer);\\n      if (gView.getUint32(0, true) === 1347635022) \
{\\n        return \"spz\";\\n      }\\n      return void 0;\\n    }\\n    if \
(view.getUint32(0, true) === 67324752) {\\n      if (tryPcSogsZip(fileBytes)) \
{\\n        return \"pcsogszip\";\\n      }\\n      return void 0;\\n    }\\n \
   return void 0;\\n  }\\n  function getFileExtension(pathOrUrl) {\\n    \
const noTrailing = pathOrUrl.split(/[?#]/, 1)[0];\\n    const lastSlash = \
Math.max(\\n      noTrailing.lastIndexOf(\"/\"),\\n      \
noTrailing.lastIndexOf(\"\\\\\\\\\")\\n    );\\n    const filename = \
noTrailing.slice(lastSlash + 1);\\n    const lastDot = \
filename.lastIndexOf(\".\");\\n    if (lastDot <= 0 || lastDot === \
filename.length - 1) {\\n      return \"\";\\n    }\\n    return \
filename.slice(lastDot + 1).toLowerCase();\\n  }\\n  function \
getSplatFileTypeFromPath(pathOrUrl) {\\n    const extension = \
getFileExtension(pathOrUrl);\\n    if (extension === \"ply\") {\\n      \
return \"ply\";\\n    }\\n    if (extension === \"spz\") {\\n      return \
\"spz\";\\n    }\\n    if (extension === \"splat\") {\\n      return \
\"splat\";\\n    }\\n    if (extension === \"ksplat\") {\\n      return \
\"ksplat\";\\n    }\\n    if (extension === \"sog\") {\\n      return \
\"pcsogszip\";\\n    }\\n    return void 0;\\n  }\\n  function \
tryPcSogs(input) {\\n    try {\\n      let text;\\n      if (typeof input === \
\"string\") {\\n        text = input;\\n      } else {\\n        const \
fileBytes = input instanceof ArrayBuffer ? new Uint8Array(input) : input;\\n  \
      if (fileBytes.length > 65536) {\\n          return void 0;\\n        \
}\\n        text = new TextDecoder().decode(fileBytes);\\n      }\\n      \
const json = JSON.parse(text);\\n      if (!json || typeof json !== \
\"object\" || Array.isArray(json)) {\\n        return void 0;\\n      }\\n    \
  const isVersion2 = json.version === 2;\\n      for (const key of \
[\"means\", \"scales\", \"quats\", \"sh0\"]) {\\n        if (!json[key] || \
typeof json[key] !== \"object\" || Array.isArray(json[key])) {\\n          \
return void 0;\\n        }\\n        if (isVersion2) {\\n          if \
(!json[key].files) {\\n            return void 0;\\n          }\\n          \
if ((key === \"scales\" || key === \"sh0\") && !json[key].codebook) {\\n      \
      return void 0;\\n          }\\n          if (key === \"means\" && \
(!json[key].mins || !json[key].maxs)) {\\n            return void 0;\\n       \
   }\\n        } else {\\n          if (!json[key].shape || !json[key].files) \
{\\n            return void 0;\\n          }\\n          if (key !== \
\"quats\" && (!json[key].mins || !json[key].maxs)) {\\n            return \
void 0;\\n          }\\n        }\\n      }\\n      return json;\\n    } \
catch {\\n      return void 0;\\n    }\\n  }\\n  function tryPcSogsZip(input) \
{\\n    try {\\n      const fileBytes = input instanceof ArrayBuffer ? new \
Uint8Array(input) : input;\\n      let metaFilename = null;\\n      const \
unzipped = unzipSync(fileBytes, {\\n        filter: ({ name }) => {\\n        \
  const filename = name.split(/[\\\\\\\\/]/).pop();\\n          if (filename \
=== \"meta.json\") {\\n            metaFilename = name;\\n            return \
true;\\n          }\\n          return false;\\n        }\\n      });\\n      \
if (!metaFilename) {\\n        return void 0;\\n      }\\n      const json = \
tryPcSogs(unzipped[metaFilename]);\\n      if (!json) {\\n        return void \
0;\\n      }\\n      return { name: metaFilename, json };\\n    } catch {\\n  \
    return void 0;\\n    }\\n  }\\n  class SplatData {\\n    constructor({ \
maxSplats = 1 } = {}) {\\n      this.numSplats = 0;\\n      this.maxSplats = \
getTextureSize(maxSplats).maxSplats;\\n      this.centers = new \
Float32Array(this.maxSplats * 3);\\n      this.scales = new \
Float32Array(this.maxSplats * 3);\\n      this.quaternions = new \
Float32Array(this.maxSplats * 4);\\n      this.opacities = new \
Float32Array(this.maxSplats);\\n      this.colors = new \
Float32Array(this.maxSplats * 3);\\n    }\\n    pushSplat() {\\n      const \
index = this.numSplats;\\n      this.ensureIndex(index);\\n      \
this.numSplats += 1;\\n      return index;\\n    }\\n    unpushSplat(index) \
{\\n      if (index === this.numSplats - 1) {\\n        this.numSplats -= \
1;\\n      } else {\\n        throw new Error(\"Cannot unpush splat from \
non-last position\");\\n      }\\n    }\\n    ensureCapacity(numSplats) {\\n  \
    if (numSplats > this.maxSplats) {\\n        const targetSplats = \
Math.max(numSplats, this.maxSplats * 2);\\n        const newCenters = new \
Float32Array(targetSplats * 3);\\n        const newScales = new \
Float32Array(targetSplats * 3);\\n        const newQuaternions = new \
Float32Array(targetSplats * 4);\\n        const newOpacities = new \
Float32Array(targetSplats);\\n        const newColors = new \
Float32Array(targetSplats * 3);\\n        newCenters.set(this.centers);\\n    \
    newScales.set(this.scales);\\n        \
newQuaternions.set(this.quaternions);\\n        \
newOpacities.set(this.opacities);\\n        newColors.set(this.colors);\\n    \
    this.centers = newCenters;\\n        this.scales = newScales;\\n        \
this.quaternions = newQuaternions;\\n        this.opacities = \
newOpacities;\\n        this.colors = newColors;\\n        if (this.sh1) {\\n \
         const newSh1 = new Float32Array(targetSplats * 9);\\n          \
newSh1.set(this.sh1);\\n          this.sh1 = newSh1;\\n        }\\n        if \
(this.sh2) {\\n          const newSh2 = new Float32Array(targetSplats * \
15);\\n          newSh2.set(this.sh2);\\n          this.sh2 = newSh2;\\n      \
  }\\n        if (this.sh3) {\\n          const newSh3 = new \
Float32Array(targetSplats * 21);\\n          newSh3.set(this.sh3);\\n         \
 this.sh3 = newSh3;\\n        }\\n        this.maxSplats = targetSplats;\\n   \
   }\\n    }\\n    ensureIndex(index) {\\n      this.ensureCapacity(index + \
1);\\n    }\\n    setCenter(index, x2, y, z) {\\n      this.centers[index * \
3] = x2;\\n      this.centers[index * 3 + 1] = y;\\n      this.centers[index \
* 3 + 2] = z;\\n    }\\n    setScale(index, scaleX, scaleY, scaleZ) {\\n      \
this.scales[index * 3] = scaleX;\\n      this.scales[index * 3 + 1] = \
scaleY;\\n      this.scales[index * 3 + 2] = scaleZ;\\n    }\\n    \
setQuaternion(index, x2, y, z, w) {\\n      this.quaternions[index * 4] = \
x2;\\n      this.quaternions[index * 4 + 1] = y;\\n      \
this.quaternions[index * 4 + 2] = z;\\n      this.quaternions[index * 4 + 3] \
= w;\\n    }\\n    setOpacity(index, opacity) {\\n      this.opacities[index] \
= opacity;\\n    }\\n    setColor(index, r, g, b) {\\n      this.colors[index \
* 3] = r;\\n      this.colors[index * 3 + 1] = g;\\n      this.colors[index * \
3 + 2] = b;\\n    }\\n    setSh1(index, sh1) {\\n      if (!this.sh1) {\\n    \
    this.sh1 = new Float32Array(this.maxSplats * 9);\\n      }\\n      for \
(let j = 0; j < 9; ++j) {\\n        this.sh1[index * 9 + j] = sh1[j];\\n      \
}\\n    }\\n    setSh2(index, sh2) {\\n      if (!this.sh2) {\\n        \
this.sh2 = new Float32Array(this.maxSplats * 15);\\n      }\\n      for (let \
j = 0; j < 15; ++j) {\\n        this.sh2[index * 15 + j] = sh2[j];\\n      \
}\\n    }\\n    setSh3(index, sh3) {\\n      if (!this.sh3) {\\n        \
this.sh3 = new Float32Array(this.maxSplats * 21);\\n      }\\n      for (let \
j = 0; j < 21; ++j) {\\n        this.sh3[index * 21 + j] = sh3[j];\\n      \
}\\n    }\\n  }\\n  async function unpackPcSogs(json, extraFiles, \
splatEncoding) {\\n    const isVersion2 = \"version\" in json;\\n    if \
(!isVersion2 && json.quats.encoding !== \"quaternion_packed\") {\\n      \
throw new Error(\"Unsupported quaternion encoding\");\\n    }\\n    const \
numSplats = isVersion2 ? json.count : json.means.shape[0];\\n    const \
maxSplats = computeMaxSplats(numSplats);\\n    const packedArray = new \
Uint32Array(maxSplats * 4);\\n    const extra = {};\\n    const meansPromise \
= Promise.all([\\n      decodeImageRgba(extraFiles[json.means.files[0]]),\\n  \
    decodeImageRgba(extraFiles[json.means.files[1]])\\n    ]).then((means) => \
{\\n      for (let i2 = 0; i2 < numSplats; ++i2) {\\n        const i4 = i2 * \
4;\\n        const fx = (means[0][i4 + 0] + (means[1][i4 + 0] << 8)) / \
65535;\\n        const fy = (means[0][i4 + 1] + (means[1][i4 + 1] << 8)) / \
65535;\\n        const fz = (means[0][i4 + 2] + (means[1][i4 + 2] << 8)) / \
65535;\\n        let x2 = json.means.mins[0] + (json.means.maxs[0] - \
json.means.mins[0]) * fx;\\n        let y = json.means.mins[1] + \
(json.means.maxs[1] - json.means.mins[1]) * fy;\\n        let z = \
json.means.mins[2] + (json.means.maxs[2] - json.means.mins[2]) * fz;\\n       \
 x2 = Math.sign(x2) * (Math.exp(Math.abs(x2)) - 1);\\n        y = \
Math.sign(y) * (Math.exp(Math.abs(y)) - 1);\\n        z = Math.sign(z) * \
(Math.exp(Math.abs(z)) - 1);\\n        setPackedSplatCenter(packedArray, i2, \
x2, y, z);\\n      }\\n    });\\n    const scalesPromise = \
decodeImageRgba(extraFiles[json.scales.files[0]]).then(\\n      (scales) => \
{\\n        let xLookup;\\n        let yLookup;\\n        let zLookup;\\n     \
   if (isVersion2) {\\n          xLookup = yLookup = zLookup = \
json.scales.codebook.map((x2) => Math.exp(x2));\\n        } else {\\n         \
 xLookup = new Array(256).fill(0).map(\\n            (_, i2) => \
json.scales.mins[0] + (json.scales.maxs[0] - json.scales.mins[0]) * (i2 / \
255)\\n          ).map((x2) => Math.exp(x2));\\n          yLookup = new \
Array(256).fill(0).map(\\n            (_, i2) => json.scales.mins[1] + \
(json.scales.maxs[1] - json.scales.mins[1]) * (i2 / 255)\\n          \
).map((x2) => Math.exp(x2));\\n          zLookup = new \
Array(256).fill(0).map(\\n            (_, i2) => json.scales.mins[2] + \
(json.scales.maxs[2] - json.scales.mins[2]) * (i2 / 255)\\n          \
).map((x2) => Math.exp(x2));\\n        }\\n        for (let i2 = 0; i2 < \
numSplats; ++i2) {\\n          const i4 = i2 * 4;\\n          \
setPackedSplatScales(\\n            packedArray,\\n            i2,\\n         \
   xLookup[scales[i4 + 0]],\\n            yLookup[scales[i4 + 1]],\\n         \
   zLookup[scales[i4 + 2]],\\n            splatEncoding\\n          );\\n     \
   }\\n      }\\n    );\\n    const quatsPromise = \
decodeImageRgba(extraFiles[json.quats.files[0]]).then(\\n      (quats) => \
{\\n        const SQRT2 = Math.sqrt(2);\\n        const lookup = new \
Array(256).fill(0).map((_, i2) => (i2 / 255 - 0.5) * SQRT2);\\n        for \
(let i2 = 0; i2 < numSplats; ++i2) {\\n          const i4 = i2 * 4;\\n        \
  const r0 = lookup[quats[i4 + 0]];\\n          const r1 = lookup[quats[i4 + \
1]];\\n          const r2 = lookup[quats[i4 + 2]];\\n          const rr = \
Math.sqrt(Math.max(0, 1 - r0 * r0 - r1 * r1 - r2 * r2));\\n          const \
rOrder = quats[i4 + 3] - 252;\\n          const quatX = rOrder === 0 ? r0 : \
rOrder === 1 ? rr : r1;\\n          const quatY = rOrder <= 1 ? r1 : rOrder \
=== 2 ? rr : r2;\\n          const quatZ = rOrder <= 2 ? r2 : rr;\\n          \
const quatW = rOrder === 0 ? rr : r0;\\n          \
setPackedSplatQuat(packedArray, i2, quatX, quatY, quatZ, quatW);\\n        \
}\\n      }\\n    );\\n    const sh0Promise = \
decodeImageRgba(extraFiles[json.sh0.files[0]]).then(\\n      (sh0) => {\\n    \
    const SH_C02 = 0.28209479177387814;\\n        let rLookup;\\n        let \
gLookup;\\n        let bLookup;\\n        let aLookup;\\n        if \
(isVersion2) {\\n          rLookup = gLookup = bLookup = \
json.sh0.codebook.map((x2) => SH_C02 * x2 + 0.5);\\n          aLookup = new \
Array(256).fill(0).map((_, i2) => i2 / 255);\\n        } else {\\n          \
rLookup = new Array(256).fill(0).map(\\n            (_, i2) => \
json.sh0.mins[0] + (json.sh0.maxs[0] - json.sh0.mins[0]) * (i2 / 255)\\n      \
    ).map((x2) => SH_C02 * x2 + 0.5);\\n          gLookup = new \
Array(256).fill(0).map(\\n            (_, i2) => json.sh0.mins[1] + \
(json.sh0.maxs[1] - json.sh0.mins[1]) * (i2 / 255)\\n          ).map((x2) => \
SH_C02 * x2 + 0.5);\\n          bLookup = new Array(256).fill(0).map(\\n      \
      (_, i2) => json.sh0.mins[2] + (json.sh0.maxs[2] - json.sh0.mins[2]) * \
(i2 / 255)\\n          ).map((x2) => SH_C02 * x2 + 0.5);\\n          aLookup \
= new Array(256).fill(0).map(\\n            (_, i2) => json.sh0.mins[3] + \
(json.sh0.maxs[3] - json.sh0.mins[3]) * (i2 / 255)\\n          ).map((x2) => \
1 / (1 + Math.exp(-x2)));\\n        }\\n        for (let i2 = 0; i2 < \
numSplats; ++i2) {\\n          const i4 = i2 * 4;\\n          \
setPackedSplatRgba(\\n            packedArray,\\n            i2,\\n           \
 rLookup[sh0[i4 + 0]],\\n            gLookup[sh0[i4 + 1]],\\n            \
bLookup[sh0[i4 + 2]],\\n            aLookup[sh0[i4 + 3]],\\n            \
splatEncoding\\n          );\\n        }\\n      }\\n    );\\n    const \
promises = [meansPromise, scalesPromise, quatsPromise, sh0Promise];\\n    if \
(json.shN) {\\n      const useSH3 = isVersion2 ? json.shN.bands >= 3 : \
json.shN.shape[1] >= 48 - 3;\\n      const useSH2 = isVersion2 ? \
json.shN.bands >= 2 : json.shN.shape[1] >= 27 - 3;\\n      const useSH1 = \
isVersion2 ? json.shN.bands >= 1 : json.shN.shape[1] >= 12 - 3;\\n      if \
(useSH1) extra.sh1 = new Uint32Array(numSplats * 2);\\n      if (useSH2) \
extra.sh2 = new Uint32Array(numSplats * 4);\\n      if (useSH3) extra.sh3 = \
new Uint32Array(numSplats * 4);\\n      const sh1 = new Float32Array(9);\\n   \
   const sh2 = new Float32Array(15);\\n      const sh3 = new \
Float32Array(21);\\n      const shN = json.shN;\\n      const shNPromise = \
Promise.all([\\n        decodeImage(extraFiles[json.shN.files[0]]),\\n        \
decodeImage(extraFiles[json.shN.files[1]])\\n      ]).then(([centroids, \
labels]) => {\\n        const lookup = \"codebook\" in shN ? shN.codebook : \
new Array(256).fill(0).map((_, i2) => shN.mins + (shN.maxs - shN.mins) * (i2 \
/ 255));\\n        for (let i2 = 0; i2 < numSplats; ++i2) {\\n          const \
i4 = i2 * 4;\\n          const label = labels.rgba[i4 + 0] + (labels.rgba[i4 \
+ 1] << 8);\\n          const col = (label & 63) * 15;\\n          const row \
= label >>> 6;\\n          const offset = row * centroids.width + col;\\n     \
     for (let d = 0; d < 3; ++d) {\\n            if (useSH1) {\\n             \
 for (let k = 0; k < 3; ++k) {\\n                sh1[k * 3 + d] = \
lookup[centroids.rgba[(offset + k) * 4 + d]];\\n              }\\n            \
}\\n            if (useSH2) {\\n              for (let k = 0; k < 5; ++k) \
{\\n                sh2[k * 3 + d] = lookup[centroids.rgba[(offset + 3 + k) * \
4 + d]];\\n              }\\n            }\\n            if (useSH3) {\\n     \
         for (let k = 0; k < 7; ++k) {\\n                sh3[k * 3 + d] = \
lookup[centroids.rgba[(offset + 8 + k) * 4 + d]];\\n              }\\n        \
    }\\n          }\\n          if (useSH1)\\n            \
encodeSh1Rgb(extra.sh1, i2, sh1, splatEncoding);\\n          if (useSH2)\\n   \
         encodeSh2Rgb(extra.sh2, i2, sh2, splatEncoding);\\n          if \
(useSH3)\\n            encodeSh3Rgb(extra.sh3, i2, sh3, splatEncoding);\\n    \
    }\\n      });\\n      promises.push(shNPromise);\\n    }\\n    await \
Promise.all(promises);\\n    return { packedArray, numSplats, extra };\\n  \
}\\n  let offscreenGlContext = null;\\n  async function \
decodeImage(fileBytes) {\\n    if (!offscreenGlContext) {\\n      const \
canvas = new OffscreenCanvas(1, 1);\\n      offscreenGlContext = \
canvas.getContext(\"webgl2\");\\n      if (!offscreenGlContext) {\\n        \
throw new Error(\"Failed to create WebGL2 context\");\\n      }\\n    }\\n    \
const imageBlob = new Blob([fileBytes]);\\n    const bitmap = await \
createImageBitmap(imageBlob, {\\n      premultiplyAlpha: \"none\"\\n    \
});\\n    const gl = offscreenGlContext;\\n    const texture = \
gl.createTexture();\\n    gl.bindTexture(gl.TEXTURE_2D, texture);\\n    \
gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);\\n    \
gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, \
bitmap);\\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, \
gl.NEAREST);\\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, \
gl.NEAREST);\\n    const framebuffer = gl.createFramebuffer();\\n    \
gl.bindFramebuffer(gl.FRAMEBUFFER, framebuffer);\\n    \
gl.framebufferTexture2D(\\n      gl.FRAMEBUFFER,\\n      \
gl.COLOR_ATTACHMENT0,\\n      gl.TEXTURE_2D,\\n      texture,\\n      0\\n    \
);\\n    const data = new Uint8Array(bitmap.width * bitmap.height * 4);\\n    \
gl.readPixels(\\n      0,\\n      0,\\n      bitmap.width,\\n      \
bitmap.height,\\n      gl.RGBA,\\n      gl.UNSIGNED_BYTE,\\n      data\\n    \
);\\n    gl.deleteTexture(texture);\\n    \
gl.deleteFramebuffer(framebuffer);\\n    return { rgba: data, width: \
bitmap.width, height: bitmap.height };\\n  }\\n  async function \
decodeImageRgba(fileBytes) {\\n    const { rgba } = await \
decodeImage(fileBytes);\\n    return rgba;\\n  }\\n  async function \
unpackPcSogsZip(fileBytes, splatEncoding) {\\n    var _a2;\\n    const \
nameJson = tryPcSogsZip(fileBytes);\\n    if (!nameJson) {\\n      throw new \
Error(\"Invalid PC SOGS zip file\");\\n    }\\n    const { name, json } = \
nameJson;\\n    const lastSlash = name.lastIndexOf(\"/\");\\n    const \
lastBackslash = name.lastIndexOf(\"\\\\\\\\\");\\n    const prefix = \
name.slice(0, Math.max(lastSlash, lastBackslash) + 1);\\n    const fileMap = \
/* @__PURE__ */ new Map();\\n    const refFiles = [\\n      \
...json.means.files,\\n      ...json.scales.files,\\n      \
...json.quats.files,\\n      ...json.sh0.files,\\n      ...((_a2 = json.shN) \
== null ? void 0 : _a2.files) ?? []\\n    ];\\n    for (const file of \
refFiles) {\\n      fileMap.set(prefix + file, file);\\n    }\\n    const \
unzipped = await new Promise(\\n      (resolve, reject) => {\\n        \
unzip(\\n          fileBytes,\\n          {\\n            filter: ({ name: \
name2 }) => {\\n              return fileMap.has(name2);\\n            }\\n   \
       },\\n          (err2, files) => {\\n            if (err2) {\\n         \
     reject(err2);\\n            } else {\\n              resolve(files);\\n  \
          }\\n          }\\n        );\\n      }\\n    );\\n    const \
extraFiles = {};\\n    for (const [full, name2] of fileMap.entries()) {\\n    \
  extraFiles[name2] = unzipped[full];\\n    }\\n    return await \
unpackPcSogs(json, extraFiles, splatEncoding);\\n  }\\n  class SpzReader {\\n \
   constructor({ fileBytes }) {\\n      this.version = -1;\\n      \
this.numSplats = 0;\\n      this.shDegree = 0;\\n      this.fractionalBits = \
0;\\n      this.flags = 0;\\n      this.flagAntiAlias = false;\\n      \
this.reserved = 0;\\n      this.headerParsed = false;\\n      this.parsed = \
false;\\n      this.fileBytes = fileBytes instanceof ArrayBuffer ? new \
Uint8Array(fileBytes) : fileBytes;\\n      this.reader = new GunzipReader({ \
fileBytes: this.fileBytes });\\n    }\\n    async parseHeader() {\\n      if \
(this.headerParsed) {\\n        throw new Error(\"SPZ file header already \
parsed\");\\n      }\\n      const header = new DataView((await \
this.reader.read(16)).buffer);\\n      if (header.getUint32(0, true) !== \
1347635022) {\\n        throw new Error(\"Invalid SPZ file\");\\n      }\\n   \
   this.version = header.getUint32(4, true);\\n      if (this.version < 1 || \
this.version > 3) {\\n        throw new Error(`Unsupported SPZ version: \
${this.version}`);\\n      }\\n      this.numSplats = header.getUint32(8, \
true);\\n      this.shDegree = header.getUint8(12);\\n      \
this.fractionalBits = header.getUint8(13);\\n      this.flags = \
header.getUint8(14);\\n      this.flagAntiAlias = (this.flags & 1) !== 0;\\n  \
    this.reserved = header.getUint8(15);\\n      this.headerParsed = true;\\n \
     this.parsed = false;\\n    }\\n    async parseSplats(centerCallback, \
alphaCallback, rgbCallback, scalesCallback, quatCallback, shCallback) {\\n    \
  if (!this.headerParsed) {\\n        throw new Error(\"SPZ file header must \
be parsed first\");\\n      }\\n      if (this.parsed) {\\n        throw new \
Error(\"SPZ file already parsed\");\\n      }\\n      this.parsed = true;\\n  \
    if (this.version === 1) {\\n        const centerBytes = await \
this.reader.read(this.numSplats * 3 * 2);\\n        const centerUint16 = new \
Uint16Array(centerBytes.buffer);\\n        for (let i2 = 0; i2 < \
this.numSplats; i2++) {\\n          const i3 = i2 * 3;\\n          const x2 = \
fromHalf(centerUint16[i3]);\\n          const y = fromHalf(centerUint16[i3 + \
1]);\\n          const z = fromHalf(centerUint16[i3 + 2]);\\n          \
centerCallback == null ? void 0 : centerCallback(i2, x2, y, z);\\n        \
}\\n      } else if (this.version === 2 || this.version === 3) {\\n        \
const fixed = 1 << this.fractionalBits;\\n        const centerBytes = await \
this.reader.read(this.numSplats * 3 * 3);\\n        for (let i2 = 0; i2 < \
this.numSplats; i2++) {\\n          const i9 = i2 * 9;\\n          const x2 = \
((centerBytes[i9 + 2] << 24 | centerBytes[i9 + 1] << 16 | centerBytes[i9] << \
8) >> 8) / fixed;\\n          const y = ((centerBytes[i9 + 5] << 24 | \
centerBytes[i9 + 4] << 16 | centerBytes[i9 + 3] << 8) >> 8) / fixed;\\n       \
   const z = ((centerBytes[i9 + 8] << 24 | centerBytes[i9 + 7] << 16 | \
centerBytes[i9 + 6] << 8) >> 8) / fixed;\\n          centerCallback == null ? \
void 0 : centerCallback(i2, x2, y, z);\\n        }\\n      } else {\\n        \
throw new Error(\"Unreachable\");\\n      }\\n      {\\n        const bytes = \
await this.reader.read(this.numSplats);\\n        for (let i2 = 0; i2 < \
this.numSplats; i2++) {\\n          alphaCallback == null ? void 0 : \
alphaCallback(i2, bytes[i2] / 255);\\n        }\\n      }\\n      {\\n        \
const rgbBytes = await this.reader.read(this.numSplats * 3);\\n        const \
scale = SH_C0 / 0.15;\\n        for (let i2 = 0; i2 < this.numSplats; i2++) \
{\\n          const i3 = i2 * 3;\\n          const r = (rgbBytes[i3] / 255 - \
0.5) * scale + 0.5;\\n          const g = (rgbBytes[i3 + 1] / 255 - 0.5) * \
scale + 0.5;\\n          const b = (rgbBytes[i3 + 2] / 255 - 0.5) * scale + \
0.5;\\n          rgbCallback == null ? void 0 : rgbCallback(i2, r, g, b);\\n  \
      }\\n      }\\n      {\\n        const scalesBytes = await \
this.reader.read(this.numSplats * 3);\\n        for (let i2 = 0; i2 < \
this.numSplats; i2++) {\\n          const i3 = i2 * 3;\\n          const \
scaleX = Math.exp(scalesBytes[i3] / 16 - 10);\\n          const scaleY = \
Math.exp(scalesBytes[i3 + 1] / 16 - 10);\\n          const scaleZ = \
Math.exp(scalesBytes[i3 + 2] / 16 - 10);\\n          scalesCallback == null ? \
void 0 : scalesCallback(i2, scaleX, scaleY, scaleZ);\\n        }\\n      }\\n \
     if (this.version === 3) {\\n        const maxValue = 1 / \
Math.sqrt(2);\\n        const quatBytes = await \
this.reader.read(this.numSplats * 4);\\n        for (let i2 = 0; i2 < \
this.numSplats; i2++) {\\n          const i3 = i2 * 4;\\n          const \
quaternion = [0, 0, 0, 0];\\n          const values = [\\n            \
quatBytes[i3],\\n            quatBytes[i3 + 1],\\n            quatBytes[i3 + \
2],\\n            quatBytes[i3 + 3]\\n          ];\\n          const \
combinedValues = values[0] + (values[1] << 8) + (values[2] << 16) + \
(values[3] << 24);\\n          const valueMask = (1 << 9) - 1;\\n          \
const largestIndex = combinedValues >>> 30;\\n          let remainingValues = \
combinedValues;\\n          let sumSquares = 0;\\n          for (let i22 = 3; \
i22 >= 0; --i22) {\\n            if (i22 !== largestIndex) {\\n              \
const value = remainingValues & valueMask;\\n              const sign = \
remainingValues >>> 9 & 1;\\n              remainingValues = remainingValues \
>>> 10;\\n              quaternion[i22] = maxValue * (value / valueMask);\\n  \
            quaternion[i22] = sign === 0 ? quaternion[i22] : \
-quaternion[i22];\\n              sumSquares += quaternion[i22] * \
quaternion[i22];\\n            }\\n          }\\n          const square = 1 - \
sumSquares;\\n          quaternion[largestIndex] = Math.sqrt(Math.max(square, \
0));\\n          quatCallback == null ? void 0 : quatCallback(\\n            \
i2,\\n            quaternion[0],\\n            quaternion[1],\\n            \
quaternion[2],\\n            quaternion[3]\\n          );\\n        }\\n      \
} else {\\n        const quatBytes = await this.reader.read(this.numSplats * \
3);\\n        for (let i2 = 0; i2 < this.numSplats; i2++) {\\n          const \
i3 = i2 * 3;\\n          const quatX = quatBytes[i3] / 127.5 - 1;\\n          \
const quatY = quatBytes[i3 + 1] / 127.5 - 1;\\n          const quatZ = \
quatBytes[i3 + 2] / 127.5 - 1;\\n          const quatW = Math.sqrt(\\n        \
    Math.max(0, 1 - quatX * quatX - quatY * quatY - quatZ * quatZ)\\n         \
 );\\n          quatCallback == null ? void 0 : quatCallback(i2, quatX, \
quatY, quatZ, quatW);\\n        }\\n      }\\n      if (shCallback && \
this.shDegree >= 1) {\\n        const sh1 = new Float32Array(3 * 3);\\n       \
 const sh2 = this.shDegree >= 2 ? new Float32Array(5 * 3) : void 0;\\n        \
const sh3 = this.shDegree >= 3 ? new Float32Array(7 * 3) : void 0;\\n        \
const shBytes = await this.reader.read(\\n          this.numSplats * \
SH_DEGREE_TO_VECS[this.shDegree] * 3\\n        );\\n        let offset = \
0;\\n        for (let i2 = 0; i2 < this.numSplats; i2++) {\\n          for \
(let j = 0; j < 9; ++j) {\\n            sh1[j] = (shBytes[offset + j] - 128) \
/ 128;\\n          }\\n          offset += 9;\\n          if (sh2) {\\n       \
     for (let j = 0; j < 15; ++j) {\\n              sh2[j] = (shBytes[offset \
+ j] - 128) / 128;\\n            }\\n            offset += 15;\\n          \
}\\n          if (sh3) {\\n            for (let j = 0; j < 21; ++j) {\\n      \
        sh3[j] = (shBytes[offset + j] - 128) / 128;\\n            }\\n        \
    offset += 21;\\n          }\\n          shCallback == null ? void 0 : \
shCallback(i2, sh1, sh2, sh3);\\n        }\\n      }\\n    }\\n  }\\n  const \
SH_DEGREE_TO_VECS = { 1: 3, 2: 8, 3: 15 };\\n  const SH_C0 = \
0.28209479177387814;\\n  const SPZ_MAGIC = 1347635022;\\n  const SPZ_VERSION \
= 3;\\n  const FLAG_ANTIALIASED = 1;\\n  class SpzWriter {\\n    \
constructor({\\n      numSplats,\\n      shDegree,\\n      fractionalBits = \
12,\\n      flagAntiAlias = true\\n    }) {\\n      this.clippedCount = 0;\\n \
     const splatSize = 9 + // Position\\n      1 + // Opacity\\n      3 + // \
Scale\\n      3 + // DC-rgb\\n      4 + // Rotation\\n      (shDegree >= 1 ? \
9 : 0) + (shDegree >= 2 ? 15 : 0) + (shDegree >= 3 ? 21 : 0);\\n      const \
bufferSize = 16 + numSplats * splatSize;\\n      this.buffer = new \
ArrayBuffer(bufferSize);\\n      this.view = new DataView(this.buffer);\\n    \
  this.view.setUint32(0, SPZ_MAGIC, true);\\n      this.view.setUint32(4, \
SPZ_VERSION, true);\\n      this.view.setUint32(8, numSplats, true);\\n      \
this.view.setUint8(12, shDegree);\\n      this.view.setUint8(13, \
fractionalBits);\\n      this.view.setUint8(14, flagAntiAlias ? \
FLAG_ANTIALIASED : 0);\\n      this.view.setUint8(15, 0);\\n      \
this.numSplats = numSplats;\\n      this.shDegree = shDegree;\\n      \
this.fractionalBits = fractionalBits;\\n      this.fraction = 1 << \
fractionalBits;\\n      this.flagAntiAlias = flagAntiAlias;\\n    }\\n    \
setCenter(index, x2, y, z) {\\n      const xRounded = Math.round(x2 * \
this.fraction);\\n      const xInt = Math.max(-8388607, Math.min(8388607, \
xRounded));\\n      const yRounded = Math.round(y * this.fraction);\\n      \
const yInt = Math.max(-8388607, Math.min(8388607, yRounded));\\n      const \
zRounded = Math.round(z * this.fraction);\\n      const zInt = \
Math.max(-8388607, Math.min(8388607, zRounded));\\n      const clipped = \
xRounded !== xInt || yRounded !== yInt || zRounded !== zInt;\\n      if \
(clipped) {\\n        this.clippedCount += 1;\\n      }\\n      const i9 = \
index * 9;\\n      const base = 16 + i9;\\n      this.view.setUint8(base, \
xInt & 255);\\n      this.view.setUint8(base + 1, xInt >> 8 & 255);\\n      \
this.view.setUint8(base + 2, xInt >> 16 & 255);\\n      \
this.view.setUint8(base + 3, yInt & 255);\\n      this.view.setUint8(base + \
4, yInt >> 8 & 255);\\n      this.view.setUint8(base + 5, yInt >> 16 & \
255);\\n      this.view.setUint8(base + 6, zInt & 255);\\n      \
this.view.setUint8(base + 7, zInt >> 8 & 255);\\n      \
this.view.setUint8(base + 8, zInt >> 16 & 255);\\n    }\\n    setAlpha(index, \
alpha) {\\n      const base = 16 + this.numSplats * 9 + index;\\n      \
this.view.setUint8(\\n        base,\\n        Math.max(0, Math.min(255, \
Math.round(alpha * 255)))\\n      );\\n    }\\n    static scaleRgb(r) {\\n    \
  const v = ((r - 0.5) / (SH_C0 / 0.15) + 0.5) * 255;\\n      return \
Math.max(0, Math.min(255, Math.round(v)));\\n    }\\n    setRgb(index, r, g, \
b) {\\n      const base = 16 + this.numSplats * 10 + index * 3;\\n      \
this.view.setUint8(base, SpzWriter.scaleRgb(r));\\n      \
this.view.setUint8(base + 1, SpzWriter.scaleRgb(g));\\n      \
this.view.setUint8(base + 2, SpzWriter.scaleRgb(b));\\n    }\\n    \
setScale(index, scaleX, scaleY, scaleZ) {\\n      const base = 16 + \
this.numSplats * 13 + index * 3;\\n      this.view.setUint8(\\n        \
base,\\n        Math.max(0, Math.min(255, Math.round((Math.log(scaleX) + 10) \
* 16)))\\n      );\\n      this.view.setUint8(\\n        base + 1,\\n        \
Math.max(0, Math.min(255, Math.round((Math.log(scaleY) + 10) * 16)))\\n      \
);\\n      this.view.setUint8(\\n        base + 2,\\n        Math.max(0, \
Math.min(255, Math.round((Math.log(scaleZ) + 10) * 16)))\\n      );\\n    \
}\\n    setQuat(index, ...q) {\\n      const base = 16 + this.numSplats * 16 \
+ index * 4;\\n      const quat = normalize(q);\\n      let iLargest = 0;\\n  \
    for (let i2 = 1; i2 < 4; ++i2) {\\n        if (Math.abs(quat[i2]) > \
Math.abs(quat[iLargest])) {\\n          iLargest = i2;\\n        }\\n      \
}\\n      const negate = quat[iLargest] < 0 ? 1 : 0;\\n      let comp = \
iLargest;\\n      for (let i2 = 0; i2 < 4; ++i2) {\\n        if (i2 !== \
iLargest) {\\n          const negbit = (quat[i2] < 0 ? 1 : 0) ^ negate;\\n    \
      const mag = Math.floor(\\n            ((1 << 9) - 1) * \
(Math.abs(quat[i2]) / Math.SQRT1_2) + 0.5\\n          );\\n          comp = \
comp << 10 | negbit << 9 | mag;\\n        }\\n      }\\n      \
this.view.setUint8(base, comp & 255);\\n      this.view.setUint8(base + 1, \
comp >> 8 & 255);\\n      this.view.setUint8(base + 2, comp >> 16 & 255);\\n  \
    this.view.setUint8(base + 3, comp >>> 24 & 255);\\n    }\\n    static \
quantizeSh(sh, bits2) {\\n      const value = Math.round(sh * 128) + 128;\\n  \
    const bucketSize = 1 << 8 - bits2;\\n      const quantized = \
Math.floor((value + bucketSize / 2) / bucketSize) * bucketSize;\\n      \
return Math.max(0, Math.min(255, quantized));\\n    }\\n    setSh(index, sh1, \
sh2, sh3) {\\n      const shVecs = SH_DEGREE_TO_VECS[this.shDegree] || 0;\\n  \
    const base1 = 16 + this.numSplats * 20 + index * shVecs * 3;\\n      for \
(let j = 0; j < 9; ++j) {\\n        this.view.setUint8(base1 + j, \
SpzWriter.quantizeSh(sh1[j], 5));\\n      }\\n      if (sh2) {\\n        \
const base2 = base1 + 9;\\n        for (let j = 0; j < 15; ++j) {\\n          \
this.view.setUint8(base2 + j, SpzWriter.quantizeSh(sh2[j], 4));\\n        \
}\\n        if (sh3) {\\n          const base3 = base2 + 15;\\n          for \
(let j = 0; j < 21; ++j) {\\n            this.view.setUint8(base3 + j, \
SpzWriter.quantizeSh(sh3[j], 4));\\n          }\\n        }\\n      }\\n    \
}\\n    async finalize() {\\n      const input = new \
Uint8Array(this.buffer);\\n      const stream = new ReadableStream({\\n       \
 async start(controller) {\\n          controller.enqueue(input);\\n          \
controller.close();\\n        }\\n      });\\n      const compressed = \
stream.pipeThrough(new CompressionStream(\"gzip\"));\\n      const response = \
new Response(compressed);\\n      const buffer = await \
response.arrayBuffer();\\n      console.log(\\n        \"Compressed\",\\n     \
   input.length,\\n        \"bytes to\",\\n        buffer.byteLength,\\n      \
  \"bytes\"\\n      );\\n      return new Uint8Array(buffer);\\n    }\\n  \
}\\n  async function transcodeSpz(input) {\\n    var _a2, _b2, _c;\\n    \
const splats = new SplatData();\\n    const {\\n      inputs,\\n      \
clipXyz,\\n      maxSh,\\n      fractionalBits = 12,\\n      \
opacityThreshold\\n    } = input;\\n    for (const input2 of inputs) {\\n     \
 let transformPos = function(pos) {\\n        pos.multiplyScalar(scale);\\n   \
     pos.applyQuaternion(quaternion);\\n        pos.add(translate);\\n        \
return pos;\\n      }, transformScales = function(scales) {\\n        \
scales.multiplyScalar(scale);\\n        return scales;\\n      }, \
transformQuaternion = function(quat) {\\n        \
quat.premultiply(quaternion);\\n        return quat;\\n      }, withinClip = \
function(p) {\\n        return !clip || clip.containsPoint(p);\\n      }, \
withinOpacity = function(opacity) {\\n        return opacityThreshold !== \
void 0 ? opacity >= opacityThreshold : true;\\n      };\\n      const scale = \
((_a2 = input2.transform) == null ? void 0 : _a2.scale) ?? 1;\\n      const \
quaternion = new Quaternion().fromArray(\\n        ((_b2 = input2.transform) \
== null ? void 0 : _b2.quaternion) ?? [0, 0, 0, 1]\\n      );\\n      const \
translate = new Vector3().fromArray(\\n        ((_c = input2.transform) == \
null ? void 0 : _c.translate) ?? [0, 0, 0]\\n      );\\n      const clip = \
clipXyz ? new Box3(\\n        new Vector3().fromArray(clipXyz.min),\\n        \
new Vector3().fromArray(clipXyz.max)\\n      ) : void 0;\\n      let fileType \
= input2.fileType;\\n      if (!fileType) {\\n        fileType = \
getSplatFileType(input2.fileBytes);\\n        if (!fileType && \
input2.pathOrUrl) {\\n          fileType = \
getSplatFileTypeFromPath(input2.pathOrUrl);\\n        }\\n      }\\n      \
switch (fileType) {\\n        case SplatFileType.PLY: {\\n          const ply \
= new PlyReader({ fileBytes: input2.fileBytes });\\n          await \
ply.parseHeader();\\n          let lastIndex = null;\\n          \
ply.parseSplats(\\n            (index, x2, y, z, scaleX, scaleY, scaleZ, \
quatX, quatY, quatZ, quatW, opacity, r, g, b) => {\\n              const \
center = transformPos(new Vector3(x2, y, z));\\n              if \
(withinClip(center) && withinOpacity(opacity)) {\\n                lastIndex \
= splats.pushSplat();\\n                splats.setCenter(lastIndex, center.x, \
center.y, center.z);\\n                const scales = transformScales(\\n     \
             new Vector3(scaleX, scaleY, scaleZ)\\n                );\\n      \
          splats.setScale(lastIndex, scales.x, scales.y, scales.z);\\n        \
        const quaternion2 = transformQuaternion(\\n                  new \
Quaternion(quatX, quatY, quatZ, quatW)\\n                );\\n                \
splats.setQuaternion(\\n                  lastIndex,\\n                  \
quaternion2.x,\\n                  quaternion2.y,\\n                  \
quaternion2.z,\\n                  quaternion2.w\\n                );\\n      \
          splats.setOpacity(lastIndex, opacity);\\n                \
splats.setColor(lastIndex, r, g, b);\\n              } else {\\n              \
  lastIndex = null;\\n              }\\n            },\\n            (index, \
sh1, sh2, sh3) => {\\n              if (sh1 && lastIndex !== null) {\\n       \
         splats.setSh1(lastIndex, sh1);\\n              }\\n              if \
(sh2 && lastIndex !== null) {\\n                splats.setSh2(lastIndex, \
sh2);\\n              }\\n              if (sh3 && lastIndex !== null) {\\n   \
             splats.setSh3(lastIndex, sh3);\\n              }\\n            \
}\\n          );\\n          break;\\n        }\\n        case \
SplatFileType.SPZ: {\\n          const spz2 = new SpzReader({ fileBytes: \
input2.fileBytes });\\n          await spz2.parseHeader();\\n          const \
mapping = new Int32Array(spz2.numSplats);\\n          mapping.fill(-1);\\n    \
      const centers = new Float32Array(spz2.numSplats * 3);\\n          const \
center = new Vector3();\\n          spz2.parseSplats(\\n            (index, \
x2, y, z) => {\\n              const center2 = transformPos(new Vector3(x2, \
y, z));\\n              centers[index * 3] = center2.x;\\n              \
centers[index * 3 + 1] = center2.y;\\n              centers[index * 3 + 2] = \
center2.z;\\n            },\\n            (index, alpha) => {\\n              \
center.fromArray(centers, index * 3);\\n              if (withinClip(center) \
&& withinOpacity(alpha)) {\\n                mapping[index] = \
splats.pushSplat();\\n                splats.setCenter(mapping[index], \
center.x, center.y, center.z);\\n                \
splats.setOpacity(mapping[index], alpha);\\n              }\\n            \
},\\n            (index, r, g, b) => {\\n              if (mapping[index] >= \
0) {\\n                splats.setColor(mapping[index], r, g, b);\\n           \
   }\\n            },\\n            (index, scaleX, scaleY, scaleZ) => {\\n   \
           if (mapping[index] >= 0) {\\n                const scales = \
transformScales(\\n                  new Vector3(scaleX, scaleY, scaleZ)\\n   \
             );\\n                splats.setScale(mapping[index], scales.x, \
scales.y, scales.z);\\n              }\\n            },\\n            (index, \
quatX, quatY, quatZ, quatW) => {\\n              if (mapping[index] >= 0) \
{\\n                const quaternion2 = transformQuaternion(\\n               \
   new Quaternion(quatX, quatY, quatZ, quatW)\\n                );\\n         \
       splats.setQuaternion(\\n                  mapping[index],\\n           \
       quaternion2.x,\\n                  quaternion2.y,\\n                  \
quaternion2.z,\\n                  quaternion2.w\\n                );\\n      \
        }\\n            },\\n            (index, sh1, sh2, sh3) => {\\n       \
       if (mapping[index] >= 0) {\\n                \
splats.setSh1(mapping[index], sh1);\\n                if (sh2) {\\n           \
       splats.setSh2(mapping[index], sh2);\\n                }\\n             \
   if (sh3) {\\n                  splats.setSh3(mapping[index], sh3);\\n      \
          }\\n              }\\n            }\\n          );\\n          \
break;\\n        }\\n        case SplatFileType.SPLAT:\\n          \
decodeAntiSplat(\\n            input2.fileBytes,\\n            (numSplats) => \
{\\n            },\\n            (index, x2, y, z, scaleX, scaleY, scaleZ, \
quatX, quatY, quatZ, quatW, opacity, r, g, b) => {\\n              const \
center = transformPos(new Vector3(x2, y, z));\\n              if \
(withinClip(center) && withinOpacity(opacity)) {\\n                const \
index2 = splats.pushSplat();\\n                splats.setCenter(index2, \
center.x, center.y, center.z);\\n                const scales = \
transformScales(\\n                  new Vector3(scaleX, scaleY, scaleZ)\\n   \
             );\\n                splats.setScale(index2, scales.x, scales.y, \
scales.z);\\n                const quaternion2 = transformQuaternion(\\n      \
            new Quaternion(quatX, quatY, quatZ, quatW)\\n                \
);\\n                splats.setQuaternion(\\n                  index2,\\n     \
             quaternion2.x,\\n                  quaternion2.y,\\n             \
     quaternion2.z,\\n                  quaternion2.w\\n                );\\n \
               splats.setOpacity(index2, opacity);\\n                \
splats.setColor(index2, r, g, b);\\n              }\\n            }\\n        \
  );\\n          break;\\n        case SplatFileType.KSPLAT: {\\n          \
let lastIndex = null;\\n          decodeKsplat(\\n            \
input2.fileBytes,\\n            (numSplats) => {\\n            },\\n          \
  (index, x2, y, z, scaleX, scaleY, scaleZ, quatX, quatY, quatZ, quatW, \
opacity, r, g, b) => {\\n              const center = transformPos(new \
Vector3(x2, y, z));\\n              if (withinClip(center) && \
withinOpacity(opacity)) {\\n                lastIndex = \
splats.pushSplat();\\n                splats.setCenter(lastIndex, center.x, \
center.y, center.z);\\n                const scales = transformScales(\\n     \
             new Vector3(scaleX, scaleY, scaleZ)\\n                );\\n      \
          splats.setScale(lastIndex, scales.x, scales.y, scales.z);\\n        \
        const quaternion2 = transformQuaternion(\\n                  new \
Quaternion(quatX, quatY, quatZ, quatW)\\n                );\\n                \
splats.setQuaternion(\\n                  lastIndex,\\n                  \
quaternion2.x,\\n                  quaternion2.y,\\n                  \
quaternion2.z,\\n                  quaternion2.w\\n                );\\n      \
          splats.setOpacity(lastIndex, opacity);\\n                \
splats.setColor(lastIndex, r, g, b);\\n              } else {\\n              \
  lastIndex = null;\\n              }\\n            },\\n            (index, \
sh1, sh2, sh3) => {\\n              if (lastIndex !== null) {\\n              \
  splats.setSh1(lastIndex, sh1);\\n                if (sh2) {\\n              \
    splats.setSh2(lastIndex, sh2);\\n                }\\n                if \
(sh3) {\\n                  splats.setSh3(lastIndex, sh3);\\n                \
}\\n              }\\n            }\\n          );\\n          break;\\n      \
  }\\n        default:\\n          throw new Error(`transcodeSpz not \
implemented for ${fileType}`);\\n      }\\n    }\\n    const shDegree = \
Math.min(\\n      maxSh ?? 3,\\n      splats.sh3 ? 3 : splats.sh2 ? 2 : \
splats.sh1 ? 1 : 0\\n    );\\n    const spz = new SpzWriter({\\n      \
numSplats: splats.numSplats,\\n      shDegree,\\n      fractionalBits,\\n     \
 flagAntiAlias: true\\n    });\\n    for (let i2 = 0; i2 < splats.numSplats; \
++i2) {\\n      const i3 = i2 * 3;\\n      const i4 = i2 * 4;\\n      \
spz.setCenter(\\n        i2,\\n        splats.centers[i3],\\n        \
splats.centers[i3 + 1],\\n        splats.centers[i3 + 2]\\n      );\\n      \
spz.setScale(\\n        i2,\\n        splats.scales[i3],\\n        \
splats.scales[i3 + 1],\\n        splats.scales[i3 + 2]\\n      );\\n      \
spz.setQuat(\\n        i2,\\n        splats.quaternions[i4],\\n        \
splats.quaternions[i4 + 1],\\n        splats.quaternions[i4 + 2],\\n        \
splats.quaternions[i4 + 3]\\n      );\\n      spz.setAlpha(i2, \
splats.opacities[i2]);\\n      spz.setRgb(\\n        i2,\\n        \
splats.colors[i3],\\n        splats.colors[i3 + 1],\\n        \
splats.colors[i3 + 2]\\n      );\\n      if (splats.sh1 && shDegree >= 1) \
{\\n        spz.setSh(\\n          i2,\\n          splats.sh1.slice(i2 * 9, \
(i2 + 1) * 9),\\n          shDegree >= 2 && splats.sh2 ? splats.sh2.slice(i2 \
* 15, (i2 + 1) * 15) : void 0,\\n          shDegree >= 3 && splats.sh3 ? \
splats.sh3.slice(i2 * 21, (i2 + 1) * 21) : void 0\\n        );\\n      }\\n   \
 }\\n    const spzBytes = await spz.finalize();\\n    return { fileBytes: \
spzBytes, clippedCount: spz.clippedCount };\\n  }\\n  async function \
onMessage(event) {\\n    const { name, args, id } = event.data;\\n    let \
result = void 0;\\n    let error = void 0;\\n    try {\\n      switch (name) \
{\\n        case \"unpackPly\": {\\n          const { packedArray, fileBytes, \
splatEncoding } = args;\\n          const decoded = await unpackPly({\\n      \
      packedArray,\\n            fileBytes,\\n            splatEncoding\\n    \
      });\\n          result = {\\n            id,\\n            numSplats: \
decoded.numSplats,\\n            packedArray: decoded.packedArray,\\n         \
   extra: decoded.extra\\n          };\\n          break;\\n        }\\n      \
  case \"decodeSpz\": {\\n          const { fileBytes, splatEncoding } = \
args;\\n          const decoded = await unpackSpz(fileBytes, \
splatEncoding);\\n          result = {\\n            id,\\n            \
numSplats: decoded.numSplats,\\n            packedArray: \
decoded.packedArray,\\n            extra: decoded.extra\\n          };\\n     \
     break;\\n        }\\n        case \"decodeAntiSplat\": {\\n          \
const { fileBytes, splatEncoding } = args;\\n          const decoded = \
unpackAntiSplat(fileBytes, splatEncoding);\\n          result = {\\n          \
  id,\\n            numSplats: decoded.numSplats,\\n            packedArray: \
decoded.packedArray\\n          };\\n          break;\\n        }\\n        \
case \"decodeKsplat\": {\\n          const { fileBytes, splatEncoding } = \
args;\\n          const decoded = unpackKsplat(fileBytes, splatEncoding);\\n  \
        result = {\\n            id,\\n            numSplats: \
decoded.numSplats,\\n            packedArray: decoded.packedArray,\\n         \
   extra: decoded.extra\\n          };\\n          break;\\n        }\\n      \
  case \"decodePcSogs\": {\\n          const { fileBytes, extraFiles, \
splatEncoding } = args;\\n          const json = JSON.parse(\\n            \
new TextDecoder().decode(fileBytes)\\n          );\\n          const decoded \
= await unpackPcSogs(json, extraFiles, splatEncoding);\\n          result = \
{\\n            id,\\n            numSplats: decoded.numSplats,\\n            \
packedArray: decoded.packedArray,\\n            extra: decoded.extra\\n       \
   };\\n          break;\\n        }\\n        case \"decodePcSogsZip\": {\\n \
         const { fileBytes, splatEncoding } = args;\\n          const decoded \
= await unpackPcSogsZip(fileBytes, splatEncoding);\\n          result = {\\n  \
          id,\\n            numSplats: decoded.numSplats,\\n            \
packedArray: decoded.packedArray,\\n            extra: decoded.extra\\n       \
   };\\n          break;\\n        }\\n        case \"sortSplats\": {\\n      \
    const { totalSplats, readback, ordering } = args;\\n          result = \
{\\n            id,\\n            readback,\\n            ...sortSplats({ \
totalSplats, readback, ordering })\\n          };\\n          break;\\n       \
 }\\n        case \"sortDoubleSplats\": {\\n          const { numSplats, \
readback, ordering } = args;\\n          {\\n            result = {\\n        \
      id,\\n              readback,\\n              ordering,\\n              \
activeSplats: sort_splats(numSplats, readback, ordering)\\n            };\\n  \
        }\\n          break;\\n        }\\n        case \"sort32Splats\": \
{\\n          const { numSplats, readback, ordering } = args;\\n          \
{\\n            result = {\\n              id,\\n              readback,\\n   \
           ordering,\\n              activeSplats: sort32_splats(numSplats, \
readback, ordering)\\n            };\\n          }\\n          break;\\n      \
  }\\n        case \"transcodeSpz\": {\\n          const input = args;\\n     \
     const spzBytes = await transcodeSpz(input);\\n          result = {\\n    \
        id,\\n            fileBytes: spzBytes,\\n            input\\n         \
 };\\n          break;\\n        }\\n        default: {\\n          throw new \
Error(`Unknown name: ${name}`);\\n        }\\n      }\\n    } catch (e) {\\n  \
    error = e;\\n      console.error(error);\\n    }\\n    \
self.postMessage(\\n      { id, result, error },\\n      { transfer: \
getArrayBuffers(result) }\\n    );\\n  }\\n  async function unpackPly({\\n    \
packedArray,\\n    fileBytes,\\n    splatEncoding\\n  }) {\\n    const ply = \
new PlyReader({ fileBytes });\\n    await ply.parseHeader();\\n    const \
numSplats = ply.numSplats;\\n    const extra = {};\\n    ply.parseSplats(\\n  \
    (index, x2, y, z, scaleX, scaleY, scaleZ, quatX, quatY, quatZ, quatW, \
opacity, r, g, b) => {\\n        setPackedSplat(\\n          packedArray,\\n  \
        index,\\n          x2,\\n          y,\\n          z,\\n          \
scaleX,\\n          scaleY,\\n          scaleZ,\\n          quatX,\\n         \
 quatY,\\n          quatZ,\\n          quatW,\\n          opacity,\\n         \
 r,\\n          g,\\n          b,\\n          splatEncoding\\n        );\\n   \
   },\\n      (index, sh1, sh2, sh3) => {\\n        if (sh1) {\\n          if \
(!extra.sh1) {\\n            extra.sh1 = new Uint32Array(numSplats * 2);\\n   \
       }\\n          encodeSh1Rgb(extra.sh1, index, sh1, splatEncoding);\\n   \
     }\\n        if (sh2) {\\n          if (!extra.sh2) {\\n            \
extra.sh2 = new Uint32Array(numSplats * 4);\\n          }\\n          \
encodeSh2Rgb(extra.sh2, index, sh2, splatEncoding);\\n        }\\n        if \
(sh3) {\\n          if (!extra.sh3) {\\n            extra.sh3 = new \
Uint32Array(numSplats * 4);\\n          }\\n          encodeSh3Rgb(extra.sh3, \
index, sh3, splatEncoding);\\n        }\\n      }\\n    );\\n    return { \
packedArray, numSplats, extra };\\n  }\\n  async function \
unpackSpz(fileBytes, splatEncoding) {\\n    const spz = new SpzReader({ \
fileBytes });\\n    await spz.parseHeader();\\n    const numSplats = \
spz.numSplats;\\n    const maxSplats = computeMaxSplats(numSplats);\\n    \
const packedArray = new Uint32Array(maxSplats * 4);\\n    const extra = \
{};\\n    await spz.parseSplats(\\n      (index, x2, y, z) => {\\n        \
setPackedSplatCenter(packedArray, index, x2, y, z);\\n      },\\n      \
(index, alpha) => {\\n        setPackedSplatOpacity(packedArray, index, \
alpha);\\n      },\\n      (index, r, g, b) => {\\n        \
setPackedSplatRgb(packedArray, index, r, g, b, splatEncoding);\\n      },\\n  \
    (index, scaleX, scaleY, scaleZ) => {\\n        setPackedSplatScales(\\n   \
       packedArray,\\n          index,\\n          scaleX,\\n          \
scaleY,\\n          scaleZ,\\n          splatEncoding\\n        );\\n      \
},\\n      (index, quatX, quatY, quatZ, quatW) => {\\n        \
setPackedSplatQuat(packedArray, index, quatX, quatY, quatZ, quatW);\\n      \
},\\n      (index, sh1, sh2, sh3) => {\\n        if (sh1) {\\n          if \
(!extra.sh1) {\\n            extra.sh1 = new Uint32Array(numSplats * 2);\\n   \
       }\\n          encodeSh1Rgb(extra.sh1, index, sh1, splatEncoding);\\n   \
     }\\n        if (sh2) {\\n          if (!extra.sh2) {\\n            \
extra.sh2 = new Uint32Array(numSplats * 4);\\n          }\\n          \
encodeSh2Rgb(extra.sh2, index, sh2, splatEncoding);\\n        }\\n        if \
(sh3) {\\n          if (!extra.sh3) {\\n            extra.sh3 = new \
Uint32Array(numSplats * 4);\\n          }\\n          encodeSh3Rgb(extra.sh3, \
index, sh3, splatEncoding);\\n        }\\n      }\\n    );\\n    return { \
packedArray, numSplats, extra };\\n  }\\n  const DEPTH_INFINITY_F16 = \
31744;\\n  const DEPTH_SIZE_16 = DEPTH_INFINITY_F16 + 1;\\n  let depthArray16 \
= null;\\n  function sortSplats({\\n    totalSplats,\\n    readback,\\n    \
ordering\\n  }) {\\n    if (!depthArray16) {\\n      depthArray16 = new \
Uint32Array(DEPTH_SIZE_16);\\n    }\\n    depthArray16.fill(0);\\n    const \
readbackUint32 = readback.map((layer) => new Uint32Array(layer.buffer));\\n   \
 const layerSize = readbackUint32[0].length;\\n    const numLayers = \
Math.ceil(totalSplats / layerSize);\\n    let layerBase = 0;\\n    for (let \
layer = 0; layer < numLayers; ++layer) {\\n      const readbackLayer = \
readbackUint32[layer];\\n      const layerSplats = \
Math.min(readbackLayer.length, totalSplats - layerBase);\\n      for (let i2 \
= 0; i2 < layerSplats; ++i2) {\\n        const pri = readbackLayer[i2] & \
32767;\\n        if (pri < DEPTH_INFINITY_F16) {\\n          \
depthArray16[pri] += 1;\\n        }\\n      }\\n      layerBase += \
layerSplats;\\n    }\\n    let activeSplats = 0;\\n    for (let j = 0; j < \
DEPTH_SIZE_16; ++j) {\\n      const nextIndex = activeSplats + \
depthArray16[j];\\n      depthArray16[j] = activeSplats;\\n      activeSplats \
= nextIndex;\\n    }\\n    layerBase = 0;\\n    for (let layer = 0; layer < \
numLayers; ++layer) {\\n      const readbackLayer = readbackUint32[layer];\\n \
     const layerSplats = Math.min(readbackLayer.length, totalSplats - \
layerBase);\\n      for (let i2 = 0; i2 < layerSplats; ++i2) {\\n        \
const pri = readbackLayer[i2] & 32767;\\n        if (pri < \
DEPTH_INFINITY_F16) {\\n          ordering[depthArray16[pri]] = layerBase + \
i2;\\n          depthArray16[pri] += 1;\\n        }\\n      }\\n      \
layerBase += layerSplats;\\n    }\\n    if (depthArray16[DEPTH_SIZE_16 - 1] \
!== activeSplats) {\\n      throw new Error(\\n        `Expected \
${activeSplats} active splats but got ${depthArray16[DEPTH_SIZE_16 - 1]}`\\n  \
    );\\n    }\\n    return { activeSplats, ordering };\\n  }\\n  const \
messageBuffer = [];\\n  function bufferMessage(event) {\\n    \
messageBuffer.push(event);\\n  }\\n  async function initialize() {\\n    \
self.addEventListener(\"message\", bufferMessage);\\n    await \
__wbg_init();\\n    self.removeEventListener(\"message\", bufferMessage);\\n  \
  self.addEventListener(\"message\", onMessage);\\n    for (const event of \
messageBuffer) {\\n      onMessage(event);\\n    }\\n    messageBuffer.length \
= 0;\\n  }\\n  initialize().catch(console.error);\\n})();\\n//# \
sourceMappingURL=worker-CVv1zjxY.js.map\\n',Qi=\"undefined\"!=typeof \
self&&self.Blob&&new \
Blob([mi],{type:\"text/javascript;charset=utf-8\"});function yi(n){let \
t;try{if(t=Qi&&(self.URL||self.webkitURL).createObjectURL(Qi),!t)throw\"\";co\
nst e=new Worker(t,{name:null==n?void 0:n.name});return \
e.addEventListener(\"error\",(()=>{(self.URL||self.webkitURL).revokeObjectURL\
(t)})),e}catch(t){return new \
Worker(\"data:text/javascript;charset=utf-8,\"+encodeURIComponent(mi),{name:n\
ull==n?void \
0:n.name})}finally{t&&(self.URL||self.webkitURL).revokeObjectURL(t)}}class \
xi{constructor(){this.messages={},this.messageIdNext=0,this.worker=new \
yi,this.worker.onmessage=n=>this.onMessage(n)}makeMessageId(){return++this.me\
ssageIdNext}makeMessagePromiseId(){const n=this.makeMessageId(),t=new \
Promise(((t,e)=>{this.messages[n]={resolve:t,reject:e}}));return{id:n,promise\
:t}}onMessage(n){const{id:t,result:e,error:A}=n.data,s=this.messages[t];s&&(d\
elete this.messages[t],A?s.reject(A):s.resolve(e))}async \
call(n,t){const{id:e,promise:A}=this.makeMessagePromiseId();return \
this.worker.postMessage({name:n,args:t,id:e},{transfer:xe(t)}),A}}let \
wi=4,bi=0;const vi=[],Si=[];async function Di(n){const t=await async \
function(){const n=vi.shift();if(n)return n;if(bi<wi){const n=new xi;return \
bi+=1,n}return new Promise((n=>{Si.push(n)}))}();try{return await \
n(t)}finally{!function(n){if(bi>wi)return void(bi-=1);const \
t=Si.shift();t?t(n):vi.push(n)}(t)}}class Mi extends \
a{constructor(n){super(n),this.fileLoader=new r(n)}load(n,t,e,A){const \
s=this.manager.resolveURL((this.path??\"\")+(n??\"\")),a=new \
Headers(this.requestHeader),r=this.withCredentials?\"include\":\"same-origin\
\",i=new Request(s,{headers:a,credentials:r});let \
o=this.fileType;this.manager.itemStart(s),ki(i,e).then((async n=>{var A;const \
i=[new \
ProgressEvent(\"progress\",{lengthComputable:!0,loaded:n.byteLength,total:n.b\
yteLength})];function c(){if(e){const \
n=i.every((n=>n.lengthComputable||0===n.loaded&&0===n.total)),t=i.reduce(((n,\
t)=>n+t.loaded),0),A=i.reduce(((n,t)=>n+t.total),0);e(new \
ProgressEvent(\"progress\",{lengthComputable:n,loaded:t,total:A}))}}const \
l={},u=[],g=Fi(n);if(\"pcsogs\"===o&&void 0===g)throw new Error(\"Invalid PC \
SOGS file\");if(void 0!==g){o=\"pcsogs\";for(const n \
of[\"means\",\"scales\",\"quats\",\"sh0\",\"shN\"]){const \
t=g[n];if(t)for(const n of t.files){const t=new \
URL(n,s).toString(),e=i.length;i.push(new \
ProgressEvent(\"progress\")),this.manager.itemStart(t);const A=ki(new \
Request(t,{headers:a,credentials:r}),(n=>{i[e]=n,c()})).then((t=>{l[n]=t})).c\
atch((n=>{throw \
this.manager.itemError(t),n})).finally((()=>{this.manager.itemEnd(t)}));u.pus\
h(A)}}}if(await Promise.all(u),t){const e=(null==(A=this.packedSplats)?void \
0:A.splatEncoding)??Ri,a=await \
Ni({input:n,extraFiles:l,fileType:o,pathOrUrl:s,splatEncoding:e});this.packed\
Splats?(this.packedSplats.initialize(a),t(this.packedSplats)):t(new \
Ui(a))}})).catch((n=>{this.manager.itemError(s),null==A||A(n)})).finally((()=\
>{this.manager.itemEnd(s)}))}async loadAsync(n,t){return new \
Promise(((e,A)=>{this.load(n,(n=>{e(n)}),t,A)}))}parse(n){return new \
Wr({packedSplats:n})}}async function ki(n,t){const e=await \
fetch(n);if(!e.ok)throw new Error(`${e.status} \"${e.statusText}\" fetching \
URL: ${n.url}`);if(!e.body)throw new Error(`Response body is null for URL: \
${n.url}`);const \
A=e.body.getReader(),s=Number.parseInt(e.headers.get(\"Content-Length\")||\"0\
\"),a=Number.isNaN(s)?0:s;let r=0;const \
i=[];for(;;){const{done:n,value:e}=await \
A.read();if(n)break;i.push(e),r+=e.length,t&&t(new \
ProgressEvent(\"progress\",{lengthComputable:0!==a,loaded:r,total:a}))}const \
o=new Uint8Array(r);let c=0;for(const n of i)o.set(n,c),c+=n.length;return \
o.buffer}function _i(n){const t=new \
DataView(n.buffer);if(7957616==(16777215&t.getUint32(0,!0)))return\"ply\";if(\
559903==(16777215&t.getUint32(0,!0))){const t=Je(n,4);return 1347635022===new \
DataView(t.buffer).getUint32(0,!0)?\"spz\":void 0}return \
67324752===t.getUint32(0,!0)&&function(n){try{const t=n instanceof \
ArrayBuffer?new Uint8Array(n):n;let e=null;const A=function(n,t){for(var \
e={},A=n.length-22;101010256!=J(n,A);--A)(!A||n.length-A>65558)&&Y(13);var \
s=L(n,A+8);if(!s)return{};var a=J(n,A+16),r=4294967295==a||65535==s;if(r){var \
i=J(n,A-12);(r=101075792==J(n,i))&&(s=J(n,i+32),a=J(n,i+48))}for(var \
o=t&&t.filter,c=0;c<s;++c){var \
l=O(n,a,r),u=l[0],g=l[1],h=l[2],I=l[3],d=l[4],C=l[5],B=X(n,C);a=d,o&&!o({name\
:I,size:g,originalSize:h,compression:u})||(u?8==u?e[I]=V(n.subarray(B,B+g),{o\
ut:new p(h)}):Y(14,\"unknown compression type \"+u):e[I]=G(n,B,B+g))}return \
e}(t,{filter:({name:n})=>\"meta.json\"===n.split(/[\\\\/]/).pop()&&(e=n,!0)})\
;if(!e)return;const \
s=Fi(A[e]);if(!s)return;return{name:e,json:s}}catch{return}}(n)?\"pcsogszip\"\
:void 0}function Ti(n){const t=function(n){const \
t=n.split(/[?#]/,1)[0],e=Math.max(t.lastIndexOf(\"/\"),t.lastIndexOf(\"\\\\\"\
)),A=t.slice(e+1),s=A.lastIndexOf(\".\");return \
s<=0||s===A.length-1?\"\":A.slice(s+1).toLowerCase()}(n);return\"ply\"===t?\"\
ply\":\"spz\"===t?\"spz\":\"splat\"===t?\"splat\":\"ksplat\"===t?\"ksplat\":\
\"sog\"===t?\"pcsogszip\":void 0}function Fi(n){try{let \
t;if(\"string\"==typeof n)t=n;else{const e=n instanceof ArrayBuffer?new \
Uint8Array(n):n;if(e.length>65536)return;t=(new TextDecoder).decode(e)}const \
e=JSON.parse(t);if(!e||\"object\"!=typeof e||Array.isArray(e))return;const \
A=2===e.version;for(const n \
of[\"means\",\"scales\",\"quats\",\"sh0\"]){if(!e[n]||\"object\"!=typeof \
e[n]||Array.isArray(e[n]))return;if(A){if(!e[n].files)return;if((\"scales\"==\
=n||\"sh0\"===n)&&!e[n].codebook)return;if(!(\"means\"!==n||e[n].mins&&e[n].m\
axs))return}else{if(!e[n].shape||!e[n].files)return;if(!(\"quats\"===n||e[n].\
mins&&e[n].maxs))return}}return e}catch{return}}async function \
Ni({input:n,extraFiles:t,fileType:e,pathOrUrl:A,splatEncoding:s}){const a=n \
instanceof ArrayBuffer?new Uint8Array(n):n;let \
r=e;switch(e||(r=_i(a),!r&&A&&(r=Ti(A))),r){case\"ply\":{const n=new \
ii({fileBytes:a});await n.parseHeader();const \
t=Me(n.numSplats).maxSplats,e={fileBytes:a,packedArray:new \
Uint32Array(4*t),splatEncoding:s};return await Di((async \
n=>{const{packedArray:t,numSplats:A,extra:s}=await \
n.call(\"unpackPly\",e);return{packedArray:t,numSplats:A,extra:s}}))}case\"sp\
z\":return await Di((async n=>{const{packedArray:t,numSplats:e,extra:A}=await \
n.call(\"decodeSpz\",{fileBytes:a,splatEncoding:s});return{packedArray:t,numS\
plats:e,extra:A}}));case\"splat\":return await Di((async \
n=>{const{packedArray:t,numSplats:e}=await \
n.call(\"decodeAntiSplat\",{fileBytes:a,splatEncoding:s});return{packedArray:\
t,numSplats:e}}));case\"ksplat\":return await Di((async \
n=>{const{packedArray:t,numSplats:e,extra:A}=await \
n.call(\"decodeKsplat\",{fileBytes:a,splatEncoding:s});return{packedArray:t,n\
umSplats:e,extra:A}}));case\"pcsogs\":return await Di((async \
n=>{const{packedArray:e,numSplats:A,extra:r}=await \
n.call(\"decodePcSogs\",{fileBytes:a,extraFiles:t,splatEncoding:s});return{pa\
ckedArray:e,numSplats:A,extra:r}}));case\"pcsogszip\":return await Di((async \
n=>{const{packedArray:t,numSplats:e,extra:A}=await \
n.call(\"decodePcSogsZip\",{fileBytes:a,splatEncoding:s});return{packedArray:\
t,numSplats:e,extra:A}}));default:throw new Error(`Unknown splat file type: \
${r}`)}}const \
Ri={rgbMin:0,rgbMax:1,lnScaleMin:sn,lnScaleMax:9,sh1Min:-1,sh1Max:1,sh2Min:-1\
,sh2Max:1,sh3Min:-1,sh3Max:1},Gi=class \
t{constructor(t={}){this.maxSplats=0,this.numSplats=0,this.packedArray=null,t\
his.isInitialized=!1,this.target=null,this.source=null,this.needsUpdate=!0,th\
is.extra={},this.dyno=new \
Yi({packedSplats:this}),this.dynoRgbMinMaxLnScaleMinMax=new \
qt({key:\"rgbMinMaxLnScaleMinMax\",value:new \
n.Vector4(0,1,sn,9),update:n=>{var t,e,A,s;return \
n.set((null==(t=this.splatEncoding)?void \
0:t.rgbMin)??0,(null==(e=this.splatEncoding)?void \
0:e.rgbMax)??1,(null==(A=this.splatEncoding)?void \
0:A.lnScaleMin)??sn,(null==(s=this.splatEncoding)?void \
0:s.lnScaleMax)??9),n}}),this.dynoSh1MinMax=new \
_t({key:\"sh1MinMax\",value:new n.Vector2(-1,1),update:n=>{var t,e;return \
n.set((null==(t=this.splatEncoding)?void \
0:t.sh1Min)??-1,(null==(e=this.splatEncoding)?void \
0:e.sh1Max)??1),n}}),this.dynoSh2MinMax=new _t({key:\"sh2MinMax\",value:new \
n.Vector2(-1,1),update:n=>{var t,e;return \
n.set((null==(t=this.splatEncoding)?void \
0:t.sh2Min)??-1,(null==(e=this.splatEncoding)?void \
0:e.sh2Max)??1),n}}),this.dynoSh3MinMax=new _t({key:\"sh3MinMax\",value:new \
n.Vector2(-1,1),update:n=>{var t,e;return \
n.set((null==(t=this.splatEncoding)?void \
0:t.sh3Min)??-1,(null==(e=this.splatEncoding)?void \
0:e.sh3Max)??1),n}}),this.initialized=Promise.resolve(this),this.reinitialize\
(t)}reinitialize(n){this.isInitialized=!1,this.extra={},this.splatEncoding=n.\
splatEncoding,n.url||n.fileBytes||n.construct?this.initialized=this.asyncInit\
ialize(n).then((()=>(this.isInitialized=!0,this))):(this.initialize(n),this.i\
sInitialized=!0,this.initialized=Promise.resolve(this))}initialize(n){n.packe\
dArray?(this.packedArray=n.packedArray,this.maxSplats=Math.floor(this.packedA\
rray.length/4),this.maxSplats=Math.floor(this.maxSplats/cn)*cn,this.numSplats\
=Math.min(this.maxSplats,n.numSplats??Number.POSITIVE_INFINITY)):(this.maxSpl\
ats=n.maxSplats??0,this.numSplats=0),this.extra=n.extra??{}}async \
asyncInitialize(n){const{url:t,fileBytes:e,construct:A}=n;if(t){const n=new \
Mi;n.packedSplats=this,await n.loadAsync(t)}else if(e){const A=await \
Ni({input:e,fileType:n.fileType,pathOrUrl:n.fileName??t,splatEncoding:n.splat\
Encoding??Ri});this.initialize(A)}if(A){const n=A(this);n instanceof \
Promise&&await \
n}}dispose(){this.target&&(this.target.dispose(),this.target=null),this.sourc\
e&&(this.source.dispose(),this.source=null)}ensureSplats(n){const \
t=n<=this.maxSplats?this.maxSplats:Math.max(n,2*this.maxSplats),e=this.packed\
Array?this.packedArray.length/4:0;if(!this.packedArray||t>e){this.maxSplats=M\
e(t).maxSplats;const n=new \
Uint32Array(4*this.maxSplats);this.packedArray&&n.set(this.packedArray),this.\
packedArray=n}return this.packedArray}ensureSplatsSh(n,t){let \
e,A;if(0===n)return this.ensureSplats(t);if(1===n)e=2,A=\"sh1\";else \
if(2===n)e=4,A=\"sh2\";else{if(3!==n)throw new Error(`Invalid level: \
${n}`);e=4,A=\"sh3\"}let s=this.extra[A]?this.extra[A].length/e:0;const \
a=t<=s?s:Math.max(t,2*s);if(!this.extra[A]||a>s){s=Me(a).maxSplats;const \
n=new \
Uint32Array(s*e);this.extra[A]&&n.set(this.extra[A]),this.extra[A]=n}return \
this.extra[A]}getSplat(n){if(!this.packedArray||n>=this.numSplats)throw new \
Error(\"Invalid index\");return \
De(this.packedArray,n,this.splatEncoding)}setSplat(n,t,e,A,s,a){be(this.ensur\
eSplats(n+1),n,t.x,t.y,t.z,e.x,e.y,e.z,A.x,A.y,A.z,A.w,s,a.r,a.g,a.b),this.nu\
mSplats=Math.max(this.numSplats,n+1)}pushSplat(n,t,e,A,s){be(this.ensureSplat\
s(this.numSplats+1),this.numSplats,n.x,n.y,n.z,t.x,t.y,t.z,e.x,e.y,e.z,e.w,A,\
s.r,s.g,s.b),++this.numSplats}forEachSplat(n){if(this.packedArray&&this.numSp\
lats)for(let t=0;t<this.numSplats;++t){const \
e=De(this.packedArray,t,this.splatEncoding);n(t,e.center,e.scales,e.quaternio\
n,e.opacity,e.color)}}ensureGenerate(t){if(this.target&&(t??1)<=this.maxSplat\
s)return!1;this.dispose();const \
e=Me(t??1),{width:A,height:s,depth:a}=e;return \
this.maxSplats=e.maxSplats,this.target=new \
n.WebGLArrayRenderTarget(A,s,a,{depthBuffer:!1,stencilBuffer:!1,generateMipma\
ps:!1,magFilter:n.NearestFilter,minFilter:n.NearestFilter}),this.target.textu\
re.format=n.RGBAIntegerFormat,this.target.texture.type=n.UnsignedIntType,this\
.target.texture.internalFormat=\"RGBA32UI\",this.target.scissorTest=!0,!0}gen\
erateMapping(n){let t=0;const e=n.map((n=>{const \
e=t,A=Math.ceil(n/cn)*cn;return \
t+=A,{base:e,count:n}}));return{maxSplats:t,mapping:e}}getTexture(){if(this.t\
arget)return this.target.texture;if(this.source||this.packedArray){return \
this.maybeUpdateSource()}return \
t.getEmpty()}maybeUpdateSource(){if(!this.packedArray)throw new Error(\"No \
packed \
splats\");if(this.needsUpdate||!this.source){if(this.needsUpdate=!1,this.sour\
ce){const{width:n,height:t,depth:e}=this.source.image;this.maxSplats!==n*t*e&\
&(this.source.dispose(),this.source=null)}if(this.source)this.packedArray.buf\
fer!==this.source.image.data.buffer&&(this.source.image.data=new \
Uint8Array(this.packedArray.buffer));else{const{width:t,height:e,depth:A}=Me(\
this.maxSplats);this.source=new \
n.DataArrayTexture(this.packedArray,t,e,A),this.source.format=n.RGBAIntegerFo\
rmat,this.source.type=n.UnsignedIntType,this.source.internalFormat=\"RGBA32UI\
\",this.source.needsUpdate=!0}this.source.needsUpdate=!0}return \
this.source}static \
getEmpty(){if(!t.emptySource){const{width:e,height:A,depth:s,maxSplats:a}=Me(\
1),r=new Uint32Array(4*a);t.emptySource=new \
n.DataArrayTexture(r,e,A,s),t.emptySource.format=n.RGBAIntegerFormat,t.emptyS\
ource.type=n.UnsignedIntType,t.emptySource.internalFormat=\"RGBA32UI\",t.empt\
ySource.needsUpdate=!0}return t.emptySource}prepareProgramMaterial(n){let \
e=t.generatorProgram.get(n);if(!e){const \
A=Vn({index:\"int\"},{output:\"uvec4\"},(({index:t})=>{n.inputs.index=t;const \
e=n.outputs.gsplat;return{output:ft(e,this.dynoRgbMinMaxLnScaleMinMax)}}));t.\
programTemplate||(t.programTemplate=new Ve(\"precision highp \
float;\\nprecision highp int;\\nprecision highp sampler2D;\\nprecision highp \
usampler2D;\\nprecision highp isampler2D;\\nprecision highp \
sampler2DArray;\\nprecision highp usampler2DArray;\\nprecision highp \
isampler2DArray;\\nprecision highp sampler3D;\\nprecision highp \
usampler3D;\\nprecision highp isampler3D;\\n\\n#include \
<splatDefines>\\n\\nuniform uint targetLayer;\\nuniform int \
targetBase;\\nuniform int targetCount;\\n\\nout uvec4 target;\\n\\n{{ GLOBALS \
}}\\n\\nvoid produceSplat(int index) {\\n    {{ STATEMENTS }}\\n}\\n\\nvoid \
main() {\\n    int targetIndex = int(targetLayer << SPLAT_TEX_LAYER_BITS) + \
int(uint(gl_FragCoord.y) << SPLAT_TEX_WIDTH_BITS) + int(gl_FragCoord.x);\\n   \
 int index = targetIndex - targetBase;\\n\\n    if ((index >= 0) && (index < \
targetCount)) {\\n        produceSplat(index);\\n    } else {\\n        \
target = uvec4(0u, 0u, 0u, 0u);\\n    }\\n}\")),e=new \
Ke({graph:A,inputs:{index:\"index\"},outputs:{output:\"target\"},template:t.p\
rogramTemplate}),Object.assign(e.uniforms,{targetLayer:{value:0},targetBase:{\
value:0},targetCount:{value:0}}),t.generatorProgram.set(n,e)}const \
A=e.prepareMaterial();return \
t.fullScreenQuad.material=A,{program:e,material:A}}saveRenderState(n){return{\
xrEnabled:n.xr.enabled,autoClear:n.autoClear}}resetRenderState(n,t){n.setRend\
erTarget(null),n.xr.enabled=t.xrEnabled,n.autoClear=t.autoClear}generate({gen\
erator:n,base:e,count:A,renderer:s}){if(!this.target)throw new Error(\"Target \
must be initialized with ensureSplats\");if(e+A>this.maxSplats)throw new \
Error(\"Base + count exceeds \
maxSplats\");const{program:a,material:r}=this.prepareProgramMaterial(n);a.upd\
ate();const \
i=this.saveRenderState(s),o=Math.ceil((e+A)/cn)*cn,c=cn*ln;for(r.uniforms.tar\
getBase.value=e,r.uniforms.targetCount.value=A;e<o;){const \
n=Math.floor(e/c);r.uniforms.targetLayer.value=n;const \
A=n*c,a=Math.floor((e-A)/cn),i=Math.min(ln,Math.ceil((o-A)/cn));this.target.s\
cissor.set(0,a,cn,i-a),s.setRenderTarget(this.target,n),s.xr.enabled=!1,s.aut\
oClear=!1,t.fullScreenQuad.render(s),e+=cn*(i-a)}return \
this.resetRenderState(s,i),{nextBase:o}}};Gi.emptySource=null,Gi.programTempl\
ate=null,Gi.generatorProgram=new Map,Gi.fullScreenQuad=new h(new \
n.RawShaderMaterial({visible:!1}));let Ui=Gi;class Yi extends \
xt{constructor({packedSplats:t}={}){super({key:\"packedSplats\",type:tt,globa\
ls:()=>[ct],value:{texture:Ui.getEmpty(),numSplats:0,rgbMinMaxLnScaleMinMax:n\
ew n.Vector4(0,1,sn,9)},update:n=>{var t,e,A,s,a,r,i,o,c,l;return \
n.texture=(null==(t=this.packedSplats)?void \
0:t.getTexture())??Ui.getEmpty(),n.numSplats=(null==(e=this.packedSplats)?voi\
d \
0:e.numSplats)??0,n.rgbMinMaxLnScaleMinMax.set((null==(s=null==(A=this.packed\
Splats)?void 0:A.splatEncoding)?void \
0:s.rgbMin)??0,(null==(r=null==(a=this.packedSplats)?void \
0:a.splatEncoding)?void \
0:r.rgbMax)??1,(null==(o=null==(i=this.packedSplats)?void \
0:i.splatEncoding)?void \
0:o.lnScaleMin)??sn,(null==(l=null==(c=this.packedSplats)?void \
0:c.splatEncoding)?void 0:l.lnScaleMax)??9),n}}),this.packedSplats=t}}class \
qi extends \
n.InstancedBufferGeometry{constructor(t,e){super(),this.ordering=t,this.setAt\
tribute(\"position\",new n.BufferAttribute(zi,3)),this.setIndex(new \
n.BufferAttribute(Li,1)),this._maxInstanceCount=t.length,this.instanceCount=e\
,this.attribute=new \
n.InstancedBufferAttribute(t,1,!1,1),this.attribute.setUsage(n.DynamicDrawUsa\
ge),this.setAttribute(\"splatIndex\",this.attribute)}update(n,t){this.orderin\
g=n,this.attribute.array=n,this.instanceCount=t,this.attribute.addUpdateRange\
(0,t),this.attribute.needsUpdate=!0}}const zi=new \
Float32Array([-1,-1,0,1,-1,0,1,1,0,-1,1,0]),Li=new \
Uint16Array([0,1,2,0,2,3]),Ji=class \
t{constructor(t){if(this.lastTime=null,this.encodeLinear=!1,this.superXY=1,th\
is.display=null,this.sorting=null,this.pending=null,this.sortingCheck=!1,this\
.readback16=new Uint16Array(0),this.readback32=new \
Uint32Array(0),this.spark=t.spark,this.camera=t.camera,this.viewToWorld=t.vie\
wToWorld??new \
n.Matrix4,t.target){const{width:e,height:A,doubleBuffer:s}=t.target,a=Math.ma\
x(1,Math.min(4,t.target.superXY??1));if(this.superXY=a,e*a>8192||A*a>8192)thr\
ow new Error(\"Target size too large\");this.target=new \
n.WebGLRenderTarget(e*a,A*a,{format:n.RGBAFormat,type:n.UnsignedByteType,colo\
rSpace:n.SRGBColorSpace}),s&&(this.back=new \
n.WebGLRenderTarget(e*a,A*a,{format:n.RGBAFormat,type:n.UnsignedByteType,colo\
rSpace:n.SRGBColorSpace})),this.encodeLinear=!0}this.onTextureUpdated=t.onTex\
tureUpdated,this.sortRadial=t.sortRadial??!0,this.sortDistance=t.sortDistance\
,this.sortCoorient=t.sortCoorient,this.depthBias=t.depthBias,this.sort360=t.s\
ort360,this.sort32=t.sort32,this.stochastic=t.stochastic??!1,this.orderingFre\
elist=new we({allocate:n=>new \
Uint32Array(n),valid:(n,t)=>n.length===t}),this.autoUpdate=!1,this.setAutoUpd\
ate(t.autoUpdate??!1)}dispose(){var \
n;this.setAutoUpdate(!1),this.target&&(this.target.dispose(),this.target=void \
0),this.back&&(this.back.dispose(),this.back=void \
0),this.display&&(this.spark.releaseAccumulator(this.display.accumulator),thi\
s.display.geometry.dispose(),this.display=null),(null==(n=this.pending)?void \
0:n.accumulator)&&(this.spark.releaseAccumulator(this.pending.accumulator),th\
is.pending=null)}setAutoUpdate(n){!this.autoUpdate&&n?this.spark.autoViewpoin\
ts.push(this):this.autoUpdate&&!n&&(this.spark.autoViewpoints=this.spark.auto\
Viewpoints.filter((n=>n!==this))),this.autoUpdate=n}async \
prepare({scene:n,camera:t,viewToWorld:e,update:A,forceOrigin:s}){var \
a;for(e?this.viewToWorld=e:(this.camera=t??this.camera,this.camera&&(this.cam\
era.updateMatrixWorld(),this.viewToWorld=this.camera.matrixWorld.clone()));A?\
?1;){const t=s?this.viewToWorld:void \
0;if(this.spark.updateInternal({scene:n,originToWorld:t}))break;await new \
Promise((n=>setTimeout(n,10)))}const \
r=this.spark.active;r!==(null==(a=this.display)?void \
0:a.accumulator)&&(this.spark.active.refCount+=1),await \
this.sortUpdate({accumulator:r,viewToWorld:this.viewToWorld})}renderTarget({s\
cene:t,camera:e}){var A;const s=this.back??this.target;if(!s)throw new \
Error(\"Must initialize SparkViewpoint with \
target\");if(!(e=e??this.camera))throw new Error(\"Must provide \
camera\");if(e instanceof n.PerspectiveCamera){const t=(new \
n.PerspectiveCamera).copy(e,!1);t.aspect=s.width/s.height,t.updateProjectionM\
atrix(),e=t}this.viewToWorld=e.matrixWorld.clone();try{this.spark.renderer.se\
tRenderTarget(s),this.spark.prepareViewpoint(this),this.spark.renderer.render\
(t,e)}finally{this.spark.prepareViewpoint(this.spark.defaultView),this.spark.\
renderer.setRenderTarget(null)}s!==this.target&&([this.target,this.back]=[thi\
s.back,this.target]),null==(A=this.onTextureUpdated)||A.call(this,s.texture)}\
async readTarget(){if(!this.target)throw new Error(\"Must initialize \
SparkViewpoint with \
target\");const{width:n,height:t}=this.target,e=n*t*4;(!this.superPixels||thi\
s.superPixels.length<e)&&(this.superPixels=new Uint8Array(e)),await \
this.spark.renderer.readRenderTargetPixelsAsync(this.target,0,0,n,t,this.supe\
rPixels);const{superXY:A}=this;if(1===A)return this.superPixels;const \
s=n/A,a=t/A,r=s*a*4;(!this.pixels||this.pixels.length<r)&&(this.pixels=new \
Uint8Array(r));const{superPixels:i,pixels:o}=this,c=A*A;for(let \
n=0;n<a;n++){const t=n*s;for(let e=0;e<s;e++){const s=e*A;let \
a=0,r=0,l=0,u=0;for(let t=0;t<A;t++){const \
e=(n*A+t)*this.target.width;for(let n=0;n<A;n++){const \
t=4*(e+s+n);a+=i[t],r+=i[t+1],l+=i[t+2],u+=i[t+3]}}const \
g=4*(t+e);o[g]=a/c,o[g+1]=r/c,o[g+2]=l/c,o[g+3]=u/c}}return o}async \
prepareRenderPixels({scene:n,camera:t,viewToWorld:e,update:A,forceOrigin:s}){\
return await \
this.prepare({scene:n,camera:t,viewToWorld:e,update:A,forceOrigin:s}),this.re\
nderTarget({scene:n,camera:t}),this.readTarget()}autoPoll({accumulator:n}){va\
r \
t,e,A,s;this.camera&&(this.camera.updateMatrixWorld(),this.viewToWorld=this.c\
amera.matrixWorld.clone());let \
a=!1,r=!1;if(this.display){if(n){a=!0;const{mappingVersion:t}=this.display.ac\
cumulator;n.mappingVersion===t&&(this.spark.releaseAccumulator(this.display.a\
ccumulator),this.display.accumulator=n,r=!0)}}else a=!0;const \
i=(null==(t=this.sorting)?void 0:t.viewToWorld)??(null==(e=this.display)?void \
0:e.viewToWorld);i&&!Ge({matrix1:this.viewToWorld,matrix2:i,maxDistance:this.\
sortDistance??.01,minCoorient:this.sortCoorient??this.sortRadial?.99:.999})&&\
(a=!0),a&&(n&&(n.refCount+=1),n&&(null==(A=this.pending)?void \
0:A.accumulator)&&this.pending.accumulator!==(null==(s=this.display)?void \
0:s.accumulator)&&this.spark.releaseAccumulator(this.pending.accumulator),thi\
s.pending={accumulator:n,viewToWorld:this.viewToWorld,displayed:r},this.drive\
Sort())}async driveSort(){for(var \
n;;){if(this.sorting||!this.pending)return;const{viewToWorld:t,displayed:e}=t\
his.pending;let A=this.pending.accumulator??(null==(n=this.display)?void \
0:n.accumulator);if(A||(A=this.spark.active,A.refCount+=1),this.pending=null,\
!A)throw new Error(\"No accumulator to \
sort\");this.sorting={viewToWorld:t},await \
this.sortUpdate({accumulator:A,viewToWorld:t,displayed:e}),this.sorting=null}\
}async \
sortUpdate({accumulator:n,viewToWorld:e,displayed:A=!1}){if(this.sortingCheck\
)throw new Error(\"Only one sort at a \
time\");this.sortingCheck=!0,n=n??this.spark.active;const{numSplats:s,maxSpla\
ts:a}=n.splats;let \
r=0,i=this.orderingFreelist.alloc(a);if(this.stochastic){r=s;for(let \
n=0;n<s;++n)i[n]=n}else \
if(s>0){const{reader:A,doubleSortReader:o,sort32Reader:c,dynoSortRadial:l,dyn\
oOrigin:u,dynoDirection:g,dynoDepthBias:h,dynoSort360:p,dynoSplats:I}=t.makeS\
orter(),d=this.sort32??!1;let \
C;if(d)this.readback32=A.ensureBuffer(a,this.readback32),C=this.readback32;el\
se{const \
n=Math.ceil(a/2);this.readback16=A.ensureBuffer(n,this.readback16),C=this.rea\
dback16}const \
B=n.toWorld.clone().invert(),f=e.clone().premultiply(B);l.value=!!this.sort36\
0||this.sortRadial,u.value.set(0,0,0).applyMatrix4(f),g.value.set(0,0,-1).app\
lyMatrix4(f).sub(u.value).normalize(),h.value=this.depthBias??1,p.value=this.\
sort360??!1,I.packedSplats=n.splats;const E=d?c:o,m=d?s:Math.ceil(s/2);await \
A.renderReadback({renderer:this.spark.renderer,reader:E,count:m,readback:C});\
const Q=await Di((async n=>{const \
t=d?\"sort32Splats\":\"sortDoubleSplats\";return \
n.call(t,{maxSplats:a,numSplats:s,readback:C,ordering:i})}));d?this.readback3\
2=Q.readback:this.readback16=Q.readback,i=Q.ordering,r=Q.activeSplats}this.up\
dateDisplay({accumulator:n,viewToWorld:e,ordering:i,activeSplats:r,displayed:\
A}),this.sortingCheck=!1}updateDisplay({accumulator:n,viewToWorld:t,ordering:\
e,activeSplats:A,displayed:s=!1}){if(this.display){s||n===this.display.accumu\
lator||(this.spark.releaseAccumulator(this.display.accumulator),this.display.\
accumulator=n),this.display.viewToWorld=t;const \
a=this.display.geometry.ordering;a.length===e.length?this.display.geometry.up\
date(e,A):(this.display.geometry.dispose(),this.display.geometry=new \
qi(e,A)),this.orderingFreelist.free(a)}else \
this.display={accumulator:n,viewToWorld:t,geometry:new \
qi(e,A)};this.spark.viewpoint===this&&this.spark.prepareViewpoint(this)}stati\
c makeSorter(){if(!t.dynos){const e=new wt({value:!0}),A=new Rt({value:new \
n.Vector3}),s=new Rt({value:new n.Vector3}),a=new St({value:1}),r=new \
wt({value:!1}),i=new Yi,o=new \
Fr,c=Vn({index:\"int\"},{rgba8:\"vec4\"},(({index:n})=>{if(!n)throw new \
Error(\"No index\");const \
t={sortRadial:e,sortOrigin:A,sortDirection:s,sortDepthBias:a,sort360:r},o=bA(\
n,qn(\"int\",2)),c=Vi({gsplat:et(i,o),...t}),l=Vi({gsplat:et(i,xA(o,qn(\"int\
\",1))),...t}),u=Ba({vectorType:\"vec2\",x:c,y:l});return{rgba8:Gs(Rs(u))}}))\
,l=Vn({index:\"int\"},{rgba8:\"vec4\"},(({index:n})=>{if(!n)throw new \
Error(\"No index\");const \
t={sortRadial:e,sortOrigin:A,sortDirection:s,sortDepthBias:a,sort360:r},o=Vi(\
{gsplat:et(i,n),...t});return{rgba8:Gs(Ns(o))}}));t.dynos={dynoSortRadial:e,d\
ynoOrigin:A,dynoDirection:s,dynoDepthBias:a,dynoSort360:r,dynoSplats:i,reader\
:o,doubleSortReader:c,sort32Reader:l}}return t.dynos}};Ji.EMPTY_TEXTURE=new \
n.Texture,Ji.dynos=null;let Hi=Ji;const Ki=Xn(\"\\n  float computeSort(Gsplat \
gsplat, bool sortRadial, vec3 sortOrigin, vec3 sortDirection, float \
sortDepthBias, bool sort360) {\\n    if (!isGsplatActive(gsplat.flags)) {\\n  \
    return INFINITY;\\n    }\\n\\n    vec3 center = gsplat.center - \
sortOrigin;\\n    float biasedDepth = dot(center, sortDirection) + \
sortDepthBias;\\n    if (!sort360 && (biasedDepth <= 0.0)) {\\n      return \
INFINITY;\\n    }\\n\\n    return sortRadial ? length(center) : \
biasedDepth;\\n  }\\n\");function \
Vi({gsplat:n,sortRadial:t,sortOrigin:e,sortDirection:A,sortDepthBias:s,sort36\
0:a}){return \
$n({inTypes:{gsplat:nt,sortRadial:\"bool\",sortOrigin:\"vec3\",sortDirection:\
\"vec3\",sortDepthBias:\"float\",sort360:\"bool\"},outTypes:{metric:\"float\"\
},globals:()=>[ot,Ki],inputs:{gsplat:n,sortRadial:t,sortOrigin:e,sortDirectio\
n:A,sortDepthBias:s,sort360:a},statements:({inputs:n,outputs:t})=>{const{gspl\
at:e,sortRadial:A,sortOrigin:s,sortDirection:a,sortDepthBias:r,sort360:i}=n;r\
eturn Zn(`\\n        ${t.metric} = computeSort(${e}, ${A}, ${s}, ${a}, ${r}, \
${i});\\n      `)}}).outputs.metric}class $i{constructor(){this.splats=new \
Ui,this.toWorld=new \
n.Matrix4,this.mapping=[],this.refCount=0,this.splatsVersion=-1,this.mappingV\
ersion=-1}ensureGenerate(n){this.splats.ensureGenerate(n)&&(this.mapping=[])}\
generateSplats({renderer:n,modifier:t,generators:e,forceUpdate:A,originToWorl\
d:s}){const a=this.mapping.reduce(((n,t)=>(n.set(t.node,t),n)),new Map);let \
r=0,i=0;for(const{node:s,generator:o,version:c,base:l,count:u}of e){const \
e=a.get(s);if((A||o!==(null==e?void 0:e.generator)||c!==(null==e?void \
0:e.version)||l!==(null==e?void 0:e.base)||u!==(null==e?void \
0:e.count))&&o&&u>0){const \
e=t.apply(o);try{this.splats.generate({generator:e,base:l,count:u,renderer:n}\
)}catch(n){s.generator=void \
0,s.generatorError=n}r+=1}i=Math.max(i,l+u)}return \
this.splats.numSplats=i,this.toWorld=s,this.mapping=e,0!==r}hasCorrespondence\
(n){return \
this.mapping.length===n.mapping.length&&this.mapping.every((({node:t,base:e,c\
ount:A},s)=>{const{node:a,base:r,count:i}=n.mapping[s];return \
t===a&&e===r&&A===i}))}}let ji=null;const Zi=class t extends \
n.Mesh{constructor(e){const \
A=t.makeUniforms(),s=(ji||(n.ShaderChunk.splatDefines=\"const float \
LN_SCALE_MIN = -12.0;\\nconst float LN_SCALE_MAX = 9.0;\\n\\nconst uint \
SPLAT_TEX_WIDTH_BITS = 11u;\\nconst uint SPLAT_TEX_HEIGHT_BITS = 11u;\\nconst \
uint SPLAT_TEX_DEPTH_BITS = 11u;\\nconst uint SPLAT_TEX_LAYER_BITS = \
SPLAT_TEX_WIDTH_BITS + SPLAT_TEX_HEIGHT_BITS;\\n\\nconst uint SPLAT_TEX_WIDTH \
= 1u << SPLAT_TEX_WIDTH_BITS;\\nconst uint SPLAT_TEX_HEIGHT = 1u << \
SPLAT_TEX_HEIGHT_BITS;\\nconst uint SPLAT_TEX_DEPTH = 1u << \
SPLAT_TEX_DEPTH_BITS;\\n\\nconst uint SPLAT_TEX_WIDTH_MASK = SPLAT_TEX_WIDTH \
- 1u;\\nconst uint SPLAT_TEX_HEIGHT_MASK = SPLAT_TEX_HEIGHT - 1u;\\nconst \
uint SPLAT_TEX_DEPTH_MASK = SPLAT_TEX_DEPTH - 1u;\\n\\nconst uint F16_INF = \
0x7c00u;\\nconst float PI = 3.1415926535897932384626433832795;\\n\\nconst \
float INFINITY = 1.0 / 0.0;\\nconst float NEG_INFINITY = \
-INFINITY;\\n\\nfloat sqr(float x) {\\n    return x * x;\\n}\\n\\nfloat \
pow4(float x) {\\n    float x2 = x * x;\\n    return x2 * x2;\\n}\\n\\nfloat \
pow8(float x) {\\n    float x4 = pow4(x);\\n    return x4 * x4;\\n}\\n\\nvec3 \
srgbToLinear(vec3 rgb) {\\n    return pow(rgb, vec3(2.2));\\n}\\n\\nvec3 \
linearToSrgb(vec3 rgb) {\\n    return pow(rgb, vec3(1.0 / \
2.2));\\n}\\n\\nuint encodeQuatOctXy88R8(vec4 q) {\\n    \\n    if (q.w < \
0.0) {\\n        q = -q;\\n    }\\n    \\n    float theta = 2.0 * \
acos(q.w);\\n    float halfTheta = theta * 0.5;\\n    float s = \
sin(halfTheta);\\n    \\n    vec3 axis = (abs(s) < 1e-6) ? vec3(1.0, 0.0, \
0.0) : q.xyz / s;\\n    \\n    \\n    \\n    float sum = abs(axis.x) + \
abs(axis.y) + abs(axis.z);\\n    vec2 p = vec2(axis.x, axis.y) / sum;\\n    \
\\n    if (axis.z < 0.0) {\\n        float oldPx = p.x;\\n        p.x = (1.0 \
- abs(p.y)) * (p.x >= 0.0 ? 1.0 : -1.0);\\n        p.y = (1.0 - abs(oldPx)) * \
(p.y >= 0.0 ? 1.0 : -1.0);\\n    }\\n    \\n    float u_f = p.x * 0.5 + \
0.5;\\n    float v_f = p.y * 0.5 + 0.5;\\n    \\n    uint quantU = \
uint(clamp(round(u_f * 255.0), 0.0, 255.0));\\n    uint quantV = \
uint(clamp(round(v_f * 255.0), 0.0, 255.0));\\n    \\n    \\n    \\n    uint \
angleInt = uint(clamp(round((theta / 3.14159265359) * 255.0), 0.0, \
255.0));\\n    \\n    \\n    return (angleInt << 16u) | (quantV << 8u) | \
quantU;\\n}\\n\\nvec4 decodeQuatOctXy88R8(uint encoded) {\\n    \\n    uint \
quantU = encoded & uint(0xFFu);               \\n    uint quantV = (encoded \
>> 8u) & uint(0xFFu);         \\n    uint angleInt = encoded >> 16u;          \
            \\n\\n    \\n    float u_f = float(quantU) / 255.0;\\n    float \
v_f = float(quantV) / 255.0;\\n    vec2 f = vec2(u_f * 2.0 - 1.0, v_f * 2.0 - \
1.0);\\n\\n    vec3 axis = vec3(f.xy, 1.0 - abs(f.x) - abs(f.y));\\n    float \
t = max(-axis.z, 0.0);\\n    axis.x += (axis.x >= 0.0) ? -t : t;\\n    axis.y \
+= (axis.y >= 0.0) ? -t : t;\\n    axis = normalize(axis);\\n    \\n    \\n   \
 float theta = (float(angleInt) / 255.0) * 3.14159265359;\\n    float \
halfTheta = theta * 0.5;\\n    float s = sin(halfTheta);\\n    float w = \
cos(halfTheta);\\n    \\n    return vec4(axis * s, w);\\n}\\n\\n    \\n\\n    \
\\n\\n    \\n\\n    \\n\\n    \\n\\n    \\n\\n    \\n\\n    \\n\\n    \\n\\n  \
  \\n\\nuvec4 packSplatEncoding(\\n    vec3 center, vec3 scales, vec4 \
quaternion, vec4 rgba, vec4 rgbMinMaxLnScaleMinMax\\n) {\\n    float rgbMin = \
rgbMinMaxLnScaleMinMax.x;\\n    float rgbMax = rgbMinMaxLnScaleMinMax.y;\\n   \
 vec3 encRgb = (rgba.rgb - vec3(rgbMin)) / (rgbMax - rgbMin);\\n    uvec4 \
uRgba = uvec4(round(clamp(vec4(encRgb, rgba.a) * 255.0, 0.0, 255.0)));\\n\\n  \
  uint uQuat = encodeQuatOctXy88R8(quaternion);\\n    \\n    \\n    uvec3 \
uQuat3 = uvec3(uQuat & 0xffu, (uQuat >> 8u) & 0xffu, (uQuat >> 16u) & \
0xffu);\\n\\n    \\n    float lnScaleMin = rgbMinMaxLnScaleMinMax.z;\\n    \
float lnScaleMax = rgbMinMaxLnScaleMinMax.w;\\n    float lnScaleScale = 254.0 \
/ (lnScaleMax - lnScaleMin);\\n    uvec3 uScales = uvec3(\\n        (scales.x \
== 0.0) ? 0u : uint(round(clamp((log(scales.x) - lnScaleMin) * lnScaleScale, \
0.0, 254.0))) + 1u,\\n        (scales.y == 0.0) ? 0u : \
uint(round(clamp((log(scales.y) - lnScaleMin) * lnScaleScale, 0.0, 254.0))) + \
1u,\\n        (scales.z == 0.0) ? 0u : uint(round(clamp((log(scales.z) - \
lnScaleMin) * lnScaleScale, 0.0, 254.0))) + 1u\\n    );\\n\\n    \\n    uint \
word0 = uRgba.r | (uRgba.g << 8u) | (uRgba.b << 16u) | (uRgba.a << 24u);\\n   \
 uint word1 = packHalf2x16(center.xy);\\n    uint word2 = \
packHalf2x16(vec2(center.z, 0.0)) | (uQuat3.x << 16u) | (uQuat3.y << 24u);\\n \
   uint word3 = uScales.x | (uScales.y << 8u) | (uScales.z << 16u) | \
(uQuat3.z << 24u);\\n    return uvec4(word0, word1, word2, \
word3);\\n}\\n\\nuvec4 packSplat(vec3 center, vec3 scales, vec4 quaternion, \
vec4 rgba) {\\n    return packSplatEncoding(center, scales, quaternion, rgba, \
vec4(0.0, 1.0, LN_SCALE_MIN, LN_SCALE_MAX));\\n}\\n\\nvoid \
unpackSplatEncoding(uvec4 packed, out vec3 center, out vec3 scales, out vec4 \
quaternion, out vec4 rgba, vec4 rgbMinMaxLnScaleMinMax) {\\n    uint word0 = \
packed.x, word1 = packed.y, word2 = packed.z, word3 = packed.w;\\n\\n    \
uvec4 uRgba = uvec4(word0 & 0xffu, (word0 >> 8u) & 0xffu, (word0 >> 16u) & \
0xffu, (word0 >> 24u) & 0xffu);\\n    float rgbMin = \
rgbMinMaxLnScaleMinMax.x;\\n    float rgbMax = rgbMinMaxLnScaleMinMax.y;\\n   \
 rgba = (vec4(uRgba) / 255.0);\\n    rgba.rgb = rgba.rgb * (rgbMax - rgbMin) \
+ rgbMin;\\n\\n    center = vec4(\\n        unpackHalf2x16(word1),\\n        \
unpackHalf2x16(word2 & 0xffffu)\\n    ).xyz;\\n\\n    uvec3 uScales = \
uvec3(word3 & 0xffu, (word3 >> 8u) & 0xffu, (word3 >> 16u) & 0xffu);\\n    \
float lnScaleMin = rgbMinMaxLnScaleMinMax.z;\\n    float lnScaleMax = \
rgbMinMaxLnScaleMinMax.w;\\n    float lnScaleScale = (lnScaleMax - \
lnScaleMin) / 254.0;\\n    scales = vec3(\\n        (uScales.x == 0u) ? 0.0 : \
exp(lnScaleMin + float(uScales.x - 1u) * lnScaleScale),\\n        (uScales.y \
== 0u) ? 0.0 : exp(lnScaleMin + float(uScales.y - 1u) * lnScaleScale),\\n     \
   (uScales.z == 0u) ? 0.0 : exp(lnScaleMin + float(uScales.z - 1u) * \
lnScaleScale)\\n    );\\n\\n    uint uQuat = ((word2 >> 16u) & 0xFFFFu) | \
((word3 >> 8u) & 0xFF0000u);\\n    quaternion = \
decodeQuatOctXy88R8(uQuat);\\n    \\n    \\n}\\n\\nvoid unpackSplat(uvec4 \
packed, out vec3 center, out vec3 scales, out vec4 quaternion, out vec4 rgba) \
{\\n    unpackSplatEncoding(packed, center, scales, quaternion, rgba, \
vec4(0.0, 1.0, LN_SCALE_MIN, LN_SCALE_MAX));\\n}\\n\\nvec3 quatVec(vec4 q, \
vec3 v) {\\n    \\n    vec3 t = 2.0 * cross(q.xyz, v);\\n    return v + q.w * \
t + cross(q.xyz, t);\\n}\\n\\nvec4 quatQuat(vec4 q1, vec4 q2) {\\n    return \
vec4(\\n        q1.w * q2.x + q1.x * q2.w + q1.y * q2.z - q1.z * q2.y,\\n     \
   q1.w * q2.y - q1.x * q2.z + q1.y * q2.w + q1.z * q2.x,\\n        q1.w * \
q2.z + q1.x * q2.y - q1.y * q2.x + q1.z * q2.w,\\n        q1.w * q2.w - q1.x \
* q2.x - q1.y * q2.y - q1.z * q2.z\\n    );\\n}\\n\\nmat3 \
scaleQuaternionToMatrix(vec3 s, vec4 q) {\\n    \\n    return mat3(\\n        \
s.x * (1.0 - 2.0 * (q.y * q.y + q.z * q.z)),\\n        s.x * (2.0 * (q.x * \
q.y + q.w * q.z)),\\n        s.x * (2.0 * (q.x * q.z - q.w * q.y)),\\n        \
s.y * (2.0 * (q.x * q.y - q.w * q.z)),\\n        s.y * (1.0 - 2.0 * (q.x * \
q.x + q.z * q.z)),\\n        s.y * (2.0 * (q.y * q.z + q.w * q.x)),\\n        \
s.z * (2.0 * (q.x * q.z + q.w * q.y)),\\n        s.z * (2.0 * (q.y * q.z - \
q.w * q.x)),\\n        s.z * (1.0 - 2.0 * (q.x * q.x + q.y * q.y))\\n    \
);\\n}\\n\\nvec4 slerp(vec4 q1, vec4 q2, float t) {\\n    \\n    float \
cosHalfTheta = dot(q1, q2);\\n\\n    \\n    if (abs(cosHalfTheta) >= 0.999) \
{\\n        return q1;\\n    }\\n    \\n    \\n    \\n    if (cosHalfTheta < \
0.0) {\\n        q2 = -q2;\\n        cosHalfTheta = -cosHalfTheta;\\n    \
}\\n\\n    \\n    float halfTheta = acos(cosHalfTheta);\\n    float \
sinHalfTheta = sqrt(1.0 - cosHalfTheta * cosHalfTheta);\\n\\n    \\n    float \
ratioA = sin((1.0 - t) * halfTheta) / sinHalfTheta;\\n    float ratioB = \
sin(t * halfTheta) / sinHalfTheta;\\n\\n    \\n    return q1 * ratioA + q2 * \
ratioB;\\n}\\n\\nivec3 splatTexCoord(int index) {\\n    uint x = uint(index) \
& SPLAT_TEX_WIDTH_MASK;\\n    uint y = (uint(index) >> SPLAT_TEX_WIDTH_BITS) \
& SPLAT_TEX_HEIGHT_MASK;\\n    uint z = uint(index) >> \
SPLAT_TEX_LAYER_BITS;\\n    return ivec3(x, y, \
z);\\n}\",ji={splatVertex:\"precision highp float;\\nprecision highp \
int;\\nprecision highp usampler2DArray;\\n\\n#include \
<splatDefines>\\n\\nattribute uint splatIndex;\\n\\nout vec4 vRgba;\\nout \
vec2 vSplatUv;\\nout vec3 vNdc;\\nflat out uint vSplatIndex;\\n\\nuniform \
vec2 renderSize;\\nuniform uint numSplats;\\nuniform vec4 \
renderToViewQuat;\\nuniform vec3 renderToViewPos;\\nuniform float \
maxStdDev;\\nuniform float minPixelRadius;\\nuniform float \
maxPixelRadius;\\nuniform float time;\\nuniform float deltaTime;\\nuniform \
bool debugFlag;\\nuniform float minAlpha;\\nuniform bool \
stochastic;\\nuniform bool enable2DGS;\\nuniform float blurAmount;\\nuniform \
float preBlurAmount;\\nuniform float focalDistance;\\nuniform float \
apertureAngle;\\nuniform float clipXY;\\nuniform float \
focalAdjustment;\\n\\nuniform usampler2DArray packedSplats;\\nuniform vec4 \
rgbMinMaxLnScaleMinMax;\\n\\nvoid main() {\\n    \\n    gl_Position = \
vec4(0.0, 0.0, 2.0, 1.0);\\n\\n    if (uint(gl_InstanceID) >= numSplats) {\\n \
       return;\\n    }\\n\\n    ivec3 texCoord;\\n    if (stochastic) {\\n    \
    texCoord = ivec3(\\n            uint(gl_InstanceID) & \
SPLAT_TEX_WIDTH_MASK,\\n            (uint(gl_InstanceID) >> \
SPLAT_TEX_WIDTH_BITS) & SPLAT_TEX_HEIGHT_MASK,\\n            \
(uint(gl_InstanceID) >> SPLAT_TEX_LAYER_BITS)\\n        );\\n    } else {\\n  \
      if (splatIndex == 0xffffffffu) {\\n            \\n            \
return;\\n        }\\n        texCoord = ivec3(\\n            splatIndex & \
SPLAT_TEX_WIDTH_MASK,\\n            (splatIndex >> SPLAT_TEX_WIDTH_BITS) & \
SPLAT_TEX_HEIGHT_MASK,\\n            splatIndex >> SPLAT_TEX_LAYER_BITS\\n    \
    );\\n    }\\n    uvec4 packed = texelFetch(packedSplats, texCoord, \
0);\\n\\n    vec3 center, scales;\\n    vec4 quaternion, rgba;\\n    \
unpackSplatEncoding(packed, center, scales, quaternion, rgba, \
rgbMinMaxLnScaleMinMax);\\n\\n    if (rgba.a < minAlpha) {\\n        \
return;\\n    }\\n    bvec3 zeroScales = equal(scales, vec3(0.0));\\n    if \
(all(zeroScales)) {\\n        return;\\n    }\\n\\n    \\n    vec3 viewCenter \
= quatVec(renderToViewQuat, center) + renderToViewPos;\\n\\n    \\n    if \
(viewCenter.z >= 0.0) {\\n        return;\\n    }\\n\\n    \\n    vec4 \
clipCenter = projectionMatrix * vec4(viewCenter, 1.0);\\n\\n    \\n    if \
(abs(clipCenter.z) >= clipCenter.w) {\\n        return;\\n    }\\n\\n    \\n  \
  float clip = clipXY * clipCenter.w;\\n    if (abs(clipCenter.x) > clip || \
abs(clipCenter.y) > clip) {\\n        return;\\n    }\\n\\n    \\n    \
vSplatIndex = splatIndex;\\n\\n    \\n    vec4 viewQuaternion = \
quatQuat(renderToViewQuat, quaternion);\\n\\n    if (enable2DGS && \
any(zeroScales)) {\\n        vRgba = rgba;\\n        vSplatUv = position.xy * \
maxStdDev;\\n\\n        vec3 offset;\\n        if (zeroScales.z) {\\n         \
   offset = vec3(vSplatUv.xy * scales.xy, 0.0);\\n        } else if \
(zeroScales.y) {\\n            offset = vec3(vSplatUv.x * scales.x, 0.0, \
vSplatUv.y * scales.z);\\n        } else {\\n            offset = vec3(0.0, \
vSplatUv.xy * scales.yz);\\n        }\\n\\n        vec3 viewPos = viewCenter \
+ quatVec(viewQuaternion, offset);\\n        gl_Position = projectionMatrix * \
vec4(viewPos, 1.0);\\n        vNdc = gl_Position.xyz / gl_Position.w;\\n      \
  return;\\n    }\\n\\n    \\n    vec3 ndcCenter = clipCenter.xyz / \
clipCenter.w;\\n\\n    \\n    mat3 RS = scaleQuaternionToMatrix(scales, \
viewQuaternion);\\n    mat3 cov3D = RS * transpose(RS);\\n\\n    \\n    vec2 \
scaledRenderSize = renderSize * focalAdjustment;\\n    vec2 focal = 0.5 * \
scaledRenderSize * vec2(projectionMatrix[0][0], \
projectionMatrix[1][1]);\\n\\n    mat3 J;\\n    if(isOrthographic) {\\n       \
 J = mat3(\\n            focal.x, 0.0, 0.0,\\n            0.0, focal.y, \
0.0,\\n            0.0, 0.0, 0.0\\n        );\\n    } else {\\n        float \
invZ = 1.0 / viewCenter.z;\\n        vec2 J1 = focal * invZ;\\n        vec2 \
J2 = -(J1 * viewCenter.xy) * invZ;\\n        J = mat3(\\n            J1.x, \
0.0, J2.x,\\n            0.0, J1.y, J2.y,\\n            0.0, 0.0, 0.0\\n      \
  );\\n    }\\n\\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    mat3 \
cov2D = transpose(J) * cov3D * J;\\n    float a = cov2D[0][0];\\n    float d \
= cov2D[1][1];\\n    float b = cov2D[0][1];\\n\\n    \\n    a += \
preBlurAmount;\\n    d += preBlurAmount;\\n\\n    float fullBlurAmount = \
blurAmount;\\n    if ((focalDistance > 0.0) && (apertureAngle > 0.0)) {\\n    \
    float focusRadius = maxPixelRadius;\\n        if (viewCenter.z < 0.0) \
{\\n            float focusBlur = abs((-viewCenter.z - focalDistance) / \
viewCenter.z);\\n            float apertureRadius = focal.x * tan(0.5 * \
apertureAngle);\\n            focusRadius = focusBlur * apertureRadius;\\n    \
    }\\n        fullBlurAmount = clamp(sqr(focusRadius), blurAmount, \
sqr(maxPixelRadius));\\n    }\\n\\n    \\n    float detOrig = a * d - b * \
b;\\n    a += fullBlurAmount;\\n    d += fullBlurAmount;\\n    float det = a \
* d - b * b;\\n\\n    \\n    float blurAdjust = sqrt(max(0.0, detOrig / \
det));\\n    rgba.a *= blurAdjust;\\n    if (rgba.a < minAlpha) {\\n        \
return;\\n    }\\n\\n    \\n    float eigenAvg = 0.5 * (a + d);\\n    float \
eigenDelta = sqrt(max(0.0, eigenAvg * eigenAvg - det));\\n    float eigen1 = \
eigenAvg + eigenDelta;\\n    float eigen2 = eigenAvg - eigenDelta;\\n\\n    \
vec2 eigenVec1 = normalize(vec2((abs(b) < 0.001) ? 1.0 : b, eigen1 - a));\\n  \
  vec2 eigenVec2 = vec2(eigenVec1.y, -eigenVec1.x);\\n\\n    float scale1 = \
min(maxPixelRadius, maxStdDev * sqrt(eigen1));\\n    float scale2 = \
min(maxPixelRadius, maxStdDev * sqrt(eigen2));\\n    if (scale1 < \
minPixelRadius && scale2 < minPixelRadius) {\\n        return;\\n    }\\n\\n  \
  \\n    vec2 pixelOffset = position.x * eigenVec1 * scale1 + position.y * \
eigenVec2 * scale2;\\n    vec2 ndcOffset = (2.0 / scaledRenderSize) * \
pixelOffset;\\n    vec3 ndc = vec3(ndcCenter.xy + ndcOffset, \
ndcCenter.z);\\n\\n    vRgba = rgba;\\n    vSplatUv = position.xy * \
maxStdDev;\\n    vNdc = ndc;\\n    gl_Position = vec4(ndc.xy * clipCenter.w, \
clipCenter.zw);\\n}\",splatFragment:\"precision highp float;\\nprecision \
highp int;\\n\\n#include <splatDefines>\\n\\nuniform float near;\\nuniform \
float far;\\nuniform bool encodeLinear;\\nuniform float time;\\nuniform bool \
debugFlag;\\nuniform float maxStdDev;\\nuniform float minAlpha;\\nuniform \
bool stochastic;\\nuniform bool disableFalloff;\\nuniform float \
falloff;\\n\\nuniform bool splatTexEnable;\\nuniform sampler3D \
splatTexture;\\nuniform mat2 splatTexMul;\\nuniform vec2 \
splatTexAdd;\\nuniform float splatTexNear;\\nuniform float \
splatTexFar;\\nuniform float splatTexMid;\\n\\nout vec4 fragColor;\\n\\nin \
vec4 vRgba;\\nin vec2 vSplatUv;\\nin vec3 vNdc;\\nflat in uint \
vSplatIndex;\\n\\nvoid main() {\\n    vec4 rgba = vRgba;\\n\\n    float z = \
dot(vSplatUv, vSplatUv);\\n    if (!splatTexEnable) {\\n        if (z > \
(maxStdDev * maxStdDev)) {\\n            discard;\\n        }\\n    } else \
{\\n        vec2 uv = splatTexMul * vSplatUv + splatTexAdd;\\n        float \
ndcZ = vNdc.z;\\n        float depth = (2.0 * near * far) / (far + near - \
ndcZ * (far - near));\\n        float clampedFar = max(splatTexFar, \
splatTexNear);\\n        float clampedDepth = clamp(depth, splatTexNear, \
clampedFar);\\n        float logDepth = log2(clampedDepth + 1.0);\\n        \
float logNear = log2(splatTexNear + 1.0);\\n        float logFar = \
log2(clampedFar + 1.0);\\n\\n        float texZ;\\n        if (splatTexMid > \
0.0) {\\n            float clampedMid = clamp(splatTexMid, splatTexNear, \
clampedFar);\\n            float logMid = log2(clampedMid + 1.0);\\n          \
  texZ = (clampedDepth <= clampedMid) ?\\n                (0.5 * ((logDepth - \
logNear) / (logMid - logNear))) :\\n                (0.5 * ((logDepth - \
logMid) / (logFar - logMid)) + 0.5);\\n        } else {\\n            texZ = \
(logDepth - logNear) / (logFar - logNear);\\n        }\\n\\n        vec4 \
modulate = texture(splatTexture, vec3(uv, 1.0 - texZ));\\n        rgba *= \
modulate;\\n    }\\n\\n    rgba.a *= mix(1.0, exp(-0.5 * z), falloff);\\n\\n  \
  if (rgba.a < minAlpha) {\\n        discard;\\n    }\\n    if (encodeLinear) \
{\\n        rgba.rgb = srgbToLinear(rgba.rgb);\\n    }\\n\\n    if \
(stochastic) {\\n        const bool STEADY = false;\\n        uint uTime = \
STEADY ? 0u : floatBitsToUint(time);\\n        uvec2 coord = \
uvec2(gl_FragCoord.xy);\\n        uint state = uTime + 0x9e3779b9u * coord.x \
+ 0x85ebca6bu * coord.y + 0xc2b2ae35u * uint(vSplatIndex);\\n        state = \
state * 747796405u + 2891336453u;\\n        uint hash = ((state >> ((state >> \
28u) + 4u)) ^ state) * 277803737u;\\n        hash = (hash >> 22u) ^ hash;\\n  \
      float rand = float(hash) / 4294967296.0;\\n        if (rand < rgba.a) \
{\\n            fragColor = vec4(rgba.rgb, 1.0);\\n        } else {\\n        \
    discard;\\n        }\\n    } else {\\n        #ifdef \
PREMULTIPLIED_ALPHA\\n            fragColor = vec4(rgba.rgb * rgba.a, \
rgba.a);\\n        #else\\n            fragColor = rgba;\\n        #endif\\n  \
  }\\n}\"}),ji),a=e.premultipliedAlpha??!0,r=new \
n.ShaderMaterial({glslVersion:n.GLSL3,vertexShader:s.splatVertex,fragmentShad\
er:s.splatFragment,uniforms:A,premultipliedAlpha:a,transparent:!0,depthTest:!\
0,depthWrite:!1,side:n.DoubleSide});super(Oi,r),this.splatTexture=null,this.a\
utoViewpoints=[],this.rotateToAccumulator=new qt({value:new \
n.Quaternion}),this.translateToAccumulator=new Rt({value:new \
n.Vector3}),this.lastFrame=-1,this.lastUpdateTime=null,this.defaultCameras=[]\
,this.lastStochastic=null,this.pendingUpdate={scene:null,originToWorld:new \
n.Matrix4,timeoutId:-1},this.envViewpoint=null,this.frustumCulled=!1,this.ren\
derer=e.renderer,this.material=r,this.uniforms=A;const \
i=Vn({gsplat:nt},{gsplat:nt},(({gsplat:n})=>{if(!n)throw new Error(\"gsplat \
not \
defined\");return{gsplat:n=it(n,{rotate:this.rotateToAccumulator,translate:th\
is.translateToAccumulator})}}));this.modifier=new \
Zr(i),this.premultipliedAlpha=a,this.autoUpdate=e.autoUpdate??!0,this.preUpda\
te=e.preUpdate??!1,this.needsUpdate=!1,this.originDistance=e.originDistance??\
1,this.maxStdDev=e.maxStdDev??Math.sqrt(8),this.minPixelRadius=e.minPixelRadi\
us??0,this.maxPixelRadius=e.maxPixelRadius??512,this.minAlpha=e.minAlpha??1/2\
55*.5,this.enable2DGS=e.enable2DGS??!1,this.preBlurAmount=e.preBlurAmount??0,\
this.blurAmount=e.blurAmount??.3,this.focalDistance=e.focalDistance??0,this.a\
pertureAngle=e.apertureAngle??0,this.falloff=e.falloff??1,this.clipXY=e.clipX\
Y??1.4,this.focalAdjustment=e.focalAdjustment??1,this.splatEncoding=e.splatEn\
coding??{...Ri},this.active=new \
$i,this.accumulatorCount=1,this.freeAccumulators=[];for(let \
n=0;n<1;++n)this.freeAccumulators.push(new \
$i),this.accumulatorCount+=1;this.defaultView=new \
Hi({...e.view,autoUpdate:!0,spark:this}),this.viewpoint=this.defaultView,this\
.prepareViewpoint(this.viewpoint),this.clock=e.clock?ke(e.clock):new \
n.Clock}static makeUniforms(){return{renderSize:{value:new \
n.Vector2},near:{value:.1},far:{value:1e3},numSplats:{value:0},renderToViewQu\
at:{value:new n.Quaternion},renderToViewPos:{value:new \
n.Vector3},maxStdDev:{value:1},minPixelRadius:{value:0},maxPixelRadius:{value\
:512},minAlpha:{value:1/255*.5},stochastic:{value:!1},enable2DGS:{value:!1},p\
reBlurAmount:{value:0},blurAmount:{value:.3},focalDistance:{value:0},aperture\
Angle:{value:0},falloff:{value:1},clipXY:{value:1.4},focalAdjustment:{value:1\
},splatTexEnable:{value:!1},splatTexture:{type:\"t\",value:t.EMPTY_SPLAT_TEXT\
URE},splatTexMul:{value:new n.Matrix2},splatTexAdd:{value:new \
n.Vector2},splatTexNear:{value:.1},splatTexFar:{value:1e3},splatTexMid:{value\
:0},packedSplats:{type:\"t\",value:Ui.getEmpty()},rgbMinMaxLnScaleMinMax:{val\
ue:new \
n.Vector4},time:{value:0},deltaTime:{value:0},encodeLinear:{value:!1},debugFl\
ag:{value:!1}}}canAllocAccumulator(){return \
this.freeAccumulators.length>0||this.accumulatorCount<5}maybeAllocAccumulator\
(){let n=this.freeAccumulators.pop();if(void \
0===n){if(this.accumulatorCount>=5)return null;n=new \
$i,this.accumulatorCount+=1}return \
n.refCount=1,n}releaseAccumulator(n){n.refCount-=1,0===n.refCount&&this.freeA\
ccumulators.push(n)}newViewpoint(n){return new \
Hi({...n,spark:this})}onBeforeRender(e,A,s){var a,r;const \
i=this.time??this.clock.getElapsedTime(),o=i-(this.viewpoint.lastTime??i);thi\
s.viewpoint.lastTime=i;const \
c=e.info.render.frame,l=c!==this.lastFrame;this.lastFrame=c;const \
u=this.viewpoint;if(u===this.defaultView){if(l)if(e.xr.isPresenting){const \
t=e.xr.getCamera().cameras;this.defaultCameras=t.map((n=>n.matrixWorld)),this\
.defaultView.viewToWorld=function(t){if(0===t.length)return null;const e=new \
n.Vector3,A=new n.Quaternion,s=new n.Vector3,a=[],r=[];for(const n of \
t)n.decompose(e,A,s),a.push(e),r.push(A);return(new \
n.Matrix4).compose(Te(a),Fe(r),new \
n.Vector3(1,1,1))}(this.defaultCameras)??new n.Matrix4}else \
this.defaultView.viewToWorld=s.matrixWorld.clone(),this.defaultCameras=[this.\
defaultView.viewToWorld];this.autoUpdate&&this.update({scene:A,viewToWorld:th\
is.defaultView.viewToWorld})}if(l&&(this.material.premultipliedAlpha!==this.p\
remultipliedAlpha&&(this.material.premultipliedAlpha=this.premultipliedAlpha,\
this.material.needsUpdate=!0),this.uniforms.time.value=i,this.uniforms.deltaT\
ime.value=o,this.uniforms.debugFlag.value=performance.now()/1e3%2<1,u.display\
&&u.stochastic&&(this.geometry.instanceCount=this.uniforms.numSplats.value)),\
u.target)this.uniforms.renderSize.value.set(u.target.width,u.target.height);e\
lse{const \
n=e.getDrawingBufferSize(this.uniforms.renderSize.value);if(1===n.x&&1===n.y)\
{const t=null==(a=e.xr.getSession())?void \
0:a.renderState.baseLayer;t&&(n.x=t.framebufferWidth,n.y=t.framebufferHeight)\
}}const \
g=s;if(this.uniforms.near.value=g.near,this.uniforms.far.value=g.far,this.uni\
forms.encodeLinear.value=u.encodeLinear,this.uniforms.maxStdDev.value=this.ma\
xStdDev,this.uniforms.minPixelRadius.value=this.minPixelRadius,this.uniforms.\
maxPixelRadius.value=this.maxPixelRadius,this.uniforms.minAlpha.value=this.mi\
nAlpha,this.uniforms.stochastic.value=u.stochastic,this.uniforms.enable2DGS.v\
alue=this.enable2DGS,this.uniforms.preBlurAmount.value=this.preBlurAmount,thi\
s.uniforms.blurAmount.value=this.blurAmount,this.uniforms.focalDistance.value\
=this.focalDistance,this.uniforms.apertureAngle.value=this.apertureAngle,this\
.uniforms.falloff.value=this.falloff,this.uniforms.clipXY.value=this.clipXY,t\
his.uniforms.focalAdjustment.value=this.focalAdjustment,this.lastStochastic!=\
=!u.stochastic&&(this.lastStochastic=!u.stochastic,this.material.transparent=\
!u.stochastic,this.material.depthWrite=u.stochastic,this.material.needsUpdate\
=!0),this.splatTexture){const{enable:n,texture:e,multiply:A,add:s,near:a,far:\
r,mid:i}=this.splatTexture;n&&e?(this.uniforms.splatTexEnable.value=!0,this.u\
niforms.splatTexture.value=e,A?this.uniforms.splatTexMul.value.fromArray(A.el\
ements):this.uniforms.splatTexMul.value.set(.5/this.maxStdDev,0,0,.5/this.max\
StdDev),this.uniforms.splatTexAdd.value.set((null==s?void \
0:s.x)??.5,(null==s?void \
0:s.y)??.5),this.uniforms.splatTexNear.value=a??this.uniforms.near.value,this\
.uniforms.splatTexFar.value=r??this.uniforms.far.value,this.uniforms.splatTex\
Mid.value=i??0):(this.uniforms.splatTexEnable.value=!1,this.uniforms.splatTex\
ture.value=t.EMPTY_SPLAT_TEXTURE)}else \
this.uniforms.splatTexEnable.value=!1,this.uniforms.splatTexture.value=t.EMPT\
Y_SPLAT_TEXTURE;const h=(null==(r=u.display)?void \
0:r.accumulator.toWorld)??new \
n.Matrix4,p=s.matrixWorld.clone().invert();h.clone().premultiply(p).decompose\
(this.uniforms.renderToViewPos.value,this.uniforms.renderToViewQuat.value,new \
n.Vector3)}prepareViewpoint(n){var \
t,e,A,s;if(this.viewpoint=n??this.viewpoint,this.viewpoint.display){const{acc\
umulator:n,geometry:a}=this.viewpoint.display;this.uniforms.numSplats.value=n\
.splats.numSplats,this.uniforms.packedSplats.value=n.splats.getTexture(),this\
.uniforms.rgbMinMaxLnScaleMinMax.value.set((null==(t=n.splats.splatEncoding)?\
void 0:t.rgbMin)??0,(null==(e=n.splats.splatEncoding)?void \
0:e.rgbMax)??1,(null==(A=n.splats.splatEncoding)?void \
0:A.lnScaleMin)??sn,(null==(s=n.splats.splatEncoding)?void \
0:s.lnScaleMax)??9),this.geometry=a,this.material.transparent=!this.viewpoint\
.stochastic,this.material.depthWrite=this.viewpoint.stochastic,this.material.\
needsUpdate=!0}else \
this.uniforms.numSplats.value=0,this.uniforms.packedSplats.value=Ui.getEmpty(\
),this.geometry=Oi}update({scene:n,viewToWorld:t}){const \
e=this.matrixWorld;this.preUpdate?this.updateInternal({scene:n,originToWorld:\
e.clone(),viewToWorld:t}):(this.pendingUpdate.scene=n,this.pendingUpdate.orig\
inToWorld.copy(e),-1===this.pendingUpdate.timeoutId&&(this.pendingUpdate.time\
outId=setTimeout((()=>{const{scene:n,originToWorld:e}=this.pendingUpdate;this\
.pendingUpdate.scene=null,this.pendingUpdate.timeoutId=-1;if(this.updateInter\
nal({scene:n,originToWorld:e,viewToWorld:t})){this.renderer.getContext().flus\
h()}}),1)))}updateInternal({scene:t,originToWorld:e,viewToWorld:A}){var \
s;if(!this.canAllocAccumulator())return!1;e||(e=this.active.toWorld),A=A??e.c\
lone();const \
a=this.time??this.clock.getElapsedTime(),r=a-(this.lastUpdateTime??a);this.la\
stUpdateTime=a;const \
i=this.active.mapping.reduce(((n,t)=>(n.set(t.node,t),n)),new \
Map),{generators:o,visibleGenerators:c,globalEdits:l}=this.compileScene(t);fo\
r(const n of \
o)null==(s=n.frameUpdate)||s.call(n,{object:n,time:a,deltaTime:r,viewToWorld:\
A,globalEdits:l});const u=new Set(c.map((n=>n.uuid)));for(const n of o){const \
t=i.get(n),e=n.generator&&u.has(n.uuid)?n.numSplats:0;(this.needsUpdate||n.ge\
nerator!==(null==t?void 0:t.generator)||e!==(null==t?void \
0:t.count))&&n.updateVersion()}const \
g=!Ge({matrix1:e,matrix2:this.active.toWorld,maxDistance:this.originDistance}\
),h=this.needsUpdate||g||o.length!==i.size||o.some((n=>{var t;return \
n.version!==(null==(t=i.get(n))?void 0:t.version)}));this.needsUpdate=!1;let \
p=null;if(h){if(p=this.maybeAllocAccumulator(),!p)throw new \
Error(\"Unreachable\");const \
t=!Ge({matrix1:e,matrix2:this.active.toWorld,maxDistance:1e-5,minCoorient:.99\
999}),A=c.map(((n,t)=>{const e=i.get(n);return \
e?[n.version-e.version,e.base,n]:[Number.POSITIVE_INFINITY,n.version,n]})).so\
rt(((n,t)=>n[0]!==t[0]?n[0]-t[0]:n[1]-t[1])).map((([n,t,e])=>e)),s=A.map((n=>\
n.numSplats)),{maxSplats:a,mapping:r}=p.splats.generateMapping(s),o=A.map(((n\
,t)=>{const{base:e,count:A}=r[t];return{node:n,generator:n.generator,version:\
n.version,base:e,count:A}}));e.clone().invert().decompose(this.translateToAcc\
umulator.value,this.rotateToAccumulator.value,new \
n.Vector3),p.ensureGenerate(a),p.splats.splatEncoding={...this.splatEncoding}\
,p.generateSplats({renderer:this.renderer,modifier:this.modifier,generators:o\
,forceUpdate:t,originToWorld:e}),p.splatsVersion=this.active.splatsVersion+1;\
const \
l=p.hasCorrespondence(this.active);p.mappingVersion=this.active.mappingVersio\
n+(l?0:1),this.releaseAccumulator(this.active),this.active=p,this.prepareView\
point()}return setTimeout((()=>{for(const n of \
this.autoViewpoints)n.autoPoll({accumulator:p??void \
0})}),1),!0}compileScene(n){const t=[];n.traverse((n=>{n instanceof \
Or&&t.push(n)}));const e=[];n.traverseVisible((n=>{n instanceof \
Or&&e.push(n)}));const A=new Set;return n.traverseVisible((n=>{if(n \
instanceof Jr){let t=n.parent;for(;null!=t&&!(t instanceof \
Wr);)t=t.parent;null==t&&A.add(n)}})),{generators:t,visibleGenerators:e,globa\
lEdits:Array.from(A)}}async \
renderEnvMap({renderer:e,scene:A,worldCenter:s,size:a=256,near:r=.1,far:i=1e3\
,hideObjects:o=[],update:c=!1}){var \
l,u;if(this.envViewpoint||(this.envViewpoint=this.newViewpoint({sort360:!0}))\
,!t.cubeRender||t.cubeRender.target.width!==a||t.cubeRender.near!==r||t.cubeR\
ender.far!==i){t.cubeRender&&t.cubeRender.target.dispose();const e=new \
n.WebGLCubeRenderTarget(a,{format:n.RGBAFormat,generateMipmaps:!0,minFilter:n\
.LinearMipMapLinearFilter}),A=new \
n.CubeCamera(r,i,e);t.cubeRender={target:e,camera:A,near:r,far:i}}t.pmrem||(t\
.pmrem=new n.PMREMGenerator(e??this.renderer));const g=(new \
n.Matrix4).setPosition(s);await(null==(l=this.envViewpoint)?void \
0:l.prepare({scene:A,viewToWorld:g,update:c}));const{target:h,camera:p}=t.cub\
eRender;p.position.copy(s);const I=new Map;for(const n of \
o)I.set(n,n.visible),n.visible=!1;this.prepareViewpoint(this.envViewpoint),p.\
update(e??this.renderer,A),this.prepareViewpoint(this.defaultView);for(const[\
n,t]of I.entries())n.visible=t;return null==(u=t.pmrem)?void \
0:u.fromCubemap(h.texture).texture}recurseSetEnvMap(t,e){t.traverse((t=>{if(t \
instanceof n.Mesh)if(Array.isArray(t.material))for(const A of t.material)A \
instanceof n.MeshStandardMaterial&&(A.envMap=e);else t.material instanceof \
n.MeshStandardMaterial&&(t.material.envMap=e)}))}getRgba({generator:n,rgba:t}\
){const e=this.active.mapping.find((({node:t})=>t===n));if(!e)throw new \
Error(\"Generator not found\");return(t=t??new \
Rr).fromPackedSplats({packedSplats:this.active.splats,base:e.base,count:e.cou\
nt,renderer:this.renderer}),t}async \
readRgba({generator:n,rgba:t}){return(t=this.getRgba({generator:n,rgba:t})).r\
ead()}};Zi.cubeRender=null,Zi.pmrem=null,Zi.EMPTY_SPLAT_TEXTURE=new \
n.Data3DTexture;let Xi=Zi;const Oi=new qi(new \
Uint32Array(1),0);Vn({packedSplats:tt,index:\"int\"},{gsplat:nt},(({packedSpl\
ats:n,index:t})=>{if(!n||!t)throw new Error(\"Invalid \
input\");return{gsplat:et(n,t)}}));Xn(\"\\n  struct GsplatSkinning {\\n    \
int numSplats;\\n    int numBones;\\n    usampler2DArray skinTexture;\\n    \
sampler2D boneTexture;\\n  };\\n\"),Xn(\"\\n  void applyGsplatSkinning(\\n    \
int numSplats, int numBones,\\n    usampler2DArray skinTexture, sampler2D \
boneTexture,\\n    int splatIndex, inout vec3 center, inout vec4 \
quaternion\\n  ) {\\n    if ((splatIndex < 0) || (splatIndex >= numSplats)) \
{\\n      return;\\n    }\\n\\n    uvec4 skinData = texelFetch(skinTexture, \
splatTexCoord(splatIndex), 0);\\n\\n    float weights[4];\\n    weights[0] = \
float(skinData.x & 0xffu) / 255.0;\\n    weights[1] = float(skinData.y & \
0xffu) / 255.0;\\n    weights[2] = float(skinData.z & 0xffu) / 255.0;\\n    \
weights[3] = float(skinData.w & 0xffu) / 255.0;\\n\\n    uint \
boneIndices[4];\\n    boneIndices[0] = (skinData.x >> 8u) & 0xffu;\\n    \
boneIndices[1] = (skinData.y >> 8u) & 0xffu;\\n    boneIndices[2] = \
(skinData.z >> 8u) & 0xffu;\\n    boneIndices[3] = (skinData.w >> 8u) & \
0xffu;\\n\\n    vec4 quat = vec4(0.0);\\n    vec4 dual = vec4(0.0);\\n    for \
(int i = 0; i < 4; i++) {\\n      if (weights[i] > 0.0) {\\n        int \
boneIndex = int(boneIndices[i]);\\n        vec4 boneQuat = vec4(0.0, 0.0, \
0.0, 1.0);\\n        vec4 boneDual = vec4(0.0);\\n        if (boneIndex < \
numBones) {\\n          boneQuat = texelFetch(boneTexture, ivec2(2, \
boneIndex), 0);\\n          boneDual = texelFetch(boneTexture, ivec2(3, \
boneIndex), 0);\\n        }\\n\\n        if ((i > 0) && (dot(quat, boneQuat) \
< 0.0)) {\\n          // Flip sign if next blend is pointing in the opposite \
direction\\n          boneQuat = -boneQuat;\\n          boneDual = \
-boneDual;\\n        }\\n        quat += weights[i] * boneQuat;\\n        \
dual += weights[i] * boneDual;\\n      }\\n    }\\n\\n    // Normalize dual \
quaternion\\n    float norm = length(quat);\\n    quat /= norm;\\n    dual /= \
norm;\\n    vec3 translate = vec3(\\n      2.0 * (-dual.w * quat.x + dual.x * \
quat.w - dual.y * quat.z + dual.z * quat.y),\\n      2.0 * (-dual.w * quat.y \
+ dual.x * quat.z + dual.y * quat.w - dual.z * quat.x),\\n      2.0 * \
(-dual.w * quat.z - dual.x * quat.y + dual.y * quat.x + dual.z * quat.w)\\n   \
 );\\n\\n    center = quatVec(quat, center) + translate;\\n    quaternion = \
quatQuat(quat, quaternion);\\n  }\\n\");const Pi={box:new n.Box3(new \
n.Vector3(-1,-1,-1),new n.Vector3(1,1,1)),density:100,fallDirection:new \
n.Vector3(-1,-3,1).normalize(),fallVelocity:.02,wanderScale:.04,wanderVarianc\
e:2,color1:new n.Color(1,1,1),color2:new \
n.Color(.5,.5,1),minScale:.001,maxScale:.005,anisoScale:new \
n.Vector3(1,1,1)},Wi={box:new n.Box3(new n.Vector3(-2,-1,-2),new \
n.Vector3(2,5,2)),density:10,fallDirection:new \
n.Vector3(0,-1,0),fallVelocity:2,wanderScale:.1,wanderVariance:1,color1:new \
n.Color(1,1,1),color2:new \
n.Color(.25,.25,.5),minScale:.005,maxScale:.01,anisoScale:new \
n.Vector3(.1,1,.1)};Symbol.toStringTag;function no(n){return \
Vn({gsplat:nt},{gsplat:nt},(({gsplat:t})=>{if(!t)throw new Error(\"No gsplat \
input\");let e=rt(t);const \
A=n.applyGsplat(t),s=st(A).outputs.center,a=rt(A),r=Ia(s,a),i=us(r,qn(\"float\
\",0));e=gs(i,MA(e),e);const \
o=xA(bA(e,qn(\"float\",.5)),qn(\"float\",.5));return{gsplat:t=at({gsplat:t,rg\
b:o})}}))}function to(n,t,e,A){return \
Vn({gsplat:nt},{gsplat:nt},(({gsplat:s})=>{if(!s)throw new Error(\"No gsplat \
input\");let{center:a}=st(s).outputs;a=n.apply(a);const{z:r}=Ca(a).outputs;le\
t i=Va(MA(r),t,e);return \
i=gs(A,wA(qn(\"float\",1),i),i),{gsplat:s=at({gsplat:s,r:i,g:i,b:i})}}))}Symb\
ol.toStringTag;const eo=class n{static createButton(t,e={}){const \
A=navigator.xr;if(!A)return null;const \
s=A,a=document.createElement(\"button\");function \
r(){a.style.display=\"none\",a.style.cursor=\"auto\",a.style.left=\"calc(50% \
- \
75px)\",a.style.width=\"150px\",a.onmouseenter=null,a.onmouseleave=null,a.onc\
lick=null}var i;return \
t.xr.enabled=!0,t.xr.setReferenceSpaceType(\"local\"),a.id=\"VRButton\",a.sty\
le.display=\"none\",(i=a).style.position=\"absolute\",i.style.bottom=\"20px\"\
,i.style.padding=\"12px 6px\",i.style.border=\"1px solid \
#fff\",i.style.borderRadius=\"4px\",i.style.background=\"rgba(0,0,0,0.1)\",i.\
style.color=\"#fff\",i.style.font=\"normal 13px \
sans-serif\",i.style.textAlign=\"center\",i.style.opacity=\"0.5\",i.style.out\
line=\"none\",i.style.zIndex=\"999\",s.isSessionSupported(\"immersive-vr\").t\
hen((A=>{A?function(){let n=null;async function \
A(e){console.log(\"onSessionStarted\"),e.addEventListener(\"end\",r),await \
t.xr.setSession(e),a.textContent=\"EXIT VR\",n=e}function \
r(){console.log(\"onSessionEnded\"),null==n||n.removeEventListener(\"end\",r)\
,a.textContent=\"ENTER \
VR\",n=null}a.style.display=\"\",a.style.cursor=\"pointer\",a.style.left=\"ca\
lc(50% - \
100px)\",a.style.width=\"200px\",a.style.height=\"100px\",a.textContent=\"ENT\
ER VR\";const \
i={...e,optionalFeatures:[...e.optionalFeatures||[]]};a.onmouseenter=()=>{a.s\
tyle.opacity=\"1.0\"},a.onmouseleave=()=>{a.style.opacity=\"0.5\"},a.onclick=\
()=>{null===n?(console.log(\"requesting \
session\"),s.requestSession(\"immersive-vr\",i).then(A)):(console.log(\"endin\
g session\"),n.end())}}():(r(),a.textContent=\"VR NOT \
SUPPORTED\"),A&&n.xrSessionIsGranted&&a.click()})).catch((function(n){r(),con\
sole.warn(\"Exception when trying to call \
xr.isSessionSupported\",n),a.textContent=\"VR NOT ALLOWED\"})),a}static \
registerSessionGrantedListener(){const t=navigator.xr;if(!t)return null;const \
e=t;/WebXRViewer\\//i.test(navigator.userAgent)||e.addEventListener(\"session\
granted\",(()=>{n.xrSessionIsGranted=!0}))}};eo.xrSessionIsGranted=!1,eo.regi\
sterSessionGrantedListener();var \
Ao=(n=>(n.w=\"wrist\",n.t0=\"thumb-metacarpal\",n.t1=\"thumb-phalanx-proximal\
\",n.t2=\"thumb-phalanx-distal\",n.t3=\"thumb-tip\",n.i0=\"index-finger-metac\
arpal\",n.i1=\"index-finger-phalanx-proximal\",n.i2=\"index-finger-phalanx-in\
termediate\",n.i3=\"index-finger-phalanx-distal\",n.i4=\"index-finger-tip\",n\
.m0=\"middle-finger-metacarpal\",n.m1=\"middle-finger-phalanx-proximal\",n.m2\
=\"middle-finger-phalanx-intermediate\",n.m3=\"middle-finger-phalanx-distal\"\
,n.m4=\"middle-finger-tip\",n.r0=\"ring-finger-metacarpal\",n.r1=\"ring-finge\
r-phalanx-proximal\",n.r2=\"ring-finger-phalanx-intermediate\",n.r3=\"ring-fi\
nger-phalanx-distal\",n.r4=\"ring-finger-tip\",n.p0=\"pinky-finger-metacarpal\
\",n.p1=\"pinky-finger-phalanx-proximal\",n.p2=\"pinky-finger-phalanx-interme\
diate\",n.p3=\"pinky-finger-phalanx-distal\",n.p4=\"pinky-finger-tip\",n))(Ao\
||{});const so=Object.keys(Ao);so.length;var \
ao=(n=>(n.left=\"left\",n.right=\"right\",n))(ao||{});Object.keys(ao);new \
n.Vector3(0,0,-1),new n.Vector3(0,0,1),new n.Vector3(-1,0,0),new \
n.Vector3(1,0,0),new n.Vector3(0,1,0),new n.Vector3(0,-1,0),new \
n.Vector3(0,0,-1),new n.Vector3(0,0,1),new n.Vector3(-1,0,0),new \
n.Vector3(1,0,0),new n.Vector3(0,1,0),new n.Vector3(0,-1,0),new \
n.Vector3(0,0,1),new n.Vector3(0,0,-1),new n.Vector3(0,-1,0),new \
n.Vector3(0,1,0),new n.Vector3(-1,0,0),new n.Vector3(1,0,0);return Wr};let \
SplatMesh;core.SplatMesh=async(n,t)=>{if(\"Packed\"!=await \
interpretate(n[1],t))throw\"SplatMesh must be packed\";const e=await \
interpretate(n[2],t);if(!(e instanceof ArrayBuffer))throw\"SplatMesh does not \
have ByteArray\";SplatMesh||(SplatMesh=await loadSplat());const A=new \
Deferred,s=new SplatMesh({fileBytes:e,onLoad:()=>A.resolve()});await \
A.promise;s.rotateX(Math.PI/2.0);s.rotateY(-Math.PI/2.0);const \
a=interpretate.shared.THREE.THREE,r=s.getBoundingBox(),i=new \
a.Box3Helper(r,16776960);return \
i.material.opacity=0,i.material.visible=!1,t.local.splat=s,t.local.helper=i,t\
.mesh.add(i),t.mesh.add(s),s},core.SplatMesh.destroy=(n,t)=>{t.local.splat.di\
spose(),t.local.helper.dispose()},core.SplatMesh.update=async(n,t)=>{throw\"U\
pdates of SplatMesh are not \
supported\"},core.SplatMesh.virtual=!0,core[\"CoffeeLiqueur`Workshop`SplatMes\
h`\"]=core.SplatMesh;"}|>, "Symbols" -> <||>, 
   "TOC" -> {CoffeeLiqueur`Extensions`TOC`Private`heading[1, 
      "SplatMesh \|01fadf", CoffeeLiqueur`Notebook`Cells`CellObj[
       CoffeeLiqueur`Notebook`Cells`CellObj`$88]], 
     CoffeeLiqueur`Extensions`TOC`Private`heading[2, 
      "Filtering Gaussian Splats", CoffeeLiqueur`Notebook`Cells`CellObj[
       CoffeeLiqueur`Notebook`Cells`CellObj`$97]]}|>, 
 "Cells" -> {<|"Data" -> ".md\n# SplatMesh \|01fadf\nSplatMesh is a small \
Wolfram Language [paclet](https://github.com/JerryI/wl-splatmesh) for \
importing, manipulating, and exporting Gaussian splatting meshes (`.spz` \
files). It provides a compact in-memory representation of splats (centers, \
scales, orientations, color and opacity data) using [SPZ \
format](https://github.com/nianticlabs/spz), extends default `Import`, \
`Export` expressions, allows bulk operations, simple transformations, and a \
lightweight preview using Wolfram Standard Library.\n\n<div \
class=\"mt-2\"><svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 367.4 \
90\" class=\"footer-logo-mktg d-block\" height=\"30\"><g \
fill=\"currentColor\"><path d=\"m46.1 0c-25.5 0-46.1 20.6-46.1 46.1 0 20.4 \
13.2 37.7 31.5 43.8 2.3.4 3.2-1 3.2-2.2 0-1.1-.1-4.7-.1-8.6-11.6 \
2.1-14.6-2.8-15.5-5.4-.5-1.3-2.8-5.4-4.7-6.5-1.6-.9-3.9-3-.1-3.1 3.6-.1 6.2 \
3.3 7.1 4.7 4.2 7 10.8 5 13.4 3.8.4-3 1.6-5 2.9-6.2-10.3-1.2-21-5.1-21-22.8 \
0-5 1.8-9.2 4.7-12.4-.5-1.2-2.1-5.9.5-12.2 0 0 3.9-1.2 12.7 4.7 3.7-1 7.6-1.6 \
11.5-1.6s7.8.5 11.5 1.6c8.8-6 12.7-4.7 12.7-4.7 2.5 6.3.9 11.1.5 12.2 2.9 3.2 \
4.7 7.3 4.7 12.4 0 17.7-10.8 21.6-21.1 22.8 1.7 1.4 3.1 4.2 3.1 8.5 0 6.2-.1 \
11.1-.1 12.7 0 1.2.9 2.7 3.2 2.2 18.2-6.1 31.4-23.4 \
31.4-43.8.3-25.4-20.4-46-45.9-46z\"></path><path d=\"m221.6 67.1h-.1zm0 0c-.5 \
0-1.8.3-3.2.3-4.4 0-5.9-2-5.9-4.6v-17.5h8.9c.5 0 \
.9-.4.9-1.1v-9.5c0-.5-.4-.9-.9-.9h-8.9v-11.7c0-.4-.3-.7-.8-.7h-12c-.5 \
0-.8.3-.8.7v12.1s-6.1 1.5-6.5 1.6-.7.5-.7.9v7.6c0 .6.4 1.1.9 1.1h6.2v18.3c0 \
13.6 9.5 15 16 15 3 0 6.5-.9 \
7.1-1.2.3-.1.5-.5.5-.9v-8.4c.1-.6-.3-1-.8-1.1zm132.2-12.2c0-10.1-4.1-11.4-8.4\
-11-3.3.2-6 1.9-6 1.9v19.6s2.7 1.9 6.8 2c5.8.2 7.6-1.9 7.6-12.5zm13.6-.9c0 \
19.1-6.2 24.6-17 24.6-9.1 0-14.1-4.6-14.1-4.6s-.2 2.6-.5 \
2.9c-.2.3-.4.4-.8.4h-8.3c-.6 0-1.1-.4-1.1-.9l.1-62c0-.5.4-.9.9-.9h11.9c.5 0 \
.9.4.9.9l-.1 20.9s4.6-3 11.3-3h.1c6.8-0 16.7 2.5 16.7 \
21.7zm-48.7-20.2h-11.7c-.6 0-.9.4-.9 1.1v30.3s-3.1 2.2-7.3 \
2.2-5.4-1.9-5.4-6.1v-26.5c0-.5-.4-.9-.9-.9h-11.9c-.5 0-.9.4-.9.9v28.5c0 12.3 \
6.9 15.3 16.3 15.3 7.8 0 14.1-4.3 14.1-4.3s.3 2.2.4 2.5.5.5.9.5h7.5c.6 0 \
.9-.4.9-.9l.1-41.7c-.1-.4-.6-.9-1.2-.9zm-132.2 0h-11.9c-.5 0-.9.5-.9 \
1.1v40.9c0 1.1.7 1.5 1.7 1.5h10.7c1.1 0 1.4-.5 \
1.4-1.5v-41.1c0-.5-.5-.9-1-.9zm-5.8-18.9c-4.3 0-7.7 3.4-7.7 7.7s3.4 7.7 7.7 \
7.7c4.2 0 7.6-3.4 7.6-7.7s-3.4-7.7-7.6-7.7zm92-1.4h-11.8c-.5 \
0-.9.4-.9.9v22.8h-18.5v-22.7c0-.5-.4-.9-.9-.9h-11.9c-.5 0-.9.4-.9.9v62c0 \
.5.5.9.9.9h11.9c.5 0 .9-.4.9-.9v-26.6h18.5l-.1 26.5c0 .5.4.9.9.9h11.9c.5 0 \
.9-.4.9-.9v-62c0-.4-.4-.9-.9-.9zm-105.3 27.5v32c0 .2-.1.6-.3.7 0 0-7 5-18.5 \
5-13.9 0-30.3-4.4-30.3-33 0-28.7 14.4-34.6 28.4-34.5 12.2 0 17.1 2.7 17.8 \
3.2.2.3.3.5.3.8l-2.3 9.9c0 .5-.5 1.1-1.1.9-2-.6-5-1.8-12.1-1.8-8.2 0-17 \
2.3-17 20.8s8.4 20.6 14.4 20.6c5.1 0 7-.6 7-.6v-12.8h-8.2c-.6 \
0-1.1-.4-1.1-.9v-10.3c0-.5.4-.9 1.1-.9h20.9c.6-.1 1 .4 1 \
.9z\"></path></g></svg></div> \
\n\nhttps://github.com/JerryI/wl-splatmesh\n\nCompatible with:\n- \
==Mathematica== (no 3D render, only points preview)\n- ==WLJS Notebook==", 
    "Display" -> "codemirror", "Hash" -> 
     "c0223c3e-fdb7-47a6-ab26-d5d8ffdb3b0b", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, 
    "PublicFields" -> {"Properties"}, "State" -> "Idle", "Type" -> "Input", 
    "UID" -> Null, "Notebook" -> "a5f39715-c462-487f-848e-dfb15810accd"|>, 
   <|"Data" -> "# SplatMesh \|01fadf\nSplatMesh is a small Wolfram Language \
[paclet](https://github.com/JerryI/wl-splatmesh) for importing, manipulating, \
and exporting Gaussian splatting meshes (`.spz` files). It provides a compact \
in-memory representation of splats (centers, scales, orientations, color and \
opacity data) using [SPZ format](https://github.com/nianticlabs/spz), extends \
default `Import`, `Export` expressions, allows bulk operations, simple \
transformations, and a lightweight preview using Wolfram Standard \
Library.\n\n<div class=\"mt-2\"><svg xmlns=\"http://www.w3.org/2000/svg\" \
viewBox=\"0 0 367.4 90\" class=\"footer-logo-mktg d-block\" height=\"30\"><g \
fill=\"currentColor\"><path d=\"m46.1 0c-25.5 0-46.1 20.6-46.1 46.1 0 20.4 \
13.2 37.7 31.5 43.8 2.3.4 3.2-1 3.2-2.2 0-1.1-.1-4.7-.1-8.6-11.6 \
2.1-14.6-2.8-15.5-5.4-.5-1.3-2.8-5.4-4.7-6.5-1.6-.9-3.9-3-.1-3.1 3.6-.1 6.2 \
3.3 7.1 4.7 4.2 7 10.8 5 13.4 3.8.4-3 1.6-5 2.9-6.2-10.3-1.2-21-5.1-21-22.8 \
0-5 1.8-9.2 4.7-12.4-.5-1.2-2.1-5.9.5-12.2 0 0 3.9-1.2 12.7 4.7 3.7-1 7.6-1.6 \
11.5-1.6s7.8.5 11.5 1.6c8.8-6 12.7-4.7 12.7-4.7 2.5 6.3.9 11.1.5 12.2 2.9 3.2 \
4.7 7.3 4.7 12.4 0 17.7-10.8 21.6-21.1 22.8 1.7 1.4 3.1 4.2 3.1 8.5 0 6.2-.1 \
11.1-.1 12.7 0 1.2.9 2.7 3.2 2.2 18.2-6.1 31.4-23.4 \
31.4-43.8.3-25.4-20.4-46-45.9-46z\"></path><path d=\"m221.6 67.1h-.1zm0 0c-.5 \
0-1.8.3-3.2.3-4.4 0-5.9-2-5.9-4.6v-17.5h8.9c.5 0 \
.9-.4.9-1.1v-9.5c0-.5-.4-.9-.9-.9h-8.9v-11.7c0-.4-.3-.7-.8-.7h-12c-.5 \
0-.8.3-.8.7v12.1s-6.1 1.5-6.5 1.6-.7.5-.7.9v7.6c0 .6.4 1.1.9 1.1h6.2v18.3c0 \
13.6 9.5 15 16 15 3 0 6.5-.9 \
7.1-1.2.3-.1.5-.5.5-.9v-8.4c.1-.6-.3-1-.8-1.1zm132.2-12.2c0-10.1-4.1-11.4-8.4\
-11-3.3.2-6 1.9-6 1.9v19.6s2.7 1.9 6.8 2c5.8.2 7.6-1.9 7.6-12.5zm13.6-.9c0 \
19.1-6.2 24.6-17 24.6-9.1 0-14.1-4.6-14.1-4.6s-.2 2.6-.5 \
2.9c-.2.3-.4.4-.8.4h-8.3c-.6 0-1.1-.4-1.1-.9l.1-62c0-.5.4-.9.9-.9h11.9c.5 0 \
.9.4.9.9l-.1 20.9s4.6-3 11.3-3h.1c6.8-0 16.7 2.5 16.7 \
21.7zm-48.7-20.2h-11.7c-.6 0-.9.4-.9 1.1v30.3s-3.1 2.2-7.3 \
2.2-5.4-1.9-5.4-6.1v-26.5c0-.5-.4-.9-.9-.9h-11.9c-.5 0-.9.4-.9.9v28.5c0 12.3 \
6.9 15.3 16.3 15.3 7.8 0 14.1-4.3 14.1-4.3s.3 2.2.4 2.5.5.5.9.5h7.5c.6 0 \
.9-.4.9-.9l.1-41.7c-.1-.4-.6-.9-1.2-.9zm-132.2 0h-11.9c-.5 0-.9.5-.9 \
1.1v40.9c0 1.1.7 1.5 1.7 1.5h10.7c1.1 0 1.4-.5 \
1.4-1.5v-41.1c0-.5-.5-.9-1-.9zm-5.8-18.9c-4.3 0-7.7 3.4-7.7 7.7s3.4 7.7 7.7 \
7.7c4.2 0 7.6-3.4 7.6-7.7s-3.4-7.7-7.6-7.7zm92-1.4h-11.8c-.5 \
0-.9.4-.9.9v22.8h-18.5v-22.7c0-.5-.4-.9-.9-.9h-11.9c-.5 0-.9.4-.9.9v62c0 \
.5.5.9.9.9h11.9c.5 0 .9-.4.9-.9v-26.6h18.5l-.1 26.5c0 .5.4.9.9.9h11.9c.5 0 \
.9-.4.9-.9v-62c0-.4-.4-.9-.9-.9zm-105.3 27.5v32c0 .2-.1.6-.3.7 0 0-7 5-18.5 \
5-13.9 0-30.3-4.4-30.3-33 0-28.7 14.4-34.6 28.4-34.5 12.2 0 17.1 2.7 17.8 \
3.2.2.3.3.5.3.8l-2.3 9.9c0 .5-.5 1.1-1.1.9-2-.6-5-1.8-12.1-1.8-8.2 0-17 \
2.3-17 20.8s8.4 20.6 14.4 20.6c5.1 0 7-.6 7-.6v-12.8h-8.2c-.6 \
0-1.1-.4-1.1-.9v-10.3c0-.5.4-.9 1.1-.9h20.9c.6-.1 1 .4 1 \
.9z\"></path></g></svg></div> \
\n\nhttps://github.com/JerryI/wl-splatmesh\n\nCompatible with:\n- \
==Mathematica== (no 3D render, only points preview)\n- ==WLJS Notebook==", 
    "Display" -> "markdown", "Hash" -> 
     "6b25b90f-bd36-4fdc-93b1-3607210201f8", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "PublicFields" -> {"Properties"}, 
    "State" -> "Idle", "Type" -> "Output", "UID" -> Null, 
    "Notebook" -> "a5f39715-c462-487f-848e-dfb15810accd"|>, 
   <|"Data" -> 
     ".md\nLoad the library\n\n*if you run it from examples directory*", 
    "Display" -> "codemirror", "Hash" -> 
     "6465cfa4-5478-4cd7-9ed2-7b54701fd9b1", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, 
    "PublicFields" -> {"Properties"}, "State" -> "Idle", "Type" -> "Input", 
    "UID" -> Null, "Notebook" -> "a5f39715-c462-487f-848e-dfb15810accd"|>, 
   <|"Data" -> "Load the library\n\n*if you run it from examples directory*", 
    "Display" -> "markdown", "Hash" -> 
     "6a27dbac-bad7-4fa8-a71f-7b110ae64933", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "PublicFields" -> {"Properties"}, 
    "State" -> "Idle", "Type" -> "Output", "UID" -> Null, 
    "Notebook" -> "a5f39715-c462-487f-848e-dfb15810accd"|>, 
   <|"Data" -> "PacletDirectoryLoad[NotebookDirectory[]];", 
    "Display" -> "codemirror", "Hash" -> 
     "80bfd115-ea79-4f4c-8ed5-8d45f0da6f5f", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "PublicFields" -> {"Properties"}, 
    "State" -> "Idle", "Type" -> "Input", "UID" -> Null, 
    "Notebook" -> "a5f39715-c462-487f-848e-dfb15810accd"|>, 
   <|"Data" -> "<<CoffeeLiqueur`Workshop`SplatMesh`", 
    "Display" -> "codemirror", "Hash" -> 
     "786f1c73-b5cd-4e75-899a-30cfa9865784", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "PublicFields" -> {"Properties"}, 
    "State" -> "Idle", "Type" -> "Input", "UID" -> Null, 
    "Notebook" -> "a5f39715-c462-487f-848e-dfb15810accd"|>, 
   <|"Data" -> ".md\n## Filtering Gaussian Splats\nLet's import a messy scene \
scanned with Scaniverse App:", "Display" -> "codemirror", 
    "Hash" -> "2482e327-2494-49e2-8793-0a5ad5dd92ce", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, 
    "PublicFields" -> {"Properties"}, "State" -> "Idle", "Type" -> "Input", 
    "UID" -> Null, "Notebook" -> "a5f39715-c462-487f-848e-dfb15810accd"|>, 
   <|"Data" -> "## Filtering Gaussian Splats\nLet's import a messy scene \
scanned with Scaniverse App:", "Display" -> "markdown", 
    "Hash" -> "4619c162-c473-49b4-896e-7da1a96e20ac", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "PublicFields" -> {"Properties"}, 
    "State" -> "Idle", "Type" -> "Output", "UID" -> Null, 
    "Notebook" -> "a5f39715-c462-487f-848e-dfb15810accd"|>, 
   <|"Data" -> "mesh = Import[FileNameJoin[{\"attachments\", \"Untitled \
scan-663.spz 2\"}], \"SPZ\"]", "Display" -> "codemirror", 
    "Hash" -> "46dba794-1049-4a57-82e9-df510673f83d", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "PublicFields" -> {"Properties"}, 
    "State" -> "Idle", "Type" -> "Input", "UID" -> Null, 
    "Notebook" -> "a5f39715-c462-487f-848e-dfb15810accd"|>, 
   <|"Data" -> "(*VB[*)BoxForm`temporalStorage$228770(*,*)(*\"1:eJxdVMeO41YAW\
6QAQb4i2dPMOIBldQfYg3ovluRnSYs9qDw1q1nNkn4+8eSYC0ESPBEg/4w7J/v5y5cv4+8vENJy6g\
ZQwqf7z8t0+zqaDDgW398+APv94/2Pt4+/Pt7fPr6e/obqLoJ0tpqduWApuUSP2wFYvaftN/t2ubr\
jvc14RU42Ky7vyoU+BUyhG9HzIlFUk6F8dtePnRxtXpwCDT05CDI4K29W+7pl+Covg1TdsQohrGud\
GZWpdL2/BFqShRghXI8J9Ki1cDocvfWuICOSq1h9wW4UL3AgFtt4oXl0aUzJLaXgkaYXc+qTcMxLi\
Tq1wXpR0Wi79Zo4KFodW7LoCKigi1F9Q+I4dZ2OFDEO0pt8alL+aJ7Lq43lVEquYz70M2asq5Xpm7\
SfCiuIUcfD5A2H2OEpmg0wMrvrvOUAyE10xJY6SnC9F0vAT5th78KiqIGGF0ydz+5u43rQIr5gifk\
+P7GavgHp1KCCAjgJ8lZY7bNzMYJ2mRoBcd0QMfNd8whbyRfFRZUx39pBwelu7bYTgW9DWz1CxuYP\
kHOpmG2RMTdcE8WZBuO93mBNcXZsKX/cVYIfEII1kQc2xd3cUGSzujkzAmbrQNKZx9LuqJl1pUE5r\
VmQ0PJig26zHWpnr6HVEvqkV71VL4VNwlCEjFrDuD3Q7TyzdG6NtomRIGSfbDjdYsu02NXHN7KU8j\
FAEEpuM+9WTrE7n5IaqWT/SeVcsTBjIwcKuqdy7lyijjlrz+fceUGs3DmCosc+SW0fPnLfv2LX9VI\
xnBerKLqcxbJLRvaIDK0Ilf2ZFGpFKwZ4ls3ShvXoaz0OHq5XpQ/AltNhKvhTG/NaRve1Xp0rRfS1\
iOhp/ab1HHk998NGAMBwFDK62rUD8kxuPrpK0qRhtQYOZNA5js3cNWn3vaCuAoQs106pTdCAvvR5o\
BY020+MTO6i6k+Adm26to/sUaMVvWY4wxDYQy3dZWiodMLujuwcN2bfGb6ZA36729xyEIFL8KaNRM\
omkzdhw4+qUskrPVNteeYl1rqK2yOLFMFs5QLN9JJWxScyqmne2nRaK7R9ZmXd8zl3bOBFPsDpLJy\
xHBeVw2IYdgN1duwvLRa+ehSI1s618QqMMP/27evnvn8A9uP9R/bT5y/88gJnrqH72yeBUWq19faf\
6w0z/F/m80RcWMNkiuIajr++5GtVI/wX8Rtslg==\"*)(*]VB*)", 
    "Display" -> "codemirror", "Hash" -> 
     "21cf4d7e-e64a-4961-a4f6-01a180798618", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "PublicFields" -> {"Properties"}, 
    "State" -> "Idle", "Type" -> "Output", "UID" -> Null, 
    "Notebook" -> "a5f39715-c462-487f-848e-dfb15810accd"|>, 
   <|"Data" -> ".md\nNext step is to render it and mask parts of interest \
with a simple cylinder primitive:", "Display" -> "codemirror", 
    "Hash" -> "c104b0f9-2657-4da7-8162-8415a5e41dfb", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, 
    "PublicFields" -> {"Properties"}, "State" -> "Idle", "Type" -> "Input", 
    "UID" -> Null, "Notebook" -> "a5f39715-c462-487f-848e-dfb15810accd"|>, 
   <|"Data" -> "Next step is to render it and mask parts of interest with a \
simple cylinder primitive:", "Display" -> "markdown", 
    "Hash" -> "291043ff-2891-4356-987e-016840ea081a", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "PublicFields" -> {"Properties"}, 
    "State" -> "Idle", "Type" -> "Output", "UID" -> Null, 
    "Notebook" -> "a5f39715-c462-487f-848e-dfb15810accd"|>, 
   <|"Data" -> "Graphics3D[Scale[{mesh, \
Cylinder[{{0.0053`,-0.0088`,0.0077`},{0.0017`,0.0902`,0.0119`}}, 0.7/30.0]}, \
100], \"OrthographicCameraZoom\"->5]", "Display" -> "codemirror", 
    "Hash" -> "0428e73c-f881-43dd-86d1-76e40160ca24", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "PublicFields" -> {"Properties"}, 
    "State" -> "Idle", "Type" -> "Input", "UID" -> Null, 
    "Notebook" -> "a5f39715-c462-487f-848e-dfb15810accd"|>, 
   <|"Data" -> ".md\n\n<img \
src=\"/attachments/dragGizmo-ezgif.com-speed-68c.gif\" \
width=\"400\"/>\n\n:::tip\nUse helper tools such as __drag gizmo__ from the \
command palette. Apply it on the selected <code>{x,y,z}</code>\n:::", 
    "Display" -> "codemirror", "Hash" -> 
     "4624b3ae-e0ff-44e8-9ffe-27c5384f50f7", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, 
    "PublicFields" -> {"Properties"}, "State" -> "Idle", "Type" -> "Input", 
    "UID" -> Null, "Notebook" -> "a5f39715-c462-487f-848e-dfb15810accd"|>, 
   <|"Data" -> "<img src=\"/attachments/dragGizmo-ezgif.com-speed-68c.gif\" \
width=\"400\"/>\n\n:::tip\nUse helper tools such as __drag gizmo__ from the \
command palette. Apply it on the selected <code >{x,y,z}</code>\n:::", 
    "Display" -> "markdown", "Hash" -> 
     "c3eed18e-1c57-429a-b7d2-289c41ce8551", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "PublicFields" -> {"Properties"}, 
    "State" -> "Idle", "Type" -> "Output", "UID" -> Null, 
    "Notebook" -> "a5f39715-c462-487f-848e-dfb15810accd"|>, 
   <|"Data" -> ".md\nCreate a region function for faster processing:", 
    "Display" -> "codemirror", "Hash" -> 
     "44bf9baf-34a7-498e-abb8-863241aa3b87", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, 
    "PublicFields" -> {"Properties"}, "State" -> "Idle", "Type" -> "Input", 
    "UID" -> Null, "Notebook" -> "a5f39715-c462-487f-848e-dfb15810accd"|>, 
   <|"Data" -> "Create a region function for faster processing:", 
    "Display" -> "markdown", "Hash" -> 
     "1c6b8b2c-5fc0-4c4c-8444-84beaef6c62c", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "PublicFields" -> {"Properties"}, 
    "State" -> "Idle", "Type" -> "Output", "UID" -> Null, 
    "Notebook" -> "a5f39715-c462-487f-848e-dfb15810accd"|>, 
   <|"Data" -> "f = \
RegionMember[Cylinder[{{0.0053`,-0.0088`,0.0077`},{0.0017`,0.0902`,0.0119`}}, \
0.7/30.0]]", "Display" -> "codemirror", 
    "Hash" -> "2df5339d-a365-4392-ae7a-76e6f94f7e91", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "PublicFields" -> {"Properties"}, 
    "State" -> "Idle", "Type" -> "Input", "UID" -> Null, 
    "Notebook" -> "a5f39715-c462-487f-848e-dfb15810accd"|>, 
   <|"Data" -> "RegionMemberFunction[(*VB[*) Cylinder[{{0.0053, -0.0088, \
0.0077}, {0.0017, 0.0902, 0.0119}}, 0.02333333333333333], 3, \
Function[{\\[FormalA]}, 0 <= 0.08726351763700724 - \
0.36616623947272064*\\[FormalA][[1]] + 10.06957158549982*\\[FormalA][[2]] + \
0.4271939460515075*\\[FormalA][[3]] <= 1 && 1.*\\[FormalA][[1]]^2 + \
0.0031165212290093134*\\[FormalA][[2]]^2 + \
\\[FormalA][[2]]*(0.00032224829507956297 - \
0.08469604751778252*\\[FormalA][[3]]) + \
\\[FormalA][[1]]*(-0.009984864706313705 + 0.0725966121580993*\\[FormalA][[2]] \
+ 0.00307985627337391*\\[FormalA][[3]]) + \
0.9995233555767397*\\[FormalA][[3]]^2 <= 0.00045509120729551124 + \
0.01615430813228716*\\[FormalA][[3]]] \
(*,*)(*\"1:eJy9kMtLw0AQxuML1ItQEMFTBa+BmKR2400xRaEgJNqzm85sWNgH7APb/97drmBv3r\
x8zHzfzPBjbgbdsaMsy+x1kCe9WWgjPx+NoWpE6L2U1GyDzQ7izEWQhdHKtQpW3DhPRQome0G7wbV\
3dBDY3wZ7VpA5ZU2ZE0bneU3K+5yQuyavq6YqGlbPygLYYTxyHGTJrUvd1R7PD8erQ7ni+NVfhqyV\
AwJwNU6BS1SWa/UwTavnMQbutInTiTAef9ECUncW5KNbPuNaA/bRqn4ZOh/QT2OBFN6U2O7cd+Pxb\
7LJbm0MMP+IZU/i+6mw+A11xXS7\"*)(*]VB*)]", "Display" -> "codemirror", 
    "Hash" -> "e15b38e7-84da-4d38-9cc5-4170446ef0a4", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "PublicFields" -> {"Properties"}, 
    "State" -> "Idle", "Type" -> "Output", "UID" -> Null, 
    "Notebook" -> "a5f39715-c462-487f-848e-dfb15810accd"|>, 
   <|"Data" -> ".md\nFilter splats \|01fadf\n\n> Note that filtering function \
accepts\n> <code>[index, center, scales, quaternions, opacity, color]</code>"\
, "Display" -> "codemirror", "Hash" -> 
     "780c2b3b-8859-48fc-b80e-fbe8f20fe57c", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, 
    "PublicFields" -> {"Properties"}, "State" -> "Idle", "Type" -> "Input", 
    "UID" -> Null, "Notebook" -> "a5f39715-c462-487f-848e-dfb15810accd"|>, 
   <|"Data" -> "Filter splats \|01fadf\n\n> Note that filtering function \
accepts\n><code >[index, center, scales, quaternions, opacity, color]</code>"\
, "Display" -> "markdown", "Hash" -> "63e5b4a9-83d7-47b2-a39c-869c815df66f", 
    "Invisible" -> False, "MetaOnly" -> False, "Props" -> <||>, 
    "PublicFields" -> {"Properties"}, "State" -> "Idle", "Type" -> "Output", 
    "UID" -> Null, "Notebook" -> "a5f39715-c462-487f-848e-dfb15810accd"|>, 
   <|"Data" -> "filtered = SplatMeshFilter[mesh, \
(f[#2])&];\nGraphics3D[filtered, \"OrthographicCameraZoom\"->26]", 
    "Display" -> "codemirror", "Hash" -> 
     "862d4c53-67fa-48ff-9f4f-6238b69f6843", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "PublicFields" -> {"Properties"}, 
    "State" -> "Idle", "Type" -> "Input", "UID" -> Null, 
    "Notebook" -> "a5f39715-c462-487f-848e-dfb15810accd"|>, 
   <|"Data" -> "(*VB[*)(FrontEndRef[\"a0ba956a-15c3-473c-8de4-b424a2c988da\"]\
)(*,*)(*\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeEJBwK8rPK3HNS3GtSE0uLUlMykkNVgEKJxokJ\
VqamiXqGpomG+uamBsn61qkpJroJpkYmSQaJVtaWKQkAgCGbhXO\"*)(*]VB*)", 
    "Display" -> "codemirror", "Hash" -> 
     "183b3358-08e6-43e6-8312-5765dbbaace4", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "PublicFields" -> {"Properties"}, 
    "State" -> "Idle", "Type" -> "Output", "UID" -> Null, 
    "Notebook" -> "a5f39715-c462-487f-848e-dfb15810accd"|>, 
   <|"Data" -> ".md\n*Try to zoom in* \|01f4a1", "Display" -> "codemirror", 
    "Hash" -> "a7da5785-b35c-4fa8-95e6-9a855949e64e", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, 
    "PublicFields" -> {"Properties"}, "State" -> "Idle", "Type" -> "Input", 
    "UID" -> Null, "Notebook" -> "a5f39715-c462-487f-848e-dfb15810accd"|>, 
   <|"Data" -> "*Try to zoom in* \|01f4a1", "Display" -> "markdown", 
    "Hash" -> "d28451a8-7a81-4377-804b-7684c9b558a1", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "PublicFields" -> {"Properties"}, 
    "State" -> "Idle", "Type" -> "Output", "UID" -> Null, 
    "Notebook" -> "a5f39715-c462-487f-848e-dfb15810accd"|>, 
   <|"Data" -> 
     ".md\nPreview using 3D points (compatible with \:2728 Mathematica \
\:2728)", "Display" -> "codemirror", 
    "Hash" -> "a291d74e-45a7-4541-b342-290575cb5348", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, 
    "PublicFields" -> {"Properties"}, "State" -> "Idle", "Type" -> "Input", 
    "UID" -> Null, "Notebook" -> "a5f39715-c462-487f-848e-dfb15810accd"|>, 
   <|"Data" -> 
     "Preview using 3D points (compatible with \:2728 Mathematica \:2728)", 
    "Display" -> "markdown", "Hash" -> 
     "e09f02a3-4b72-4ce9-99d7-24eb2be31830", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "PublicFields" -> {"Properties"}, 
    "State" -> "Idle", "Type" -> "Output", "UID" -> Null, 
    "Notebook" -> "a5f39715-c462-487f-848e-dfb15810accd"|>, 
   <|"Data" -> "filtered[\"Preview\"]", "Display" -> "codemirror", 
    "Hash" -> "a4e4e435-b423-4106-904c-49610a0d2195", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "PublicFields" -> {"Properties"}, 
    "State" -> "Idle", "Type" -> "Input", "UID" -> Null, 
    "Notebook" -> "a5f39715-c462-487f-848e-dfb15810accd"|>, 
   <|"Data" -> "(*VB[*)(FrontEndRef[\"2cbcc7c3-ed38-49e7-bdb1-2bc78bd54719\"]\
)(*,*)(*\"1:eJxTTMoPSmNkYGAoZgESHvk5KRCeEJBwK8rPK3HNS3GtSE0uLUlMykkNVgEKGyUnJ\
SebJxvrpqYYW+iaWKaa6yalJBnqGiUlm1skpZiamBtaAgCW/hY5\"*)(*]VB*)", 
    "Display" -> "codemirror", "Hash" -> 
     "02eb3a15-4429-448f-9235-c1d828b17e4f", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "PublicFields" -> {"Properties"}, 
    "State" -> "Idle", "Type" -> "Output", "UID" -> Null, 
    "Notebook" -> "a5f39715-c462-487f-848e-dfb15810accd"|>, 
   <|"Data" -> ".md\nExport our modified model:", "Display" -> "codemirror", 
    "Hash" -> "759d912d-b4eb-4bdf-a4fe-ce49631ea566", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, 
    "PublicFields" -> {"Properties"}, "State" -> "Idle", "Type" -> "Input", 
    "UID" -> Null, "Notebook" -> "a5f39715-c462-487f-848e-dfb15810accd"|>, 
   <|"Data" -> "Export our modified model:", "Display" -> "markdown", 
    "Hash" -> "4499fe73-9ccc-4ff2-ac22-894b114385cb", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "PublicFields" -> {"Properties"}, 
    "State" -> "Idle", "Type" -> "Output", "UID" -> Null, 
    "Notebook" -> "a5f39715-c462-487f-848e-dfb15810accd"|>, 
   <|"Data" -> "Export[\"filtered.spz\", filtered, \"SPZ\"]", 
    "Display" -> "codemirror", "Hash" -> 
     "1623370a-3ac6-41d0-bca0-a6a665f500e1", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "PublicFields" -> {"Properties"}, 
    "State" -> "Idle", "Type" -> "Input", "UID" -> Null, 
    "Notebook" -> "a5f39715-c462-487f-848e-dfb15810accd"|>, 
   <|"Data" -> ".md\n:::tip\nSee \
[README.md](https://github.com/JerryI/wl-splatmesh) for more API \
features\n:::", "Display" -> "codemirror", 
    "Hash" -> "b9b88ab0-4f8a-40b0-b086-cbce16c102a6", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <|"Hidden" -> True|>, 
    "PublicFields" -> {"Properties"}, "State" -> "Idle", "Type" -> "Input", 
    "UID" -> Null, "Notebook" -> "a5f39715-c462-487f-848e-dfb15810accd"|>, 
   <|"Data" -> ":::tip\nSee \
[README.md](https://github.com/JerryI/wl-splatmesh) for more API \
features\n:::", "Display" -> "markdown", 
    "Hash" -> "c2d79b10-c4e9-49c6-9ac2-6b3d5842d4b3", "Invisible" -> False, 
    "MetaOnly" -> False, "Props" -> <||>, "PublicFields" -> {"Properties"}, 
    "State" -> "Idle", "Type" -> "Output", "UID" -> Null, 
    "Notebook" -> "a5f39715-c462-487f-848e-dfb15810accd"|>}, 
 "serializer" -> "jsfn4"|>
